{
  "address": "0x5De74546d3B86C8Df7FEEc30253865e1149818C8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbbe815a90602fc7692b6982ee7f4f941f107e31fcad04495e0ef1374d8fefcdd",
  "receipt": {
    "to": null,
    "from": "0x0FFaD0c8b6acB224999e41e8229D0De90f914832",
    "contractAddress": "0x5De74546d3B86C8Df7FEEc30253865e1149818C8",
    "transactionIndex": 2,
    "gasUsed": "3814033",
    "logsBloom": "0x
    "blockHash": "0xe5d051380f612eade16eb07fa88f4deaa5f6bd714e823df255962ba6225f1267",
    "transactionHash": "0xbbe815a90602fc7692b6982ee7f4f941f107e31fcad04495e0ef1374d8fefcdd",
    "logs": [],
    "blockNumber": 343302,
    "cumulativeGasUsed": "4671640",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0FFaD0c8b6acB224999e41e8229D0De90f914832",
    "0x7973b6961C8C5ca8026B9FB82332626e715ff8c7"
  ],
  "solcInputHash": "09f2d70cb71d69f1cdc83c12570dc3dd",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/FireBirdFactory.sol\":\"FireBirdFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/FireBirdERC20.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IFireBirdERC20.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract FireBirdERC20 is IFireBirdERC20 {\\n    using SafeMath for uint;\\n\\n    string public constant name = 'FireBird Liquidity Provider';\\n    string public constant symbol = 'FLP';\\n    uint8 public constant decimals = 18;\\n    uint  public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'FLP: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'FLP: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xbc964b6cc1fcd43024e0b32bbae1505fcb7d50ffd94741420bff3c0959daa388\"},\"contracts/FireBirdFactory.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IFireBirdFactory.sol';\\nimport './FireBirdPair.sol';\\n\\ncontract FireBirdFactory is IFireBirdFactory {\\n    address public feeTo;\\n    address public formula;\\n    uint public protocolFee;\\n    address public feeToSetter;\\n\\n    mapping(bytes32 => address) private _pairSalts;\\n    address[] public allPairs;\\n    mapping(address => uint64) private _pairs;\\n\\n\\n    constructor(address _feeToSetter, address _formula) public {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n    }\\n    function isPair(address b) external view returns (bool){\\n        return _pairs[b] > 0;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair){\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        pair = _pairSalts[salt];\\n    }\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair) {\\n        require(tokenA != tokenB, 'FLP: IDENTICAL_ADDRESSES');\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, 'FLP: INVALID_TOKEN_WEIGHT');\\n        // swap fee from [0.01% - 20%]\\n        require(swapFee >= 1 && swapFee <= 2000, 'FLP: INVALID_SWAP_FEE');\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), 'FLP: ZERO_ADDRESS');\\n        // single check is sufficient\\n        bytes memory bytecode = type(FireBirdPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        require(_pairSalts[salt] == address(0), 'FLP: PAIR_EXISTS');\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IFireBirdPair(pair).initialize(token0, token1, tokenWeight0, swapFee);\\n        _pairSalts[salt] = address(pair);\\n        allPairs.push(pair);\\n        uint64 weightAndFee = uint64(swapFee);\\n        weightAndFee |= uint64(tokenWeight0)<<32;\\n        _pairs[address(pair)] = weightAndFee;\\n        emit PairCreated(token0, token1, pair, tokenWeight0, swapFee, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, 'FLP: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, 'FLP: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setProtocolFee(uint _protocolFee) external {\\n        require(msg.sender == feeToSetter, 'FLP: FORBIDDEN');\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), 'FLP: Invalid Protocol fee');\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getWeightsAndSwapFee(address pair) public view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee) {\\n        uint64 weightAndFee = _pairs[pair];\\n        if (weightAndFee > 0) {\\n            swapFee = uint32(weightAndFee);\\n            tokenWeight0 = uint32(weightAndFee>>32);\\n            tokenWeight1 = 100 - tokenWeight0;\\n        } else {\\n            // Default is 0.3%\\n            return (50, 50, 30);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x524de6a6280a18a00dc51c744db7272faa6709881c5ec12c31ffa1e6fa51a2bd\"},\"contracts/FireBirdPair.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IFireBirdPair.sol';\\nimport './interfaces/IFireBirdFormula.sol';\\nimport './FireBirdERC20.sol';\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IFireBirdFactory.sol';\\nimport './interfaces/IUniswapV2Callee.sol';\\n\\ncontract FireBirdPair is IFireBirdPair, FireBirdERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint private unlocked = 1;\\n    address public formula;\\n\\n    uint112 private collectedFee0;           // uses single storage slot, accessible via getReserves\\n    uint112 private collectedFee1;           // uses single storage slot, accessible via getReserves\\n    uint32 private tokenWeight0;\\n\\n    uint32 private swapFee;\\n\\n    modifier lock() {\\n        require(unlocked == 1, 'FLP: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    function getTokenWeights() public view returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n        _tokenWeight0 = tokenWeight0;\\n        _tokenWeight1 = 100 - tokenWeight0;\\n    }\\n\\n    function getSwapFee() public view returns (uint32 _swapFee) {\\n        _swapFee = swapFee;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'FLP: TRANSFER_FAILED');\\n    }\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1, uint32 _tokenWeight0, uint32 _swapFee) external {\\n        require(msg.sender == factory, 'FLP: FORBIDDEN');\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        tokenWeight0 = _tokenWeight0;\\n        swapFee = _swapFee;\\n        formula = IFireBirdFactory(factory).formula();\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        uint32 _tokenWeight0 = tokenWeight0;\\n        require(balance0 * (100 - _tokenWeight0) <= uint112(- 1) && balance1 * _tokenWeight0 <= uint112(- 1), 'FLP: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n            uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n            price0CumulativeLast += uint(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IFireBirdFactory(factory).feeTo();\\n        uint112 protocolFee = uint112(IFireBirdFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint32 _tokenWeight0 = tokenWeight0;\\n            uint liquidity = IFireBirdFormula(formula).mintLiquidityFee(\\n                totalSupply, _reserve0, _reserve1,\\n                _tokenWeight0, 100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee, _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'FLP: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply;// using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply;// using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'FLP: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'FLP: INSUFFICIENT_OUTPUT_AMOUNT');\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'FLP: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'FLP: INVALID_TO');\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'FLP: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint balance0Adjusted = balance0.mul(10000);\\n            uint balance1Adjusted = balance1.mul(10000);\\n            { // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0;// gas savings\\n                if (_tokenWeight0 == 50) { // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'FLP: K');\\n                } else {\\n                    require(IFireBirdFormula(formula).ensureConstantValue(uint(_reserve0).mul(10000), uint(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), 'FLP: K');\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0x36a990d02d8ed629aaa07b94421b404da55d825208ae4c51118991c75bc5a385\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdc30fa248655dc9936342ff8f8d2c4669143123013acdea9fa04b234540a0763\"},\"contracts/interfaces/IFireBirdERC20.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IFireBirdERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xf12bb0e9935d0f244c40d897e49d135e9270c5915862d000e9e0a544141e5cfb\"},\"contracts/interfaces/IFireBirdFactory.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IFireBirdFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0xf877564655d8d582ea8cb43c2f1adbfa99175b60a0198ded0faffbe22fcd613f\"},\"contracts/interfaces/IFireBirdFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IFireBirdFormula {\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA, uint8 dexId) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n    function getFactoryWeightsAndSwapFee(address factory, address pair, uint8 dexId) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path,\\n        uint8[] calldata dexIds\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path,\\n        uint8[] calldata dexIds\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\",\"keccak256\":\"0xeca7109deec9efc29209e4d87c294e94be446077224dd6e905fe0fdf76cf78ff\"},\"contracts/interfaces/IFireBirdPair.sol\":{\"content\":\"pragma solidity >=0.5.16;\\ninterface IFireBirdPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n    function getSwapFee() external view returns (uint32);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address, uint32, uint32) external;\\n}\\n\",\"keccak256\":\"0x770c213bb2620ee99eb32eb1140304457ca65653f5c4ce3b90d203a22f661015\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xec374f9a56106d72c4dd1513806e468c3023c47b63503592d296b84bc73361f0\"},\"contracts/libraries/Math.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9057591ba330f33e8af1ec9e618c30f6819c99f0660fdb2373b7c104c182315b\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    function div(uint a, uint b) internal pure returns (uint c) {\\n        require(b > 0, 'ds-math-division-by-zero');\\n        c = a / b;\\n    }\\n}\\n\",\"keccak256\":\"0x5b9da9eeab62132e6a4355aa12528d51133fcc542210ff3c08a0aff4999b36fc\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xcb95f28dce1327158af80a3ffcfacaa608617afbffd4c7991f236117124698bf\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161441d38038061441d8339818101604052604081101561003357600080fd5b508051602090910151600380546001600160a01b039384166001600160a01b031991821617909155600180549390921692169190911790556143a38061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d14610207578063ca22297914610258578063e5e31b13146102b3578063f46901ed146102fa576100df565b8063787dce3d146101ad578063a2e74af6146101cc578063b0e21e8a146101ff576100df565b80631e3dd18b116100bd5780631e3dd18b1461016e5780634b75f54f1461018b578063574f2ba314610193576100df565b8063017e7e58146100e4578063094b74151461011557806314572adb1461011d575b600080fd5b6100ec61032d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100ec610349565b6100ec6004803603608081101561013357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516610365565b6100ec6004803603602081101561018457600080fd5b5035610a1f565b6100ec610a53565b61019b610a6f565b60408051918252519081900360200190f35b6101ca600480360360208110156101c357600080fd5b5035610a75565b005b6101ca600480360360208110156101e257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b88565b61019b610c55565b6100ec6004803603608081101561021d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516610c5b565b61028b6004803603602081101561026e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d67565b6040805163ffffffff9485168152928416602084015292168183015290519081900360600190f35b6102e6600480360360208110156102c957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610dda565b604080519115158252519081900360200190f35b6101ca6004803603602081101561031057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e0e565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561040257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f464c503a204944454e544943414c5f4144445245535345530000000000000000604482015290519081900360640190fd5b60028363ffffffff1610158015610420575060628363ffffffff1611155b801561042d575060018316155b61049857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f464c503a20494e56414c49445f544f4b454e5f57454947485400000000000000604482015290519081900360640190fd5b60018263ffffffff16101580156104b757506107d08263ffffffff1611155b61052257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f464c503a20494e56414c49445f535741505f4645450000000000000000000000604482015290519081900360640190fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161061056557868887606403610569565b8787875b9194509250905073ffffffffffffffffffffffffffffffffffffffff83166105f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f464c503a205a45524f5f41444452455353000000000000000000000000000000604482015290519081900360640190fd5b60606040518060200161060490610edb565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408181527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606088811b82166020858101919091529088901b90911660348401527fffffffff0000000000000000000000000000000000000000000000000000000060e087811b821660488601528b901b16604c8401528151603081850301815260509093018252825192810192909220600081815260049093529120549192509073ffffffffffffffffffffffffffffffffffffffff161561075757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f464c503a20504149525f45584953545300000000000000000000000000000000604482015290519081900360640190fd5b808251602084016000f5604080517fd0f6957900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015263ffffffff80881660448401528b16606483015291519298509088169163d0f695799160848082019260009290919082900301818387803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b50505050856004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060058690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008763ffffffff16905060208463ffffffff1667ffffffffffffffff16901b8117905080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc42889878c600580549050604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff16815260200182815260200194505050505060405180910390a3505050505050949350505050565b60058181548110610a2c57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60055490565b60035473ffffffffffffffffffffffffffffffffffffffff163314610afb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b801580610b1857506127108110158015610b185750620186a08111155b610b8357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f464c503a20496e76616c69642050726f746f636f6c2066656500000000000000604482015290519081900360640190fd5b600255565b60035473ffffffffffffffffffffffffffffffffffffffff163314610c0e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025481565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610610c9f57868887606403610ca3565b8787875b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b81166020808401919091529490951b90941660348501527fffffffff0000000000000000000000000000000000000000000000000000000060e092831b811660488601529890911b909716604c830152865160308184030181526050909201875281519181019190912060009081526004909152949094205473ffffffffffffffffffffffffffffffffffffffff16979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120548190819067ffffffffffffffff168015610dc05780915060208167ffffffffffffffff16901c9350836064039250610dd1565b5060329250829150601e9050610dd3565b505b9193909250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205467ffffffffffffffff16151590565b60035473ffffffffffffffffffffffffffffffffffffffff163314610e9457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61348680610ee98339019056fe60806040526001600b5534801561001557600080fd5b5060405146908060526134348239604080519182900360520182208282018252601b83527f4669726542697264204c69717569646974792050726f766964657200000000006020938401528151808301835260018152603160f81b908401528151808401919091527fac35389a04d55c5c9df86be7d941289f55fc537c7493deefe4c0fe8bedcd61c7818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905561331c806101186000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063c45a0155116100a2578063d505accf11610071578063d505accf14610665578063d54a8d18146106c3578063dd62ed3e146106f8578063fff6cae914610733576101da565b8063c45a0155146105e3578063d0f69579146105eb578063d21220a71461063c578063d4cadf6814610644576101da565b806395d89b41116100de57806395d89b4114610567578063a9059cbb1461056f578063ba9a7a56146105a8578063bc25cf77146105b0576101da565b806370a08231146104b55780637ecebe00146104e857806389afcb441461051b576101da565b806330adf81f1161017c5780634b75f54f1161014b5780634b75f54f1461046a5780635909c0d5146104725780635a3d54931461047a5780636a62784214610482576101da565b806330adf81f14610411578063313ce5671461041957806332bfe469146104375780633644e51514610462576101da565b8063095ea7b3116101b8578063095ea7b3146103365780630dfe16811461038357806318160ddd146103b457806323b872dd146103ce576101da565b8063022c0d9f146101df57806306fdde031461027a5780630902f1ac146102f7575b600080fd5b610278600480360360808110156101f557600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561023957600080fd5b82018360208201111561024b57600080fd5b8035906020019184600183028401116401000000008311171561026d57600080fd5b50909250905061073b565b005b6102826110fe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102bc5781810151838201526020016102a4565b50505050905090810190601f1680156102e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ff611137565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b61036f6004803603604081101561034c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561118c565b604080519115158252519081900360200190f35b61038b6111a3565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103bc6111bf565b60408051918252519081900360200190f35b61036f600480360360608110156103e457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356111c5565b6103bc6112a4565b6104216112c8565b6040805160ff9092168252519081900360200190f35b61043f6112cd565b6040805163ffffffff938416815291909216602082015281519081900390910190f35b6103bc6112ff565b61038b611305565b6103bc611321565b6103bc611327565b6103bc6004803603602081101561049857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661132d565b6103bc600480360360208110156104cb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166116ac565b6103bc600480360360208110156104fe57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166116be565b61054e6004803603602081101561053157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166116d0565b6040805192835260208301919091528051918290030190f35b610282611b28565b61036f6004803603604081101561058557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611b61565b6103bc611b6e565b610278600480360360208110156105c657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b74565b61038b611d6a565b6102786004803603608081101561060157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516611d86565b61038b611fae565b61064c611fca565b6040805163ffffffff9092168252519081900360200190f35b610278600480360360e081101561067b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611fd6565b6106cb6122a2565b604080516dffffffffffffffffffffffffffff938416815291909216602082015281519081900390910190f35b6103bc6004803603604081101561070e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166122cf565b6102786122ec565b600b546001146107ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b55841515806107bf5750600084115b61082a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f464c503a20494e53554646494349454e545f4f55545055545f414d4f554e5400604482015290519081900360640190fd5b6008546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041681871080156108715750806dffffffffffffffffffffffffffff1686105b6108dc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f464c503a20494e53554646494349454e545f4c49515549444954590000000000604482015290519081900360640190fd5b600654600754600091829173ffffffffffffffffffffffffffffffffffffffff91821691908116908916821480159061094157508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b6109ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f464c503a20494e56414c49445f544f0000000000000000000000000000000000604482015290519081900360640190fd5b8a156109bd576109bd828a8d6124d2565b89156109ce576109ce818a8c6124d2565b8615610ab0578873ffffffffffffffffffffffffffffffffffffffff166310d1e85c338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506040513d6020811015610b4657600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d6020811015610be257600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610c0c576000610c22565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610c46576000610c5c565b89856dffffffffffffffffffffffffffff160383035b90506000821180610c6d5750600081115b610cd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f464c503a20494e53554646494349454e545f494e5055545f414d4f554e540000604482015290519081900360640190fd5b6000610cec8561271063ffffffff6126df16565b90506000610d028561271063ffffffff6126df16565b90508315610d9e57600e54600090610d2590869063ffffffff908116906126df16565b9050610d37838263ffffffff61276516565b600d54909350610d5d906dffffffffffffffffffffffffffff168263ffffffff6127d716565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b8215610e3957600e54600090610dbf90859063ffffffff908116906126df16565b9050610dd1828263ffffffff61276516565b600d54909250610e03906e01000000000000000000000000000090046dffffffffffffffffffffffffffff16826127d7565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d547c0100000000000000000000000000000000000000000000000000000000900463ffffffff166032811415610f2457610ea26305f5e100610e966dffffffffffffffffffffffffffff8c8116908c1663ffffffff6126df16565b9063ffffffff6126df16565b610eb2848463ffffffff6126df16565b1015610f1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f464c503a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61107c565b600c5473ffffffffffffffffffffffffffffffffffffffff166379c91b37610f646dffffffffffffffffffffffffffff8c1661271063ffffffff6126df16565b610f866dffffffffffffffffffffffffffff8c1661271063ffffffff6126df16565b8686866040518663ffffffff1660e01b8152600401808681526020018581526020018481526020018381526020018263ffffffff1663ffffffff1681526020019550505050505060206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d602081101561100f57600080fd5b505161107c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f464c503a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50505061108b84848888612849565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600b55505050505050505050565b6040518060400160405280601b81526020017f4669726542697264204c69717569646974792050726f7669646572000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000611199338484612b55565b5060015b92915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461128f5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915290205461125d908363ffffffff61276516565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b61129a848484612bc4565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600d547c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690606482900390565b60035481565b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600a5481565b6000600b546001146113a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b819055806113b0611137565b50600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561142a57600080fd5b505afa15801561143e573d6000803e3d6000fd5b505050506040513d602081101561145457600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b1580156114cd57600080fd5b505afa1580156114e1573d6000803e3d6000fd5b505050506040513d60208110156114f757600080fd5b50519050600061151d836dffffffffffffffffffffffffffff871663ffffffff61276516565b90506000611541836dffffffffffffffffffffffffffff871663ffffffff61276516565b905061154d8686612ca5565b5060005480611594576115806103e861157461156f868663ffffffff6126df16565b61305f565b9063ffffffff61276516565b975061158f60006103e86130b1565b6115f1565b6115ee6dffffffffffffffffffffffffffff88166115b8858463ffffffff6126df16565b816115bf57fe5b046dffffffffffffffffffffffffffff88166115e1858563ffffffff6126df16565b816115e857fe5b04613161565b97505b6000881161164a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806132c66022913960400191505060405180910390fd5b61165489896130b1565b61166085858989612849565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600b55509395945050505050565b60016020526000908152604090205481565b60046020526000908152604090205481565b600080600b5460011461174457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b81905580611754611137565b50600654600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b1580156117d657600080fd5b505afa1580156117ea573d6000803e3d6000fd5b505050506040513d602081101561180057600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b15801561187457600080fd5b505afa158015611888573d6000803e3d6000fd5b505050506040513d602081101561189e57600080fd5b5051306000908152600160205260409020549091506118bd8787612ca5565b50600054806118d2838663ffffffff6126df16565b816118d957fe5b049950806118ed838563ffffffff6126df16565b816118f457fe5b04985060008a1180156119075750600089115b61195c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806132a46022913960400191505060405180910390fd5b6119663083613179565b611971868c8c6124d2565b61197c858c8b6124d2565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8816916370a08231916024808301926020929190829003018186803b1580156119e857600080fd5b505afa1580156119fc573d6000803e3d6000fd5b505050506040513d6020811015611a1257600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8716916370a0823191602480820192602092909190829003018186803b158015611a8457600080fd5b505afa158015611a98573d6000803e3d6000fd5b505050506040513d6020811015611aae57600080fd5b50519250611abe84848a8a612849565b604080518b8152602081018b9052815173ffffffffffffffffffffffffffffffffffffffff8e169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050506001600b81905550915091565b6040518060400160405280600381526020017f464c50000000000000000000000000000000000000000000000000000000000081525081565b6000611199338484612bc4565b6103e881565b600b54600114611be557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b55600654600754600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9485169490931692611cc19285928792611cbc926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b158015611c8457600080fd5b505afa158015611c98573d6000803e3d6000fd5b505050506040513d6020811015611cae57600080fd5b50519063ffffffff61276516565b6124d2565b600854604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611d609284928792611cbc926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b158015611c8457600080fd5b50506001600b5550565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff163314611e0c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600780548684169216919091179055600d805463ffffffff8086167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90921691909117909155600e80549184167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909216919091179055600554604080517f4b75f54f00000000000000000000000000000000000000000000000000000000815290519190921691634b75f54f916004808301926020929190829003018186803b158015611f3857600080fd5b505afa158015611f4c573d6000803e3d6000fd5b505050506040513d6020811015611f6257600080fd5b5051600c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905550505050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b600e5463ffffffff1690565b4284101561204557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f464c503a20455850495245440000000000000000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa1580156121a6573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061222157508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61228c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f464c503a20494e56414c49445f5349474e415455524500000000000000000000604482015290519081900360640190fd5b612297898989612b55565b505050505050505050565b600d546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b600260209081526000928352604080842090915290825290205481565b600b5460011461235d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b55600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516124cb9273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b1580156123d457600080fd5b505afa1580156123e8573d6000803e3d6000fd5b505050506040513d60208110156123fe57600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561247157600080fd5b505afa158015612485573d6000803e3d6000fd5b505050506040513d602081101561249b57600080fd5b50516008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612849565b6001600b55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106125d857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161259b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461263a576040519150601f19603f3d011682016040523d82523d6000602084013e61263f565b606091505b509150915081801561266d57508051158061266d575080806020019051602081101561266a57600080fd5b50515b6126d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f464c503a205452414e534645525f4641494c4544000000000000000000000000604482015290519081900360640190fd5b5050505050565b60008115806126fa575050808202828282816126f757fe5b04145b61119d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b8082038281111561119d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b8082018281101561119d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b600d5463ffffffff7c01000000000000000000000000000000000000000000000000000000009091048116906dffffffffffffffffffffffffffff60648390039091168602118015906128b257506dffffffffffffffffffffffffffff63ffffffff8216850211155b61291d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f464c503a204f564552464c4f5700000000000000000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c01000000000000000000000000000000000000000000000000000000009004811682039081161580159061296d57506dffffffffffffffffffffffffffff851615155b801561298857506dffffffffffffffffffffffffffff841615155b15612a4a5763ffffffff6064849003811686029080851686029083166129db836129b18461323e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff61326216565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8316612a1b826129b18561323e565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905550505b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff898116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008983168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a150505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054612bfa908263ffffffff61276516565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054612c3c908263ffffffff6127d716565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612d1057600080fd5b505afa158015612d24573d6000803e3d6000fd5b505050506040513d6020811015612d3a57600080fd5b5051600554604080517fb0e21e8a000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163b0e21e8a91600480820192602092909190829003018186803b158015612dad57600080fd5b505afa158015612dc1573d6000803e3d6000fd5b505050506040513d6020811015612dd757600080fd5b505173ffffffffffffffffffffffffffffffffffffffff8316151593509050600080612e016122a2565b915091506000836dffffffffffffffffffffffffffff16118015612e225750845b8015612e5857506000826dffffffffffffffffffffffffffff161180612e5857506000816dffffffffffffffffffffffffffff16115b15612fd757600d54600c54600080547c010000000000000000000000000000000000000000000000000000000090930463ffffffff1692909173ffffffffffffffffffffffffffffffffffffffff16906392aec23c908b8b8660648190036dffffffffffffffffffffffffffff8c8116908c1681612ed257fe5b048c6dffffffffffffffffffffffffffff168b6dffffffffffffffffffffffffffff1681612efc57fe5b6040805160e08b901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101999099526dffffffffffffffffffffffffffff97881660248a0152958716604489015263ffffffff9485166064890152929093166084870152841660a48601520490911660c48301525160e4808301926020929190829003018186803b158015612f9657600080fd5b505afa158015612faa573d6000803e3d6000fd5b505050506040513d6020811015612fc057600080fd5b505190508015612fd457612fd486826130b1565b50505b6dffffffffffffffffffffffffffff82161561301657600d80547fffffffffffffffffffffffffffffffffffff00000000000000000000000000001690555b6dffffffffffffffffffffffffffff81161561305557600d80547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff1690555b5050505092915050565b600060038211156130a2575080600160028204015b8181101561309c5780915060028182858161308b57fe5b04018161309457fe5b049050613074565b506130ac565b81156130ac575060015b919050565b6000546130c4908263ffffffff6127d716565b600090815573ffffffffffffffffffffffffffffffffffffffff83168152600160205260409020546130fc908263ffffffff6127d716565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106131705781613172565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546131af908263ffffffff61276516565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040812091909155546131e9908263ffffffff61276516565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff84168161329b57fe5b04939250505056fe464c503a20494e53554646494349454e545f4c49515549444954595f4255524e4544464c503a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a72315820bd8409660fada8ed13ce8e51189a04ac4042d9ccfa09e0d33044c91d787ed3b264736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a72315820dd22e0f67c58e49f16ca91d3a802471e18d1b4610425a5caa5fd9621432314bc64736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d14610207578063ca22297914610258578063e5e31b13146102b3578063f46901ed146102fa576100df565b8063787dce3d146101ad578063a2e74af6146101cc578063b0e21e8a146101ff576100df565b80631e3dd18b116100bd5780631e3dd18b1461016e5780634b75f54f1461018b578063574f2ba314610193576100df565b8063017e7e58146100e4578063094b74151461011557806314572adb1461011d575b600080fd5b6100ec61032d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100ec610349565b6100ec6004803603608081101561013357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516610365565b6100ec6004803603602081101561018457600080fd5b5035610a1f565b6100ec610a53565b61019b610a6f565b60408051918252519081900360200190f35b6101ca600480360360208110156101c357600080fd5b5035610a75565b005b6101ca600480360360208110156101e257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b88565b61019b610c55565b6100ec6004803603608081101561021d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516610c5b565b61028b6004803603602081101561026e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d67565b6040805163ffffffff9485168152928416602084015292168183015290519081900360600190f35b6102e6600480360360208110156102c957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610dda565b604080519115158252519081900360200190f35b6101ca6004803603602081101561031057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e0e565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561040257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f464c503a204944454e544943414c5f4144445245535345530000000000000000604482015290519081900360640190fd5b60028363ffffffff1610158015610420575060628363ffffffff1611155b801561042d575060018316155b61049857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f464c503a20494e56414c49445f544f4b454e5f57454947485400000000000000604482015290519081900360640190fd5b60018263ffffffff16101580156104b757506107d08263ffffffff1611155b61052257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f464c503a20494e56414c49445f535741505f4645450000000000000000000000604482015290519081900360640190fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161061056557868887606403610569565b8787875b9194509250905073ffffffffffffffffffffffffffffffffffffffff83166105f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f464c503a205a45524f5f41444452455353000000000000000000000000000000604482015290519081900360640190fd5b60606040518060200161060490610edb565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408181527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606088811b82166020858101919091529088901b90911660348401527fffffffff0000000000000000000000000000000000000000000000000000000060e087811b821660488601528b901b16604c8401528151603081850301815260509093018252825192810192909220600081815260049093529120549192509073ffffffffffffffffffffffffffffffffffffffff161561075757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f464c503a20504149525f45584953545300000000000000000000000000000000604482015290519081900360640190fd5b808251602084016000f5604080517fd0f6957900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015263ffffffff80881660448401528b16606483015291519298509088169163d0f695799160848082019260009290919082900301818387803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b50505050856004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060058690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008763ffffffff16905060208463ffffffff1667ffffffffffffffff16901b8117905080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc42889878c600580549050604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff16815260200182815260200194505050505060405180910390a3505050505050949350505050565b60058181548110610a2c57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60055490565b60035473ffffffffffffffffffffffffffffffffffffffff163314610afb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b801580610b1857506127108110158015610b185750620186a08111155b610b8357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f464c503a20496e76616c69642050726f746f636f6c2066656500000000000000604482015290519081900360640190fd5b600255565b60035473ffffffffffffffffffffffffffffffffffffffff163314610c0e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025481565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610610c9f57868887606403610ca3565b8787875b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b81166020808401919091529490951b90941660348501527fffffffff0000000000000000000000000000000000000000000000000000000060e092831b811660488601529890911b909716604c830152865160308184030181526050909201875281519181019190912060009081526004909152949094205473ffffffffffffffffffffffffffffffffffffffff16979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120548190819067ffffffffffffffff168015610dc05780915060208167ffffffffffffffff16901c9350836064039250610dd1565b5060329250829150601e9050610dd3565b505b9193909250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205467ffffffffffffffff16151590565b60035473ffffffffffffffffffffffffffffffffffffffff163314610e9457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61348680610ee98339019056fe60806040526001600b5534801561001557600080fd5b5060405146908060526134348239604080519182900360520182208282018252601b83527f4669726542697264204c69717569646974792050726f766964657200000000006020938401528151808301835260018152603160f81b908401528151808401919091527fac35389a04d55c5c9df86be7d941289f55fc537c7493deefe4c0fe8bedcd61c7818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905561331c806101186000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063c45a0155116100a2578063d505accf11610071578063d505accf14610665578063d54a8d18146106c3578063dd62ed3e146106f8578063fff6cae914610733576101da565b8063c45a0155146105e3578063d0f69579146105eb578063d21220a71461063c578063d4cadf6814610644576101da565b806395d89b41116100de57806395d89b4114610567578063a9059cbb1461056f578063ba9a7a56146105a8578063bc25cf77146105b0576101da565b806370a08231146104b55780637ecebe00146104e857806389afcb441461051b576101da565b806330adf81f1161017c5780634b75f54f1161014b5780634b75f54f1461046a5780635909c0d5146104725780635a3d54931461047a5780636a62784214610482576101da565b806330adf81f14610411578063313ce5671461041957806332bfe469146104375780633644e51514610462576101da565b8063095ea7b3116101b8578063095ea7b3146103365780630dfe16811461038357806318160ddd146103b457806323b872dd146103ce576101da565b8063022c0d9f146101df57806306fdde031461027a5780630902f1ac146102f7575b600080fd5b610278600480360360808110156101f557600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561023957600080fd5b82018360208201111561024b57600080fd5b8035906020019184600183028401116401000000008311171561026d57600080fd5b50909250905061073b565b005b6102826110fe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102bc5781810151838201526020016102a4565b50505050905090810190601f1680156102e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ff611137565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b61036f6004803603604081101561034c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561118c565b604080519115158252519081900360200190f35b61038b6111a3565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103bc6111bf565b60408051918252519081900360200190f35b61036f600480360360608110156103e457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356111c5565b6103bc6112a4565b6104216112c8565b6040805160ff9092168252519081900360200190f35b61043f6112cd565b6040805163ffffffff938416815291909216602082015281519081900390910190f35b6103bc6112ff565b61038b611305565b6103bc611321565b6103bc611327565b6103bc6004803603602081101561049857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661132d565b6103bc600480360360208110156104cb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166116ac565b6103bc600480360360208110156104fe57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166116be565b61054e6004803603602081101561053157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166116d0565b6040805192835260208301919091528051918290030190f35b610282611b28565b61036f6004803603604081101561058557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611b61565b6103bc611b6e565b610278600480360360208110156105c657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b74565b61038b611d6a565b6102786004803603608081101561060157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516611d86565b61038b611fae565b61064c611fca565b6040805163ffffffff9092168252519081900360200190f35b610278600480360360e081101561067b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611fd6565b6106cb6122a2565b604080516dffffffffffffffffffffffffffff938416815291909216602082015281519081900390910190f35b6103bc6004803603604081101561070e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166122cf565b6102786122ec565b600b546001146107ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b55841515806107bf5750600084115b61082a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f464c503a20494e53554646494349454e545f4f55545055545f414d4f554e5400604482015290519081900360640190fd5b6008546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041681871080156108715750806dffffffffffffffffffffffffffff1686105b6108dc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f464c503a20494e53554646494349454e545f4c49515549444954590000000000604482015290519081900360640190fd5b600654600754600091829173ffffffffffffffffffffffffffffffffffffffff91821691908116908916821480159061094157508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b6109ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f464c503a20494e56414c49445f544f0000000000000000000000000000000000604482015290519081900360640190fd5b8a156109bd576109bd828a8d6124d2565b89156109ce576109ce818a8c6124d2565b8615610ab0578873ffffffffffffffffffffffffffffffffffffffff166310d1e85c338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506040513d6020811015610b4657600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d6020811015610be257600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610c0c576000610c22565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610c46576000610c5c565b89856dffffffffffffffffffffffffffff160383035b90506000821180610c6d5750600081115b610cd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f464c503a20494e53554646494349454e545f494e5055545f414d4f554e540000604482015290519081900360640190fd5b6000610cec8561271063ffffffff6126df16565b90506000610d028561271063ffffffff6126df16565b90508315610d9e57600e54600090610d2590869063ffffffff908116906126df16565b9050610d37838263ffffffff61276516565b600d54909350610d5d906dffffffffffffffffffffffffffff168263ffffffff6127d716565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b8215610e3957600e54600090610dbf90859063ffffffff908116906126df16565b9050610dd1828263ffffffff61276516565b600d54909250610e03906e01000000000000000000000000000090046dffffffffffffffffffffffffffff16826127d7565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d547c0100000000000000000000000000000000000000000000000000000000900463ffffffff166032811415610f2457610ea26305f5e100610e966dffffffffffffffffffffffffffff8c8116908c1663ffffffff6126df16565b9063ffffffff6126df16565b610eb2848463ffffffff6126df16565b1015610f1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f464c503a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61107c565b600c5473ffffffffffffffffffffffffffffffffffffffff166379c91b37610f646dffffffffffffffffffffffffffff8c1661271063ffffffff6126df16565b610f866dffffffffffffffffffffffffffff8c1661271063ffffffff6126df16565b8686866040518663ffffffff1660e01b8152600401808681526020018581526020018481526020018381526020018263ffffffff1663ffffffff1681526020019550505050505060206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d602081101561100f57600080fd5b505161107c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f464c503a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50505061108b84848888612849565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600b55505050505050505050565b6040518060400160405280601b81526020017f4669726542697264204c69717569646974792050726f7669646572000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000611199338484612b55565b5060015b92915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461128f5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915290205461125d908363ffffffff61276516565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b61129a848484612bc4565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600d547c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690606482900390565b60035481565b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600a5481565b6000600b546001146113a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b819055806113b0611137565b50600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561142a57600080fd5b505afa15801561143e573d6000803e3d6000fd5b505050506040513d602081101561145457600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b1580156114cd57600080fd5b505afa1580156114e1573d6000803e3d6000fd5b505050506040513d60208110156114f757600080fd5b50519050600061151d836dffffffffffffffffffffffffffff871663ffffffff61276516565b90506000611541836dffffffffffffffffffffffffffff871663ffffffff61276516565b905061154d8686612ca5565b5060005480611594576115806103e861157461156f868663ffffffff6126df16565b61305f565b9063ffffffff61276516565b975061158f60006103e86130b1565b6115f1565b6115ee6dffffffffffffffffffffffffffff88166115b8858463ffffffff6126df16565b816115bf57fe5b046dffffffffffffffffffffffffffff88166115e1858563ffffffff6126df16565b816115e857fe5b04613161565b97505b6000881161164a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806132c66022913960400191505060405180910390fd5b61165489896130b1565b61166085858989612849565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600b55509395945050505050565b60016020526000908152604090205481565b60046020526000908152604090205481565b600080600b5460011461174457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b81905580611754611137565b50600654600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b1580156117d657600080fd5b505afa1580156117ea573d6000803e3d6000fd5b505050506040513d602081101561180057600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b15801561187457600080fd5b505afa158015611888573d6000803e3d6000fd5b505050506040513d602081101561189e57600080fd5b5051306000908152600160205260409020549091506118bd8787612ca5565b50600054806118d2838663ffffffff6126df16565b816118d957fe5b049950806118ed838563ffffffff6126df16565b816118f457fe5b04985060008a1180156119075750600089115b61195c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806132a46022913960400191505060405180910390fd5b6119663083613179565b611971868c8c6124d2565b61197c858c8b6124d2565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8816916370a08231916024808301926020929190829003018186803b1580156119e857600080fd5b505afa1580156119fc573d6000803e3d6000fd5b505050506040513d6020811015611a1257600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8716916370a0823191602480820192602092909190829003018186803b158015611a8457600080fd5b505afa158015611a98573d6000803e3d6000fd5b505050506040513d6020811015611aae57600080fd5b50519250611abe84848a8a612849565b604080518b8152602081018b9052815173ffffffffffffffffffffffffffffffffffffffff8e169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050506001600b81905550915091565b6040518060400160405280600381526020017f464c50000000000000000000000000000000000000000000000000000000000081525081565b6000611199338484612bc4565b6103e881565b600b54600114611be557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b55600654600754600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9485169490931692611cc19285928792611cbc926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b158015611c8457600080fd5b505afa158015611c98573d6000803e3d6000fd5b505050506040513d6020811015611cae57600080fd5b50519063ffffffff61276516565b6124d2565b600854604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611d609284928792611cbc926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b158015611c8457600080fd5b50506001600b5550565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff163314611e0c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600780548684169216919091179055600d805463ffffffff8086167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90921691909117909155600e80549184167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909216919091179055600554604080517f4b75f54f00000000000000000000000000000000000000000000000000000000815290519190921691634b75f54f916004808301926020929190829003018186803b158015611f3857600080fd5b505afa158015611f4c573d6000803e3d6000fd5b505050506040513d6020811015611f6257600080fd5b5051600c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905550505050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b600e5463ffffffff1690565b4284101561204557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f464c503a20455850495245440000000000000000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa1580156121a6573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061222157508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61228c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f464c503a20494e56414c49445f5349474e415455524500000000000000000000604482015290519081900360640190fd5b612297898989612b55565b505050505050505050565b600d546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b600260209081526000928352604080842090915290825290205481565b600b5460011461235d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f464c503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600b55600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516124cb9273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b1580156123d457600080fd5b505afa1580156123e8573d6000803e3d6000fd5b505050506040513d60208110156123fe57600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561247157600080fd5b505afa158015612485573d6000803e3d6000fd5b505050506040513d602081101561249b57600080fd5b50516008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612849565b6001600b55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106125d857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161259b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461263a576040519150601f19603f3d011682016040523d82523d6000602084013e61263f565b606091505b509150915081801561266d57508051158061266d575080806020019051602081101561266a57600080fd5b50515b6126d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f464c503a205452414e534645525f4641494c4544000000000000000000000000604482015290519081900360640190fd5b5050505050565b60008115806126fa575050808202828282816126f757fe5b04145b61119d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b8082038281111561119d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b8082018281101561119d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b600d5463ffffffff7c01000000000000000000000000000000000000000000000000000000009091048116906dffffffffffffffffffffffffffff60648390039091168602118015906128b257506dffffffffffffffffffffffffffff63ffffffff8216850211155b61291d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f464c503a204f564552464c4f5700000000000000000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c01000000000000000000000000000000000000000000000000000000009004811682039081161580159061296d57506dffffffffffffffffffffffffffff851615155b801561298857506dffffffffffffffffffffffffffff841615155b15612a4a5763ffffffff6064849003811686029080851686029083166129db836129b18461323e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff61326216565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8316612a1b826129b18561323e565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905550505b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff898116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008983168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a150505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054612bfa908263ffffffff61276516565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054612c3c908263ffffffff6127d716565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612d1057600080fd5b505afa158015612d24573d6000803e3d6000fd5b505050506040513d6020811015612d3a57600080fd5b5051600554604080517fb0e21e8a000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163b0e21e8a91600480820192602092909190829003018186803b158015612dad57600080fd5b505afa158015612dc1573d6000803e3d6000fd5b505050506040513d6020811015612dd757600080fd5b505173ffffffffffffffffffffffffffffffffffffffff8316151593509050600080612e016122a2565b915091506000836dffffffffffffffffffffffffffff16118015612e225750845b8015612e5857506000826dffffffffffffffffffffffffffff161180612e5857506000816dffffffffffffffffffffffffffff16115b15612fd757600d54600c54600080547c010000000000000000000000000000000000000000000000000000000090930463ffffffff1692909173ffffffffffffffffffffffffffffffffffffffff16906392aec23c908b8b8660648190036dffffffffffffffffffffffffffff8c8116908c1681612ed257fe5b048c6dffffffffffffffffffffffffffff168b6dffffffffffffffffffffffffffff1681612efc57fe5b6040805160e08b901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101999099526dffffffffffffffffffffffffffff97881660248a0152958716604489015263ffffffff9485166064890152929093166084870152841660a48601520490911660c48301525160e4808301926020929190829003018186803b158015612f9657600080fd5b505afa158015612faa573d6000803e3d6000fd5b505050506040513d6020811015612fc057600080fd5b505190508015612fd457612fd486826130b1565b50505b6dffffffffffffffffffffffffffff82161561301657600d80547fffffffffffffffffffffffffffffffffffff00000000000000000000000000001690555b6dffffffffffffffffffffffffffff81161561305557600d80547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff1690555b5050505092915050565b600060038211156130a2575080600160028204015b8181101561309c5780915060028182858161308b57fe5b04018161309457fe5b049050613074565b506130ac565b81156130ac575060015b919050565b6000546130c4908263ffffffff6127d716565b600090815573ffffffffffffffffffffffffffffffffffffffff83168152600160205260409020546130fc908263ffffffff6127d716565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106131705781613172565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546131af908263ffffffff61276516565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040812091909155546131e9908263ffffffff61276516565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff84168161329b57fe5b04939250505056fe464c503a20494e53554646494349454e545f4c49515549444954595f4255524e4544464c503a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a72315820bd8409660fada8ed13ce8e51189a04ac4042d9ccfa09e0d33044c91d787ed3b264736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a72315820dd22e0f67c58e49f16ca91d3a802471e18d1b4610425a5caa5fd9621432314bc64736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 376,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 378,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 380,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 382,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 386,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 389,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 393,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "_pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}