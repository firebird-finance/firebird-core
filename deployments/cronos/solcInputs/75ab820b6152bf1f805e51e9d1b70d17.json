{
  "language": "Solidity",
  "sources": {
    "contracts/FireBirdRouter.sol": {
      "content": "pragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport './interfaces/IFireBirdFactory.sol';\nimport './interfaces/IFireBirdFormula.sol';\nimport './interfaces/IFireBirdPair.sol';\nimport './libraries/TransferHelper.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IFireBirdRouter.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IWETH.sol';\nimport \"./interfaces/IAggregationExecutor.sol\";\nimport \"./interfaces/ISwapFeeReward.sol\";\nimport \"./libraries/Permitable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract FireBirdRouter is IFireBirdRouter, Ownable, Permitable {\n    using SafeMath for uint;\n    address public immutable override factory;\n    address public immutable override formula;\n    address public immutable override WETH;\n    address public override swapFeeReward;\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    uint256 private constant _PARTIAL_FILL = 0x01;\n    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;\n    uint256 private constant _SHOULD_CLAIM = 0x04;\n    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;\n    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;\n\n    struct SwapDescription {\n        IERC20 srcToken;\n        IERC20 dstToken;\n        address srcReceiver;\n        address dstReceiver;\n        uint256 amount;\n        uint256 minReturnAmount;\n        uint256 flags;\n        bytes permit;\n    }\n\n    event Swapped(\n        address sender,\n        IERC20 srcToken,\n        IERC20 dstToken,\n        address dstReceiver,\n        uint256 spentAmount,\n        uint256 returnAmount\n    );\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, 'Router: EXPIRED');\n        _;\n    }\n    constructor(address _factory, address _formula, address _WETH) public {\n        factory = _factory;\n        formula = _formula;\n        WETH = _WETH;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH);\n        // only accept ETH via fallback from the WETH contract\n    }\n\n    function setSwapFeeReward(address _swapFeeReward) public onlyOwner {\n        swapFeeReward = _swapFeeReward;\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address pair,\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) internal virtual returns (uint amountA, uint amountB) {\n        (uint reserveA, uint reserveB) = IFireBirdFormula(formula).getReserves(pair, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint amountBOptimal = IFireBirdFormula(formula).quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, 'Router: INSUFFICIENT_B_AMOUNT');\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = IFireBirdFormula(formula).quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, 'Router: INSUFFICIENT_A_AMOUNT');\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function _addLiquidityToken(\n        address pair,\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) internal returns (uint amountA, uint amountB) {\n        (amountA, amountB) = _addLiquidity(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n    }\n    function createPair( address tokenA, address tokenB,uint amountA,uint amountB, uint32 tokenWeightA, uint32 swapFee, address to) public virtual override returns (uint liquidity) {\n        address pair = IFireBirdFactory(factory).createPair(tokenA, tokenB, tokenWeightA, swapFee);\n        _addLiquidityToken(pair, tokenA, tokenB, amountA, amountB, 0, 0);\n        liquidity = IFireBirdPair(pair).mint(to);\n    }\n    function addLiquidity(\n        address pair,\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n        (amountA,  amountB) = _addLiquidityToken(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        liquidity = IFireBirdPair(pair).mint(to);\n    }\n\n    function _addLiquidityETH(\n        address pair,\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to\n    ) internal returns (uint amountToken, uint amountETH, uint liquidity) {\n        (amountToken, amountETH) = _addLiquidity(\n            pair,\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        transferETHTo(amountETH, pair);\n        liquidity = IFireBirdPair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n    function createPairETH( address token, uint amountToken, uint32 tokenWeight, uint32 swapFee, address to) public virtual override payable returns (uint liquidity) {\n        address pair = IFireBirdFactory(factory).createPair(token, WETH, tokenWeight, swapFee);\n        (,,liquidity) = _addLiquidityETH(pair, token, amountToken, 0, 0, to);\n    }\n    function addLiquidityETH(\n        address pair,\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n        (amountToken, amountETH, liquidity) = _addLiquidityETH(pair, token, amountTokenDesired, amountTokenMin, amountETHMin, to);\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(address tokenIn, uint[] memory amounts, address[] memory path, address _to) internal virtual {\n        address input = tokenIn;\n        for (uint i = 0; i < path.length; i++) {\n            IFireBirdPair pairV2 = IFireBirdPair(path[i]);\n            address token0 = pairV2.token0();\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out, address output) = input == token0 ? (uint(0), amountOut, pairV2.token1()) : (amountOut, uint(0), token0);\n            if (swapFeeReward != address(0)) {\n                ISwapFeeReward(swapFeeReward).swap(msg.sender, input, output, amountOut, path[i]);\n            }\n            address to = i < path.length - 1 ? path[i + 1] : _to;\n            pairV2.swap(\n                amount0Out, amount1Out, to, new bytes(0)\n            );\n            emit Exchange(address(pairV2), amountOut, output);\n            input = output;\n        }\n    }\n\n    function swapExactTokensForTokens(\n        address tokenIn,\n        address tokenOut,\n        uint amountIn,\n        uint amountOutMin,\n        address[] memory path,\n        uint8[] memory dexIds,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = _validateAmountOut(tokenIn, tokenOut, amountIn, amountOutMin, path, dexIds);\n\n        TransferHelper.safeTransferFrom(\n            tokenIn, msg.sender, path[0], amounts[0]\n        );\n        _swap(tokenIn, amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        address tokenIn,\n        address tokenOut,\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        uint8[] calldata dexIds,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = _validateAmountIn(tokenIn, tokenOut, amountOut, amountInMax, path, dexIds);\n\n        TransferHelper.safeTransferFrom(\n            tokenIn, msg.sender, path[0], amounts[0]\n        );\n        _swap(tokenIn, amounts, path, to);\n    }\n\n    function swapExactETHForTokens(address tokenOut, uint amountOutMin, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        amounts = _validateAmountOut(WETH, tokenOut, msg.value, amountOutMin, path, dexIds);\n\n        transferETHTo(amounts[0], path[0]);\n        _swap(WETH, amounts, path, to);\n    }\n    function swapTokensForExactETH(address tokenIn, uint amountOut, uint amountInMax, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        amounts = _validateAmountIn(tokenIn, WETH, amountOut, amountInMax, path, dexIds);\n\n        TransferHelper.safeTransferFrom(\n            tokenIn, msg.sender, path[0], amounts[0]\n        );\n        _swap(tokenIn, amounts, path, address(this));\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\n    }\n    function swapExactTokensForETH(address tokenIn, uint amountIn, uint amountOutMin, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        amounts = _validateAmountOut(tokenIn, WETH, amountIn, amountOutMin, path, dexIds);\n\n        TransferHelper.safeTransferFrom(\n            tokenIn, msg.sender, path[0], amounts[0]\n        );\n        _swap(tokenIn, amounts, path, address(this));\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\n    }\n    function swapETHForExactTokens(address tokenOut, uint amountOut, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        amounts = _validateAmountIn(WETH, tokenOut, amountOut, msg.value, path, dexIds);\n\n        transferETHTo(amounts[0], path[0]);\n        _swap(WETH, amounts, path, to);\n        // refund dust eth, if any\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n    }\n\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swapSupportingFeeOnTransferTokens(address tokenIn, address[] memory path, uint8[] memory dexIds, address _to) internal virtual {\n        for (uint i; i < path.length; i++) {\n            uint amountOutput;\n            address currentOutput;\n            {\n                (address output, uint reserveInput, uint reserveOutput, uint32 tokenWeightInput,, uint32 swapFee) = IFireBirdFormula(formula).getFactoryReserveAndWeights(factory, path[i], tokenIn, dexIds[i]);\n                uint amountInput = IERC20(tokenIn).balanceOf(path[i]).sub(reserveInput);\n                amountOutput = IFireBirdFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, 100-tokenWeightInput, swapFee);\n                currentOutput = output;\n            }\n\n            IFireBirdPair pair = IFireBirdPair(path[i]);\n            (uint amount0Out, uint amount1Out) = tokenIn == pair.token0() ? (uint(0), amountOutput) : (amountOutput, uint(0));\n            if (swapFeeReward != address(0)) {\n                ISwapFeeReward(swapFeeReward).swap(msg.sender, tokenIn, currentOutput, amountOutput, path[i]);\n            }\n            address to = i < path.length - 1 ? path[i + 1] : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n            emit Exchange(path[i], amountOutput, currentOutput);\n            tokenIn = currentOutput;\n        }\n    }\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        address tokenIn,\n        address tokenOut,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        uint8[] calldata dexIds,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) {\n        TransferHelper.safeTransferFrom(\n            tokenIn, msg.sender, path[0], amountIn\n        );\n        uint balanceBefore = IERC20(tokenOut).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, dexIds, to);\n        require(\n            IERC20(tokenOut).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'Router: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        address tokenOut,\n        uint amountOutMin,\n        address[] calldata path,\n        uint8[] calldata dexIds,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n    {\n//            require(path[0] == WETH, 'Router: INVALID_PATH');\n        uint amountIn = msg.value;\n        transferETHTo(amountIn, path[0]);\n        uint balanceBefore = IERC20(tokenOut).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(WETH, path, dexIds, to);\n        require(\n            IERC20(tokenOut).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'Router: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        address tokenIn,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        uint8[] calldata dexIds,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n    {\n        TransferHelper.safeTransferFrom(\n            tokenIn, msg.sender, path[0], amountIn\n        );\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, dexIds, address(this));\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\n        require(amountOut >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        transferAll(ETH_ADDRESS, to, amountOut);\n    }\n\n    function swap(\n        IAggregationExecutor caller,\n        SwapDescription calldata desc,\n        bytes calldata data\n    )\n        external\n        payable\n        returns (uint256 returnAmount)\n    {\n        require(desc.minReturnAmount > 0, \"Min return should not be 0\");\n        require(data.length > 0, \"data should be not zero\");\n\n        uint256 flags = desc.flags;\n        uint256 amount = desc.amount;\n        IERC20 srcToken = desc.srcToken;\n        IERC20 dstToken = desc.dstToken;\n\n        if (flags & _REQUIRES_EXTRA_ETH != 0) {\n            require(msg.value > (isETH(srcToken) ? amount : 0), \"Invalid msg.value\");\n        } else {\n            require(msg.value == (isETH(srcToken) ? amount : 0), \"Invalid msg.value\");\n        }\n\n        if (flags & _SHOULD_CLAIM != 0) {\n            require(!isETH(srcToken), \"Claim token is ETH\");\n            _permit(srcToken, amount, desc.permit);\n            TransferHelper.safeTransferFrom(address(srcToken), msg.sender, desc.srcReceiver, amount);\n        }\n\n        address dstReceiver = (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;\n        uint256 initialSrcBalance = (flags & _PARTIAL_FILL != 0) ? getBalance(srcToken, msg.sender) : 0;\n        uint256 initialDstBalance = getBalance(dstToken, dstReceiver);\n\n        {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, bytes memory result) = address(caller).call{value: msg.value}(abi.encodeWithSelector(caller.callBytes.selector, data, msg.sender));\n            if (!success) {\n                revert(RevertReasonParser.parse(result, \"callBytes failed: \"));\n            }\n        }\n\n        uint256 spentAmount = amount;\n        returnAmount = getBalance(dstToken, dstReceiver).sub(initialDstBalance);\n\n        if (flags & _PARTIAL_FILL != 0) {\n            spentAmount = initialSrcBalance.add(amount).sub(getBalance(srcToken, msg.sender));\n            require(returnAmount.mul(amount) >= desc.minReturnAmount.mul(spentAmount), \"Return amount is not enough\");\n        } else {\n            require(returnAmount >= desc.minReturnAmount, \"Return amount is not enough\");\n        }\n\n        emit Swapped(\n            msg.sender,\n            srcToken,\n            dstToken,\n            dstReceiver,\n            spentAmount,\n            returnAmount\n        );\n        emit Exchange(address(caller), returnAmount, isETH(dstToken) ? WETH : address(dstToken));\n    }\n\n    function getBalance(IERC20 token, address account) internal view returns (uint) {\n        if (isETH(token)) {\n            return account.balance;\n        } else {\n            return token.balanceOf(account);\n        }\n    }\n\n    function _validateAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint amountIn,\n        uint amountOutMin,\n        address[] memory path,\n        uint8[] memory dexIds\n    ) internal view returns (uint[] memory amounts) {\n        amounts = IFireBirdFormula(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path, dexIds);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\n    }\n\n    function _validateAmountIn(\n        address tokenIn,\n        address tokenOut,\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        uint8[] calldata dexIds\n    ) internal view returns (uint[] memory amounts) {\n        amounts = IFireBirdFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path, dexIds);\n        require(amounts[0] <= amountInMax, 'Router: EXCESSIVE_INPUT_AMOUNT');\n    }\n\n    function transferETHTo(uint amount, address to) internal {\n        IWETH(WETH).deposit{value: amount}();\n        assert(IWETH(WETH).transfer(to, amount));\n    }\n\n    function transferAll(address token, address to, uint amount) internal returns (bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        if (isETH(IERC20(token))) {\n            IWETH(WETH).withdraw(amount);\n            TransferHelper.safeTransferETH(to, amount);\n        } else {\n            TransferHelper.safeTransfer(token, to, amount);\n        }\n        return true;\n    }\n\n    function isETH(IERC20 token) internal pure returns (bool) {\n        return (address(token) == ETH_ADDRESS);\n    }\n// **** REMOVE LIQUIDITY ****\n    function _removeLiquidity(\n        address pair,\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to\n    ) internal  returns (uint amountA, uint amountB) {\n        require(IFireBirdFactory(factory).isPair(pair), \"Router: Invalid pair\");\n        IFireBirdPair(pair).transferFrom(msg.sender, pair, liquidity);\n        // send liquidity to pair\n        (uint amount0, uint amount1) = IFireBirdPair(pair).burn(to);\n        (address token0,) = IFireBirdFormula(formula).sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, 'Router: INSUFFICIENT_A_AMOUNT');\n        require(amountB >= amountBMin, 'Router: INSUFFICIENT_B_AMOUNT');\n    }\n    function removeLiquidity(\n        address pair,\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\n    }\n\n    function removeLiquidityETH(\n        address pair,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\n        (amountToken, amountETH) = _removeLiquidity(\n            pair,\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this)\n        );\n        TransferHelper.safeTransfer(token, to, amountToken);\n        transferAll(ETH_ADDRESS, to, amountETH);\n    }\n\n    function removeLiquidityWithPermit(\n        address pair,\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n        {\n            uint value = approveMax ? uint(- 1) : liquidity;\n            IFireBirdPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        }\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\n    }\n\n    function removeLiquidityETHWithPermit(\n        address pair,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountToken, uint amountETH) {\n        uint value = approveMax ? uint(- 1) : liquidity;\n        IFireBirdPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountToken, amountETH) = removeLiquidityETH(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n    }\n\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address pair,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\n        (, amountETH) = removeLiquidity(\n            pair,\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n        transferAll(ETH_ADDRESS, to, amountETH);\n    }\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address pair,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountETH) {\n        uint value = approveMax ? uint(- 1) : liquidity;\n        IFireBirdPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n            pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline\n        );\n    }\n\n    function rescueFunds(address token, uint256 amount) external onlyOwner {\n        if (isETH(IERC20(token))) {\n            TransferHelper.safeTransferETH(msg.sender, amount);\n        } else {\n            TransferHelper.safeTransfer(token, msg.sender, amount);\n        }\n    }\n}"
    },
    "contracts/interfaces/IFireBirdFactory.sol": {
      "content": "pragma solidity >=0.5.16;\n\ninterface IFireBirdFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\n    function feeTo() external view returns (address);\n    function formula() external view returns (address);\n    function protocolFee() external view returns (uint);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function isPair(address) external view returns (bool);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setProtocolFee(uint) external;\n}\n"
    },
    "contracts/interfaces/IFireBirdFormula.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity >=0.5.16;\n\n/*\n    Bancor Formula interface\n*/\ninterface IFireBirdFormula {\n\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA, uint8 dexId) external view returns (\n        address tokenB,\n        uint reserveA,\n        uint reserveB,\n        uint32 tokenWeightA,\n        uint32 tokenWeightB,\n        uint32 swapFee\n    );\n    function getFactoryWeightsAndSwapFee(address factory, address pair, uint8 dexId) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\n\n    function getAmountIn(\n        uint amountOut,\n        uint reserveIn, uint reserveOut,\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\n        uint32 swapFee\n    ) external view returns (uint amountIn);\n\n    function getAmountOut(\n        uint amountIn,\n        uint reserveIn, uint reserveOut,\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\n        uint32 swapFee\n    ) external view returns (uint amountOut);\n\n    function getFactoryAmountsIn(\n        address factory,\n        address tokenIn,\n        address tokenOut,\n        uint amountOut,\n        address[] calldata path,\n        uint8[] calldata dexIds\n    ) external view returns (uint[] memory amounts);\n\n    function getFactoryAmountsOut(\n        address factory,\n        address tokenIn,\n        address tokenOut,\n        uint amountIn,\n        address[] calldata path,\n        uint8[] calldata dexIds\n    ) external view returns (uint[] memory amounts);\n\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n    function mintLiquidityFee(\n        uint totalLiquidity,\n        uint112 reserve0,\n        uint112  reserve1,\n        uint32 tokenWeight0,\n        uint32 tokenWeight1,\n        uint112  collectedFee0,\n        uint112 collectedFee1) external view returns (uint amount);\n}"
    },
    "contracts/interfaces/IFireBirdPair.sol": {
      "content": "pragma solidity >=0.5.16;\ninterface IFireBirdPair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\n    function getSwapFee() external view returns (uint32);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address, uint32, uint32) external;\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.5.16;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.16;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IFireBirdRouter.sol": {
      "content": "pragma solidity >=0.7.6;\npragma abicoder v2;\n\ninterface IFireBirdRouter {\n    event Exchange(\n        address pair,\n        uint amountOut,\n        address output\n    );\n    function factory() external view returns (address);\n    function formula() external view returns (address);\n\n    function WETH() external view returns (address);\n    function swapFeeReward() external view returns (address);\n\n    function addLiquidity(\n        address pair,\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address pair,\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n\n    function swapExactTokensForTokens(\n        address tokenIn,\n        address tokenOut,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        uint8[] calldata dexIds,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        address tokenIn,\n        address tokenOut,\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        uint8[] calldata dexIds,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(address tokenOut, uint amountOutMin, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function swapTokensForExactETH(address tokenIn, uint amountOut, uint amountInMax, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(address tokenIn, uint amountIn, uint amountOutMin, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(address tokenOut, uint amountOut, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        address tokenIn,\n        address tokenOut,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        uint8[] calldata dexIds,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        address tokenOut,\n        uint amountOutMin,\n        address[] calldata path,\n        uint8[] calldata dexIds,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        address tokenIn,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        uint8[] calldata dexIds,\n        address to,\n        uint deadline\n    ) external;\n\n\n    function createPair( address tokenA, address tokenB,uint amountA,uint amountB, uint32 tokenWeightA, uint32 swapFee, address to) external returns (uint liquidity);\n    function createPairETH( address token, uint amountToken, uint32 tokenWeight, uint32 swapFee, address to) external payable returns (uint liquidity);\n\n    function removeLiquidity(\n        address pair,\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETH(\n        address pair,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function removeLiquidityWithPermit(\n        address pair,\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETHWithPermit(\n        address pair,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address pair,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address pair,\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n}"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "pragma solidity >=0.5.16;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0, 'ds-math-division-by-zero');\n        c = a / b;\n    }\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n    function balanceOf(address account) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IAggregationExecutor.sol": {
      "content": "pragma solidity >=0.6.12;\n\ninterface IAggregationExecutor {\n    function callBytes(bytes calldata data, address srcSpender) external payable;  // 0xd9c45357\n}\n"
    },
    "contracts/interfaces/ISwapFeeReward.sol": {
      "content": "pragma solidity >=0.6.12;\n\ninterface ISwapFeeReward {\n    function swap(address account, address input, address output, uint256 amount, address pair) external returns (bool);\n\n    function pairsListLength() external view returns (uint256);\n    function pairsList(uint256 index) external view returns (address, uint256, bool);\n}\n"
    },
    "contracts/libraries/Permitable.sol": {
      "content": "pragma solidity >=0.6.12;\n\nimport \"../interfaces/IERC20.sol\";\n\n\ninterface IERC20Permit {\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n\nlibrary RevertReasonParser {\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\n        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\n        // We assume that revert reason is abi-encoded as Error(string)\n\n        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\n        if (data.length >= 68 && data[0] == \"\\x08\" && data[1] == \"\\xc3\" && data[2] == \"\\x79\" && data[3] == \"\\xa0\") {\n            string memory reason;\n            // solhint-disable no-inline-assembly\n            assembly {\n            // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\n                reason := add(data, 68)\n            }\n            /*\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\n                also sometimes there is extra 32 bytes of zeros padded in the end:\n                https://github.com/ethereum/solidity/issues/10170\n                because of that we can't check for equality and instead check\n                that string length + extra 68 bytes is less than overall data length\n            */\n            require(data.length >= 68 + bytes(reason).length, \"Invalid revert reason\");\n            return string(abi.encodePacked(prefix, \"Error(\", reason, \")\"));\n        }\n        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\n        else if (data.length == 36 && data[0] == \"\\x4e\" && data[1] == \"\\x48\" && data[2] == \"\\x7b\" && data[3] == \"\\x71\") {\n            uint256 code;\n            // solhint-disable no-inline-assembly\n            assembly {\n            // 36 = 32 bytes data length + 4-byte selector\n                code := mload(add(data, 36))\n            }\n            return string(abi.encodePacked(prefix, \"Panic(\", _toHex(code), \")\"));\n        }\n\n        return string(abi.encodePacked(prefix, \"Unknown(\", _toHex(data), \")\"));\n    }\n\n    function _toHex(uint256 value) private pure returns(string memory) {\n        return _toHex(abi.encodePacked(value));\n    }\n\n    function _toHex(bytes memory data) private pure returns(string memory) {\n        bytes16 alphabet = 0x30313233343536373839616263646566;\n        bytes memory str = new bytes(2 + data.length * 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < data.length; i++) {\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\n        }\n        return string(str);\n    }\n}\n\ncontract Permitable {\n    event Error(\n        string reason\n    );\n\n    function _permit(IERC20 token, uint256 amount, bytes calldata permit) internal {\n        if (permit.length == 32 * 7) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, bytes memory result) = address(token).call(abi.encodePacked(IERC20Permit.permit.selector, permit));\n            if (!success) {\n                string memory reason = RevertReasonParser.parse(result, \"Permit call failed: \");\n                if (token.allowance(msg.sender, address(this)) < amount) {\n                    revert(reason);\n                } else {\n                    emit Error(reason);\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}