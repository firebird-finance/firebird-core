{
  "address": "0x43659Cd896e93620aEcC5e74A4e3b76F98ff3Dfc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFireBirdRouter",
          "name": "_fireBirdRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "LogGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtLp",
          "type": "uint256"
        }
      ],
      "name": "ZapIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtLp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtTo",
          "type": "uint256"
        }
      ],
      "name": "ZapOut",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireBirdFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireBirdFormula",
      "outputs": [
        {
          "internalType": "contract IFireBirdFormula",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireBirdRouter",
      "outputs": [
        {
          "internalType": "contract IFireBirdRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "dexId",
          "type": "uint8"
        }
      ],
      "name": "getAmountBToZapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountBConverted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountASell",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "dexId",
          "type": "uint8"
        }
      ],
      "name": "getAmountToZapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOtherSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToConverted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToOrigin",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "spenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "manualApproveAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct FireBirdZap.PoolLiquidityInfo",
          "name": "oldPair",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct FireBirdZap.PoolLiquidityInfo",
          "name": "newPair",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct FireBirdZap.PoolLiquidityInfo",
          "name": "oldPair",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct FireBirdZap.PoolLiquidityInfo",
          "name": "newPair",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "migrateWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isWhitelist",
          "type": "bool"
        }
      ],
      "name": "setWhitelistUniRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistUniRouter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTokenB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minLp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "dexId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "uniRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "transferResidual",
          "type": "bool"
        }
      ],
      "name": "zapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "dexId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "uniRouter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "transferResidual",
          "type": "bool"
        }
      ],
      "name": "zapInToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensRec",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "dexId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "uniRouter",
          "type": "address"
        }
      ],
      "name": "zapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "uniRouter",
          "type": "address"
        }
      ],
      "name": "zapOutToPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_uniRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "zapOutToPairWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensRec",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "dexId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "uniRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "zapOutWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4eb5fd6cebe756b86c3864e6b16266700dd523172753c5641327e18abf79a513",
  "receipt": {
    "to": null,
    "from": "0x0FFaD0c8b6acB224999e41e8229D0De90f914832",
    "contractAddress": "0x43659Cd896e93620aEcC5e74A4e3b76F98ff3Dfc",
    "transactionIndex": 9,
    "gasUsed": "5390748",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x67c0b9ad613a0d0b5d12405bfdbea51391ea052f8c61ac9a89ad090fbc6b1fab",
    "transactionHash": "0x4eb5fd6cebe756b86c3864e6b16266700dd523172753c5641327e18abf79a513",
    "logs": [],
    "blockNumber": 344038,
    "cumulativeGasUsed": "6291156",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4BFBf7fCC9776CE8285B059fB77e7Bb2A5c5E365"
  ],
  "solcInputHash": "2e4ef85039a7c061add9857fb7795d5e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFireBirdRouter\",\"name\":\"_fireBirdRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"LogGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtLp\",\"type\":\"uint256\"}],\"name\":\"ZapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtTo\",\"type\":\"uint256\"}],\"name\":\"ZapOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdFormula\",\"outputs\":[{\"internalType\":\"contract IFireBirdFormula\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdRouter\",\"outputs\":[{\"internalType\":\"contract IFireBirdRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"}],\"name\":\"getAmountBToZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountASell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"}],\"name\":\"getAmountToZapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOtherSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToOrigin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"manualApproveAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct FireBirdZap.PoolLiquidityInfo\",\"name\":\"oldPair\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct FireBirdZap.PoolLiquidityInfo\",\"name\":\"newPair\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct FireBirdZap.PoolLiquidityInfo\",\"name\":\"oldPair\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct FireBirdZap.PoolLiquidityInfo\",\"name\":\"newPair\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"migrateWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelistUniRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistUniRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"}],\"name\":\"zapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"}],\"name\":\"zapInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"}],\"name\":\"zapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"}],\"name\":\"zapOutToPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"zapOutToPairWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"dexId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"zapOutWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"manualApproveAllowance(address[],address[],uint256)\":{\"details\":\"Use only for some special tokens\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FireBirdZap.sol\":\"FireBirdZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/FireBirdZap.sol\":{\"content\":\"pragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IFireBirdRouterLite.sol\\\";\\nimport \\\"./interfaces/IFireBirdFactory.sol\\\";\\nimport \\\"./test/IOriginUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IFireBirdPair.sol\\\";\\nimport \\\"./interfaces/IFireBirdFormula.sol\\\";\\nimport './libraries/TransferHelper.sol';\\nimport \\\"./libraries/Babylonian.sol\\\";\\n\\ncontract FireBirdZap is ReentrancyGuard {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public governance;\\n    address public WBNB;\\n    address private constant BNB_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    IFireBirdRouter public fireBirdRouter;\\n    address public fireBirdFactory;\\n    IFireBirdFormula public fireBirdFormula;\\n    mapping(address => bool) public whitelistUniRouter ;\\n\\n    struct PoolLiquidityInfo {\\n        address router;\\n        address pair;\\n        uint256 amountAMin;\\n        uint256 amountBMin;\\n    }\\n\\n    event ZapIn(address indexed sender, address from, uint256 amtFrom, address pool, uint256 amtLp);\\n    event ZapOut(address indexed sender, address pool, uint256 amtLp, address to, uint256 amtTo);\\n    event Withdraw(address indexed token, uint256 amount, address to);\\n    event LogGovernance(address governance);\\n\\n    receive() external payable {\\n        require(msg.sender != tx.origin, \\\"Zap: Do not send ETH directly\\\");\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"Zap: !governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelistUniRouter(address _uniRouter) {\\n        require(whitelistUniRouter[_uniRouter] || _uniRouter == address(fireBirdRouter), \\\"Zap: !router\\\");\\n        _;\\n    }\\n\\n    constructor(IFireBirdRouter _fireBirdRouter) public {\\n        governance = msg.sender;\\n        fireBirdRouter = _fireBirdRouter;\\n        fireBirdFactory = _fireBirdRouter.factory();\\n        fireBirdFormula = IFireBirdFormula(_fireBirdRouter.formula());\\n        WBNB = _fireBirdRouter.WETH();\\n    }\\n\\n    /* ========== External Functions ========== */\\n\\n    // _to: must be a pair lp\\n    // _from: must be in lp\\n    // _amounts: amount_from, _minTokenB, _minLp\\n    function zapInToken(address _from, uint[] calldata amounts, address _to, uint8 dexId, address uniRouter, bool transferResidual)\\n        external\\n        onlyWhitelistUniRouter(uniRouter)\\n        nonReentrant\\n        returns (uint256 lpAmt)\\n    {\\n        require(_from == IFireBirdPair(_to).token0() || _from == IFireBirdPair(_to).token1(), \\\"Zap: !pair\\\");\\n        require(IFireBirdPair(_to).factory() == IFireBirdRouter(uniRouter).factory(), 'Zap: Incompatible factory');\\n\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amounts[0]);\\n        _approveTokenIfNeeded(_from, uniRouter);\\n\\n        // swap half amount for other\\n        address other;\\n        uint256 sellAmount;\\n        {\\n            address token0 = IFireBirdPair(_to).token0();\\n            address token1 = IFireBirdPair(_to).token1();\\n            other = _from == token0 ? token1 : token0;\\n            sellAmount = calculateSwapInAmount(_to, _from, amounts[0], token0, dexId);\\n        }\\n        uint otherAmount = _swap(_from, sellAmount, other, address(this), _to, dexId);\\n        require(otherAmount >= amounts[1], \\\"Zap: Insufficient Receive Amount\\\");\\n\\n        (,,lpAmt) = _pairDeposit(_to, _from, other, amounts[0] - sellAmount, otherAmount, 1, 1, uniRouter, transferResidual);\\n\\n        require(lpAmt >= amounts[2], \\\"Zap: High Slippage In\\\");\\n        emit ZapIn(msg.sender, _from, amounts[0], _to, lpAmt);\\n        return lpAmt;\\n    }\\n\\n    // _to: must be a pair lp\\n    function zapIn(address _to, uint _minTokenB, uint _minLp, uint8 dexId, address uniRouter, bool transferResidual)\\n        external\\n        payable\\n        onlyWhitelistUniRouter(uniRouter)\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(IFireBirdPair(_to).factory() == IFireBirdRouter(uniRouter).factory(), 'Zap: Incompatible factory');\\n\\n        uint256 lpAmt = _swapBNBToLp(IFireBirdPair(_to), msg.value, _minTokenB, dexId, uniRouter, transferResidual);\\n        require(lpAmt >= _minLp, \\\"Zap: High Slippage In\\\");\\n        emit ZapIn(msg.sender, WBNB, msg.value, _to, lpAmt);\\n        return lpAmt;\\n    }\\n\\n    // _from: must be a pair lp\\n    function zapOutToPair(address _from, uint amount, address uniRouter)\\n        public\\n        onlyWhitelistUniRouter(uniRouter)\\n        nonReentrant\\n        returns (uint256 amountA, uint256 amountB)\\n    {\\n        require(IFireBirdPair(_from).factory() == IFireBirdRouter(uniRouter).factory(), 'Zap: Incompatible factory');\\n\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from, uniRouter);\\n\\n        IFireBirdPair pair = IFireBirdPair(_from);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        address _WBNB = WBNB;\\n        if (token0 == _WBNB || token1 == _WBNB) {\\n            if (uniRouter == address(fireBirdRouter)) {\\n                (amountA, amountB) = fireBirdRouter.removeLiquidityETH(_from, token0 != _WBNB ? token0 : token1, amount, 1, 1, msg.sender, block.timestamp);\\n            } else {\\n                (amountA, amountB) = IUniswapV2Router(uniRouter).removeLiquidityETH(token0 != _WBNB ? token0 : token1, amount, 1, 1, msg.sender, block.timestamp);\\n            }\\n        } else {\\n            (amountA, amountB) = _removeLiquidity(_from, token0, token1, amount, 1, 1, uniRouter);\\n        }\\n    }\\n\\n    function zapOutToPairWithPermit(\\n        address _from,\\n        uint256 _amount,\\n        address _uniRouter,\\n        uint256 _approvalAmount,\\n        uint256 _deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB) {\\n        // permit\\n        IFireBirdPair(_from).permit(\\n            msg.sender,\\n            address(this),\\n            _approvalAmount,\\n            _deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return zapOutToPair(_from, _amount, _uniRouter);\\n    }\\n\\n    // _from: must be a pair lp\\n    // _toToken: must be in lp\\n    function zapOut(address _from, uint amount, address _toToken, uint256 _minTokensRec, uint8 dexId, address uniRouter)\\n        public\\n        onlyWhitelistUniRouter(uniRouter)\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(IFireBirdPair(_from).factory() == IFireBirdRouter(uniRouter).factory(), 'Zap: Incompatible factory');\\n\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        address token0;\\n        address token1;\\n        uint256 amountA;\\n        uint256 amountB;\\n        {\\n            IFireBirdPair pair = IFireBirdPair(_from);\\n            token0 = pair.token0();\\n            token1 = pair.token1();\\n            (amountA, amountB) = _removeLiquidity(_from, token0, token1, amount, 1, 1, uniRouter);\\n        }\\n\\n        uint256 tokenBought;\\n        _approveTokenIfNeeded(token0, uniRouter);\\n        _approveTokenIfNeeded(token1, uniRouter);\\n        if (_toToken == BNB_ADDRESS) {\\n            address _lpOfFromAndTo = WBNB == token0 || WBNB == token1 ? _from : address(0);\\n            if (_lpOfFromAndTo == address(0)) revert(\\\"Zap: !pairBNB\\\");\\n            tokenBought = _swapTokenForBNB(token0, amountA, address(this), _lpOfFromAndTo, dexId);\\n            tokenBought = tokenBought.add(_swapTokenForBNB(token1, amountB, address(this), _lpOfFromAndTo, dexId));\\n        } else {\\n            address _lpOfFromAndTo = _toToken == token0 || _toToken == token1 ? _from : address(0);\\n            if (_lpOfFromAndTo == address(0)) revert(\\\"Zap: !pair\\\");\\n            tokenBought = _swap(token0, amountA, _toToken, address(this), _lpOfFromAndTo, dexId);\\n            tokenBought += _swap(token1, amountB, _toToken, address(this), _lpOfFromAndTo, dexId);\\n        }\\n\\n        require(tokenBought >= _minTokensRec, \\\"Zap: High Slippage Out\\\");\\n        if (_toToken == BNB_ADDRESS) {\\n            TransferHelper.safeTransferETH(msg.sender, tokenBought);\\n        } else {\\n            IERC20(_toToken).safeTransfer(msg.sender, tokenBought);\\n        }\\n\\n        emit ZapOut(msg.sender, _from, amount, _toToken, tokenBought);\\n        return tokenBought;\\n    }\\n\\n    function zapOutWithPermit(\\n        address _from,\\n        uint256 amount,\\n        address _toToken,\\n        uint256 _minTokensRec,\\n        uint8 dexId,\\n        address uniRouter,\\n        uint256 _approvalAmount,\\n        uint256 _deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256) {\\n        // permit\\n        IFireBirdPair(_from).permit(\\n            msg.sender,\\n            address(this),\\n            _approvalAmount,\\n            _deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return zapOut(_from, amount, _toToken, _minTokensRec, dexId, uniRouter);\\n    }\\n\\n    function migrateWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        PoolLiquidityInfo calldata oldPair,\\n        PoolLiquidityInfo calldata newPair,\\n        uint256 liquidity,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        IFireBirdPair(oldPair.pair).permit(msg.sender, address(this), liquidity, deadline, v, r, s);\\n\\n        return migrate(tokenA, tokenB, oldPair, newPair, liquidity);\\n    }\\n\\n    // msg.sender should have approved 'liquidity' amount of LP token of 'tokenA' and 'tokenB'\\n    function migrate(\\n        address tokenA,\\n        address tokenB,\\n        PoolLiquidityInfo memory oldPair,\\n        PoolLiquidityInfo calldata newPair,\\n        uint256 liquidity\\n    )\\n        public\\n        onlyWhitelistUniRouter(oldPair.router)\\n        onlyWhitelistUniRouter(newPair.router)\\n    {\\n        if (oldPair.router != address(fireBirdRouter)) {\\n            address uniFactory = IUniswapV2Router(oldPair.router).factory();\\n            oldPair.pair = IOriginUniswapV2Factory(uniFactory).getPair(tokenA, tokenB);\\n        }\\n        IERC20(oldPair.pair).safeTransferFrom(msg.sender, address(this), liquidity);\\n\\n        // Remove liquidity from the old router with permit\\n        (uint256 amountA, uint256 amountB) = _removeLiquidity(\\n            oldPair.pair,\\n            tokenA,\\n            tokenB,\\n            liquidity,\\n            oldPair.amountAMin,\\n            oldPair.amountBMin,\\n            oldPair.router\\n        );\\n\\n        // Add liquidity to the new router\\n        _pairDeposit(\\n            newPair.pair,\\n            tokenA,\\n            tokenB,\\n            amountA,\\n            amountB,\\n            newPair.amountAMin,\\n            newPair.amountBMin,\\n            newPair.router,\\n            true // Send remaining tokens to msg.sender\\n        );\\n    }\\n\\n    /* ========== View Functions ===========*/\\n    // _from: token A\\n    // return amount B that will be convert from A to perform zap in\\n    // return amount A that will be convert to B to perform zap in\\n    function getAmountBToZapIn(address _from, uint _fromAmount, address lp, uint8 dexId) external view returns (uint256 amountBConverted, uint256 amountASell) {\\n        address other;\\n        uint sellAmount;\\n        {\\n            IFireBirdPair pair = IFireBirdPair(lp);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            other = _from == token0 ? token1 : token0;\\n            sellAmount = calculateSwapInAmount(lp, _from, _fromAmount, token0, dexId);\\n        }\\n\\n        address[] memory path = new address[](1);\\n        path[0] = lp;\\n        uint8[] memory dexIds = new uint8[](1);\\n        dexIds[0] = dexId;\\n        uint[] memory amounts = fireBirdFormula.getFactoryAmountsOut(fireBirdFactory, _from, other, sellAmount, path, dexIds);\\n        return (amounts[amounts.length - 1], sellAmount);\\n    }\\n\\n    // _from: lp pair\\n    // return amountOtherSell _otherToken that will be removed from pair\\n    // return amountToConverted _toToken that will be converted from other\\n    // return amountToOrigin _toToken that will be removed from pair\\n    function getAmountToZapOut(address _from, uint amount, address _toToken, uint8 dexId)\\n        external view\\n        returns (uint256 amountOtherSell, uint256 amountToConverted, uint256 amountToOrigin)\\n    {\\n        address other;\\n        {\\n            IFireBirdPair pair = IFireBirdPair(_from);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            other = _toToken == token0 ? token1 : token0;\\n        }\\n        uint sellAmount;\\n        uint amountToRemoved;\\n        {\\n            uint _totalSupply = IERC20(_from).totalSupply();\\n            sellAmount = amount.mul(IERC20(other).balanceOf(_from)) / _totalSupply;\\n            amountToRemoved = amount.mul(IERC20(_toToken).balanceOf(_from)) / _totalSupply;\\n        }\\n\\n        uint _amountOut = _getRemovedReserveAmountOut(_from, other, sellAmount, amountToRemoved, dexId);\\n        return (sellAmount, _amountOut, amountToRemoved);\\n    }\\n\\n    function calculateSwapInAmount(address pair, address tokenIn, uint256 userIn, address pairToken0, uint8 dexId) internal view returns (uint256) {\\n        (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee) = fireBirdFormula.getFactoryWeightsAndSwapFee(fireBirdFactory, pair, dexId);\\n\\n        if (tokenWeight0 == 50) {\\n            (uint256 res0, uint256 res1,) = IFireBirdPair(pair).getReserves();\\n            uint reserveIn = tokenIn == pairToken0 ? res0 : res1;\\n            uint rMul = uint256(10000).sub(uint256(swapFee));\\n            return _getExactSwapInAmount(reserveIn, userIn, rMul);\\n        } else {\\n            uint256 otherWeight = tokenIn == pairToken0 ? uint(tokenWeight1) : uint(tokenWeight0);\\n            return userIn.mul(otherWeight).div(100);\\n        }\\n    }\\n\\n    /* ========== Private Functions ========== */\\n    function _getExactSwapInAmount(uint256 reserveIn, uint256 userIn, uint256 rMul) internal pure returns (uint256) {\\n        return Babylonian\\n            .sqrt(reserveIn.mul(userIn.mul(40000).mul(rMul) + reserveIn.mul(rMul.add(10000)).mul(rMul.add(10000))))\\n            .sub(reserveIn.mul(rMul.add(10000))) / (rMul.mul(2));\\n    }\\n\\n    function _getRemovedReserveAmountOut(address pair, address tokenIn, uint sellAmount, uint amountToRemoved, uint8 dexId) internal view returns (uint) {\\n        (, uint reserveIn, uint reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) =\\n            fireBirdFormula.getFactoryReserveAndWeights(fireBirdFactory, pair, tokenIn, dexId);\\n        return fireBirdFormula.getAmountOut(sellAmount, reserveIn.sub(sellAmount), reserveOut.sub(amountToRemoved), tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address uniRouter) private {\\n        if (IERC20(token).allowance(address(this), address(uniRouter)) == 0) {\\n            IERC20(token).safeApprove(address(uniRouter), uint(~0));\\n        }\\n        if (IERC20(token).allowance(address(this), address(fireBirdRouter)) == 0) {\\n            IERC20(token).safeApprove(address(fireBirdRouter), uint(~0));\\n        }\\n    }\\n\\n    function _removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address uniRouter\\n    ) internal returns (uint256 amountA, uint256 amountB) {\\n        _approveTokenIfNeeded(pair, uniRouter);\\n\\n        if (uniRouter == address(fireBirdRouter)) {\\n            return fireBirdRouter.removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, address(this), block.timestamp);\\n        } else {\\n            return IUniswapV2Router(uniRouter).removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, address(this), block.timestamp);\\n        }\\n    }\\n\\n    function _pairDeposit(\\n        address _pair,\\n        address _poolToken0,\\n        address _poolToken1,\\n        uint256 token0Bought,\\n        uint256 token1Bought,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address uniRouter,\\n        bool transferResidual\\n    ) internal returns (uint256 amountA, uint256 amountB, uint256 lpAmt) {\\n        _approveTokenIfNeeded(_poolToken0, uniRouter);\\n        _approveTokenIfNeeded(_poolToken1, uniRouter);\\n\\n        if (uniRouter == address(fireBirdRouter)) {\\n            (amountA, amountB, lpAmt) = fireBirdRouter.addLiquidity(_pair, _poolToken0, _poolToken1, token0Bought, token1Bought, amountAMin, amountBMin, msg.sender, block.timestamp);\\n        } else {\\n            (amountA, amountB, lpAmt) = IUniswapV2Router(uniRouter).addLiquidity(_poolToken0, _poolToken1, token0Bought, token1Bought, amountAMin, amountBMin, msg.sender, block.timestamp);\\n        }\\n\\n        if (transferResidual) {\\n            uint amountAResidual = token0Bought.sub(amountA);\\n            if (amountAResidual > 0) {\\n                //Returning residue in token0, if any.\\n                _transferToken(_poolToken0, msg.sender, amountAResidual);\\n            }\\n\\n            uint amountBRedisual = token1Bought.sub(amountB);\\n            if (amountBRedisual > 0) {\\n                //Returning residue in token1, if any\\n                _transferToken(_poolToken1, msg.sender, amountBRedisual);\\n            }\\n        }\\n\\n        return (amountA, amountB, lpAmt);\\n    }\\n\\n    function _swapBNBToLp(IFireBirdPair pair, uint amount, uint _minTokenB, uint8 dexId, address uniRouter, bool transferResidual) private returns (uint256 lpAmt) {\\n        address _WBNB = WBNB;\\n        require(pair.token0() == _WBNB || pair.token1() == _WBNB, \\\"FireBirdZap: !pairBNB\\\");\\n        // Lp\\n        address token = pair.token0() == _WBNB ? pair.token1() : pair.token0();\\n        uint swapValue = calculateSwapInAmount(address(pair), _WBNB, amount, pair.token0(), dexId);\\n        uint tokenAmount = _swapBNBForToken(token, swapValue, address(this), address(pair), dexId);\\n        require(tokenAmount >= _minTokenB, \\\"Zap: Insufficient Receive Amount\\\");\\n\\n        uint256 wbnbAmount = amount.sub(swapValue);\\n        IWETH(_WBNB).deposit{value : wbnbAmount}();\\n        (,,lpAmt) = _pairDeposit(address(pair), _WBNB, token, wbnbAmount, tokenAmount, 1, 1, uniRouter, transferResidual);\\n    }\\n\\n    function _swapBNBForToken(address token, uint value, address _receiver, address lpBNBToken, uint8 dexId) private returns (uint) {\\n        if (token == WBNB) {\\n            address _WBNB = WBNB;\\n            IWETH(_WBNB).deposit{value : value}();\\n            if (_receiver != address(this)) {\\n                IERC20(_WBNB).safeTransfer(_receiver, value);\\n            }\\n            return value;\\n        }\\n        address[] memory path = new address[](1);\\n        path[0] = lpBNBToken;\\n        uint8[] memory dexIds = new uint8[](1);\\n        dexIds[0] = dexId;\\n\\n        uint balanceBefore = IERC20(token).balanceOf(_receiver);\\n        fireBirdRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value : value}(token, 1, path, dexIds, _receiver, block.timestamp);\\n        return IERC20(token).balanceOf(_receiver).sub(balanceBefore);\\n    }\\n\\n    function _swapTokenForBNB(address token, uint amount, address _receiver, address lpTokenBNB, uint8 dexId) private returns (uint) {\\n        if (token == WBNB) {\\n            _transferToken(WBNB, _receiver, amount);\\n            return amount;\\n        }\\n        address[] memory path = new address[](1);\\n        path[0] = lpTokenBNB;\\n        uint8[] memory dexIds = new uint8[](1);\\n        dexIds[0] = dexId;\\n\\n        uint balanceBefore = address(_receiver).balance;\\n        fireBirdRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(token, amount, 1, path, dexIds, _receiver, block.timestamp);\\n        return address(_receiver).balance.sub(balanceBefore);\\n    }\\n\\n    function _swap(address _from, uint _amount, address _to, address _receiver, address _lpOfFromTo, uint8 dexId) internal returns (uint) {\\n        if (_from == _to) {\\n            if (_receiver != address(this)) {\\n                IERC20(_from).safeTransfer(_receiver, _amount);\\n            }\\n            return _amount;\\n        }\\n        address[] memory path = new address[](1);\\n        path[0] = _lpOfFromTo;\\n        uint8[] memory dexIds = new uint8[](1);\\n        dexIds[0] = dexId;\\n\\n        uint balanceBefore = IERC20(_to).balanceOf(_receiver);\\n        fireBirdRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(_from, _to, _amount, 1, path, dexIds, _receiver, block.timestamp);\\n        return IERC20(_to).balanceOf(_receiver).sub(balanceBefore);\\n    }\\n\\n    function _transferToken(address token, address to, uint amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (token == WBNB) {\\n            IWETH(WBNB).withdraw(amount);\\n            if (to != address(this)) {\\n                TransferHelper.safeTransferETH(to, amount);\\n            }\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n        return;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n    function setWhitelistUniRouter(address _uniRouter, bool _isWhitelist) external onlyGovernance {\\n        whitelistUniRouter[_uniRouter] = _isWhitelist;\\n    }\\n\\n    function withdrawToken(address[] memory tokens, address to) public onlyGovernance {\\n        require(to != address(0), \\\"Zap: !receiver\\\");\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _withdraw(tokens[i], to);\\n        }\\n    }\\n\\n    function withdrawTokenAmount(address token, address to, uint256 amount) external onlyGovernance {\\n        require(to != address(0), \\\"Zap: !receiver\\\");\\n        IERC20(token).safeTransfer(to, amount);\\n        emit Withdraw(token, amount, to);\\n    }\\n\\n    /**\\n     * @dev Use only for some special tokens\\n     */\\n    function manualApproveAllowance(\\n        IERC20[] calldata tokens,\\n        address[] calldata spenders,\\n        uint256 allowance\\n    ) external onlyGovernance {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            for (uint256 j = 0; j < spenders.length; j++) {\\n                tokens[i].safeApprove(spenders[j], allowance);\\n            }\\n        }\\n    }\\n\\n    function _withdraw(address _token, address _to) internal {\\n        if (_token == BNB_ADDRESS) {\\n            TransferHelper.safeTransferETH(_to, address(this).balance);\\n            emit Withdraw(_token, address(this).balance, _to);\\n            return;\\n        }\\n\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(_to, _balance);\\n        emit Withdraw(_token, _balance, _to);\\n    }\\n\\n    function setGovernance(address _governance) external onlyGovernance {\\n        governance = _governance;\\n        emit LogGovernance(governance);\\n    }\\n}\",\"keccak256\":\"0xed8bd292269bf1e912f24a0a0d8fbe29532e7acbe0c0fc3cec89811059863303\"},\"contracts/interfaces/IFireBirdFactory.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IFireBirdFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0xf877564655d8d582ea8cb43c2f1adbfa99175b60a0198ded0faffbe22fcd613f\"},\"contracts/interfaces/IFireBirdFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IFireBirdFormula {\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA, uint8 dexId) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n    function getFactoryWeightsAndSwapFee(address factory, address pair, uint8 dexId) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path,\\n        uint8[] calldata dexIds\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path,\\n        uint8[] calldata dexIds\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\",\"keccak256\":\"0xeca7109deec9efc29209e4d87c294e94be446077224dd6e905fe0fdf76cf78ff\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IFireBirdPair.sol\":{\"content\":\"pragma solidity >=0.5.16;\\ninterface IFireBirdPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n    function getSwapFee() external view returns (uint32);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address, uint32, uint32) external;\\n}\\n\",\"keccak256\":\"0x770c213bb2620ee99eb32eb1140304457ca65653f5c4ce3b90d203a22f661015\"},\"contracts/interfaces/IFireBirdRouterLite.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\ninterface IFireBirdRouter {\\n    event Exchange(\\n        address pair,\\n        uint amountOut,\\n        address output\\n    );\\n    function factory() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint8[] calldata dexIds,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        uint8[] calldata dexIds,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(address tokenOut, uint amountOutMin, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(address tokenIn, uint amountOut, uint amountInMax, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(address tokenIn, uint amountIn, uint amountOutMin, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(address tokenOut, uint amountOut, address[] calldata path, uint8[] calldata dexIds, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint8[] calldata dexIds,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint8[] calldata dexIds,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint8[] calldata dexIds,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function createPair( address tokenA, address tokenB,uint amountA,uint amountB, uint32 tokenWeightA, uint32 swapFee, address to) external returns (uint liquidity);\\n    function createPairETH( address token, uint amountToken, uint32 tokenWeight, uint32 swapFee, address to) external payable returns (uint liquidity);\\n\\n    function removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n}\",\"keccak256\":\"0xbef1af32534a92bf73b0f4b4e7a9c2199fc0f909876f5a29ea3bab189f4432ec\"},\"contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x58e2fe2a56d9f254edd0980afc14b2430d0456b6dbbc5ef3efc802900d9fd23a\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee68d59a1c385a940a9e4fa1dc1e46fa3dd695168d0035cb8c879329cd13dd4e\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0xc47f6dffdb3d9b81be05c4ec7dec4a590677f255eaf2def29f1ec2c5144a7b44\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x771a09cfe236d26cfbfd1b048a0d68bd37710260efddfc9b175db51d8cd96b4f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/test/IOriginUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IOriginUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x427bb3aecd35d8d7520ccff2660071b254913c76eebf2f9db70464ffce3c2141\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620060af380380620060af833981016040819052620000349162000225565b6001600081905580546001600160a01b03199081163317909155600380546001600160a01b0384169216821790556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b1580156200009957600080fd5b505afa158015620000ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d4919062000225565b600480546001600160a01b0319166001600160a01b0392831617815560408051634b75f54f60e01b8152905192841692634b75f54f92828101926020929190829003018186803b1580156200012857600080fd5b505afa1580156200013d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000163919062000225565b600560006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015620001c357600080fd5b505afa158015620001d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fe919062000225565b600280546001600160a01b0319166001600160a01b03929092169190911790555062000264565b60006020828403121562000237578081fd5b815162000244816200024b565b9392505050565b6001600160a01b03811681146200026157600080fd5b50565b615e3b80620002746000396000f3fe60806040526004361061016e5760003560e01c80636bd3e89f116100cb5780637e2150fd1161007f578063ab033ea911610059578063ab033ea914610406578063d30b7e2a14610426578063f4a9c16b14610446576101b8565b80637e2150fd146103bc5780638dd95002146103d15780639f53beac146103e6576101b8565b80637a226ab0116100b05780637a226ab0146103695780637a9b214d1461037c5780637b191ff21461039c576101b8565b80636bd3e89f14610329578063760cec6714610349576101b8565b80632c002c0611610122578063457e7e5911610107578063457e7e59146102d25780635aa6e675146102ff57806360a13c5214610314576101b8565b80632c002c06146102925780633904a5ef146102b2576101b8565b806312e225681161015357806312e225681461022357806326d718c91461024557806328e802ac14610272576101b8565b8063047be023146101bd5780630f4c1a93146101f4576101b8565b366101b857333214156101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906157d9565b60405180910390fd5b005b600080fd5b3480156101c957600080fd5b506101dd6101d8366004614dc9565b610466565b6040516101eb929190615cd9565b60405180910390f35b34801561020057600080fd5b5061021461020f366004614dc9565b61078c565b6040516101eb93929190615ce7565b34801561022f57600080fd5b50610238610a68565b6040516101eb9190615256565b34801561025157600080fd5b50610265610260366004614cb2565b610a84565b6040516101eb9190615cac565b34801561027e57600080fd5b506101b661028d366004614adc565b6110f6565b34801561029e57600080fd5b506102656102ad366004614b1c565b61120a565b3480156102be57600080fd5b506101b66102cd366004614f92565b6118b7565b3480156102de57600080fd5b506102f26102ed3660046149ab565b61199a565b6040516101eb9190615711565b34801561030b57600080fd5b506102386119af565b34801561032057600080fd5b506102386119cb565b34801561033557600080fd5b506101b6610344366004614bbb565b6119e7565b34801561035557600080fd5b506101b6610364366004614a79565b611a8e565b610265610377366004614e7f565b611da2565b34801561038857600080fd5b506101dd610397366004614bf3565b612081565b3480156103a857600080fd5b506101b66103b7366004614edf565b612622565b3480156103c857600080fd5b506102386126f6565b3480156103dd57600080fd5b50610238612712565b3480156103f257600080fd5b506101b66104013660046149e3565b61272e565b34801561041257600080fd5b506101b66104213660046149ab565b6127dc565b34801561043257600080fd5b50610265610441366004614d20565b6128ae565b34801561045257600080fd5b506101dd610461366004614c34565b61295f565b600080600080600086905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b957600080fd5b505afa1580156104cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f191906149c7565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561053b57600080fd5b505afa15801561054f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057391906149c7565b90508173ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16146105ae57816105b0565b805b94506105bf898c8c858c6129f5565b6040805160018082528183019092529195506060945090925090506020808301908036833701905050905086816000815181106105f857fe5b73ffffffffffffffffffffffffffffffffffffffff9290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050868160008151811061065057fe5b602002602001019060ff16908160ff16815250506060600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2734c38600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d888888886040518763ffffffff1660e01b81526004016106ed969594939291906152ec565b60006040518083038186803b15801561070557600080fd5b505afa158015610719573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261075f9190810190615003565b90508060018251038151811061077157fe5b60200260200101518496509650505050505094509492505050565b600080600080600088905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156107df57600080fd5b505afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081791906149c7565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089991906149c7565b90508173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146108d457816108d6565b805b935050505060008060008a73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e919061510b565b9050806109f48573ffffffffffffffffffffffffffffffffffffffff166370a082318e6040518263ffffffff1660e01b815260040161099d9190615256565b60206040518083038186803b1580156109b557600080fd5b505afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed919061510b565b8c90612c48565b816109fb57fe5b04925080610a3b8a73ffffffffffffffffffffffffffffffffffffffff166370a082318e6040518263ffffffff1660e01b815260040161099d9190615256565b81610a4257fe5b049150506000610a558b8585858c612ca5565b929b929a50909850909650505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812054829060ff1680610ad4575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b610b0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b60026000541415610b47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615be1565b60026000819055508273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9557600080fd5b505afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd91906149c7565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2957600080fd5b505afa158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6191906149c7565b73ffffffffffffffffffffffffffffffffffffffff1614610cae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c75565b610cd073ffffffffffffffffffffffffffffffffffffffff891633308a612e46565b60008060008060008c90508073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5991906149c7565b94508073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610da157600080fd5b505afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd991906149c7565b9350610deb8d86868f6001808e612eef565b909350915060009050610dfe8589613047565b610e088489613047565b73ffffffffffffffffffffffffffffffffffffffff8b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610f0a5760025460009073ffffffffffffffffffffffffffffffffffffffff87811691161480610e80575060025473ffffffffffffffffffffffffffffffffffffffff8681169116145b610e8b576000610e8d565b8d5b905073ffffffffffffffffffffffffffffffffffffffff8116610edc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906157a2565b610ee9868530848e613227565b9150610f02610efb868530858f613227565b83906133d9565b915050610ff1565b60008573ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161480610f7157508473ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16145b610f7c576000610f7e565b8d5b905073ffffffffffffffffffffffffffffffffffffffff8116610fcd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615b4d565b610fdb86858e30858f613418565b9150610feb85848e30858f613418565b82019150505b8981101561102b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906158b5565b73ffffffffffffffffffffffffffffffffffffffff8b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561106c576110673382613713565b61108d565b61108d73ffffffffffffffffffffffffffffffffffffffff8c1633836137c7565b3373ffffffffffffffffffffffffffffffffffffffff167f04a863d47eb1f82dce727c38e0b2294b96dea01f7d8c060216edb8ef473ea8398e8e8e856040516110d9949392919061562c565b60405180910390a260016000559c9b505050505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611147576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b73ffffffffffffffffffffffffffffffffffffffff8216611194576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906159b7565b6111b573ffffffffffffffffffffffffffffffffffffffff841683836137c7565b8273ffffffffffffffffffffffffffffffffffffffff167f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b282846040516111fd929190615cb5565b60405180910390a2505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040812054839060ff168061125a575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b611290576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b600260005414156112cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615be1565b60026000819055508573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561131b57600080fd5b505afa15801561132f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135391906149c7565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16148061143457508573ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cd57600080fd5b505afa1580156113e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140591906149c7565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16145b61146a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615b4d565b8373ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e891906149c7565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561154457600080fd5b505afa158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157c91906149c7565b73ffffffffffffffffffffffffffffffffffffffff16146115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c75565b61160933308a8a60008181106115db57fe5b905060200201358c73ffffffffffffffffffffffffffffffffffffffff16612e46909392919063ffffffff16565b6116138985613047565b60008060008873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561165e57600080fd5b505afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169691906149c7565b905060008973ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e057600080fd5b505afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171891906149c7565b90508173ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146117535781611755565b805b93506117778a8e8e8e600081811061176957fe5b90506020020135858d6129f5565b92505050600061178b8c8385308d8d613418565b90508a8a600181811061179a57fe5b905060200201358110156117da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061576d565b611801898d85858f8f60008181106117ee57fe5b9050602002013503856001808e8e6137e6565b96508c91508b9050600281811061181457fe5b90506020020135851015611854576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a82565b337f6c9d1839e8465b42ebfd3c687420dbcdf116253fd431545be184fb051c38f0c28d8d8d60008161188257fe5b905060200201358c8960405161189b949392919061562c565b60405180910390a2505050506001600055979650505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b60005b848110156119925760005b838110156119895761198185858381811061192d57fe5b905060200201602081019061194291906149ab565b8489898681811061194f57fe5b905060200201602081019061196491906149ab565b73ffffffffffffffffffffffffffffffffffffffff1691906139f6565b600101611916565b5060010161190b565b505050505050565b60066020526000908152604090205460ff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314611a38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b825173ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604090205460ff1680611ade575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b611b14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b611b2160208401846149ab565b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604090205460ff1680611b6f575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b611ba5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b600354855173ffffffffffffffffffffffffffffffffffffffff908116911614611d11576000856000015173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1557600080fd5b505afa158015611c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4d91906149c7565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063e6a4390590611ca4908b908b90600401615277565b60206040518083038186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf491906149c7565b73ffffffffffffffffffffffffffffffffffffffff166020870152505b6020850151611d389073ffffffffffffffffffffffffffffffffffffffff16333086612e46565b600080611d5a87602001518a8a888b604001518c606001518d60000151612eef565b9092509050611d94611d7260408801602089016149ab565b8a8a858560408c013560608d0135611d8d60208f018f6149ab565b60016137e6565b505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040812054839060ff1680611df2575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b611e28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b60026000541415611e65576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615be1565b60026000819055508373ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb357600080fd5b505afa158015611ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eeb91906149c7565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4757600080fd5b505afa158015611f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7f91906149c7565b73ffffffffffffffffffffffffffffffffffffffff1614611fcc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c75565b6000611fdc89348a898989613af9565b905086811015612018576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a82565b60025460405133917f6c9d1839e8465b42ebfd3c687420dbcdf116253fd431545be184fb051c38f0c2916120689173ffffffffffffffffffffffffffffffffffffffff169034908e90879061562c565b60405180910390a2600160005598975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120548190839060ff16806120d3575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b612109576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b60026000541415612146576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615be1565b60026000819055508373ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561219457600080fd5b505afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc91906149c7565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561222857600080fd5b505afa15801561223c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226091906149c7565b73ffffffffffffffffffffffffffffffffffffffff16146122ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c75565b6122cf73ffffffffffffffffffffffffffffffffffffffff8716333088612e46565b6122d98685613047565b600086905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561232657600080fd5b505afa15801561233a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235e91906149c7565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156123a857600080fd5b505afa1580156123bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e091906149c7565b60025490915073ffffffffffffffffffffffffffffffffffffffff90811690831681148061243957508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156125f75760035473ffffffffffffffffffffffffffffffffffffffff8981169116141561251c5760035473ffffffffffffffffffffffffffffffffffffffff9081169063b56b681d908c9086811690851614156124975784612499565b855b8c60018033426040518863ffffffff1660e01b81526004016124c197969594939291906154d1565b6040805180830381600087803b1580156124da57600080fd5b505af11580156124ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125129190615123565b90975095506125f2565b8773ffffffffffffffffffffffffffffffffffffffff166302751cec8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156125725783612574565b845b8b60018033426040518763ffffffff1660e01b815260040161259b969594939291906156c9565b6040805180830381600087803b1580156125b457600080fd5b505af11580156125c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ec9190615123565b90975095505b61260d565b6126078a84848c6001808e612eef565b90975095505b50505050600160008190555050935093915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612673576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b73ffffffffffffffffffffffffffffffffffffffff81166126c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906159b7565b60005b82518110156126f1576126e98382815181106126db57fe5b602002602001015183613fd7565b6001016126c3565b505050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b61273e60408801602089016149ab565b73ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401612782979695949392919061529e565b600060405180830381600087803b15801561279c57600080fd5b505af11580156127b0573d6000803e3d6000fd5b505050506127d18989898036038101906127ca91906150af565b8989611a8e565b505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461282d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040517f4d5c50bb72d5f3b4cd853277f0fedffc1df6a70dbed9a9f365013b5a8543e884926128a3921690615256565b60405180910390a150565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d169063d505accf9061290f90339030908b908b908b908b908b9060040161529e565b600060405180830381600087803b15801561292957600080fd5b505af115801561293d573d6000803e3d6000fd5b5050505061294f8c8c8c8c8c8c610a84565b9c9b505050505050505050505050565b6000808973ffffffffffffffffffffffffffffffffffffffff1663d505accf33308a8a8a8a8a6040518863ffffffff1660e01b81526004016129a7979695949392919061529e565b600060405180830381600087803b1580156129c157600080fd5b505af11580156129d5573d6000803e3d6000fd5b505050506129e48a8a8a612081565b915091509850989650505050505050565b600554600480546040517f0c1815df00000000000000000000000000000000000000000000000000000000815260009384938493849373ffffffffffffffffffffffffffffffffffffffff93841693630c1815df93612a5c93909116918e918b9101615574565b60606040518083038186803b158015612a7457600080fd5b505afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac9190615173565b9250925092508263ffffffff1660321415612bd8576000808a73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612b0a57600080fd5b505afa158015612b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4291906150ca565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008873ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614612ba25781612ba4565b825b90506000612bbd61271063ffffffff8088169061413016565b9050612bca828c83614172565b975050505050505050612c3f565b60008673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614612c19578363ffffffff16612c21565b8263ffffffff165b9050612c386064612c328a84612c48565b906141f1565b9450505050505b95945050505050565b600082612c5757506000612c9f565b82820282848281612c6457fe5b0414612c9c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906159ee565b90505b92915050565b600080600080600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eb22d54f600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d8d8b6040518563ffffffff1660e01b8152600401612d3194939291906153f7565b60c06040518083038186803b158015612d4957600080fd5b505afa158015612d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d819190614e1a565b600554949a509298509096509450925073ffffffffffffffffffffffffffffffffffffffff16905063671a11b58a612db98882614130565b612dc3888d614130565b8787876040518763ffffffff1660e01b8152600401612de796959493929190615cfd565b60206040518083038186803b158015612dff57600080fd5b505afa158015612e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e37919061510b565b9b9a5050505050505050505050565b612ee9846323b872dd60e01b858585604051602401612e6793929190615430565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261423d565b50505050565b600080612efc8984613047565b60035473ffffffffffffffffffffffffffffffffffffffff84811691161415612fdd576003546040517fe1f4a78400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e1f4a78490612f83908c908c908c908c908c908c9030904290600401615345565b6040805180830381600087803b158015612f9c57600080fd5b505af1158015612fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd49190615123565b9150915061303b565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063baa2abde90612f83908b908b908b908b908b90309042906004016154d1565b97509795505050505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9061309b9030908590600401615277565b60206040518083038186803b1580156130b357600080fd5b505afa1580156130c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130eb919061510b565b6131305761313073ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6139f6565b6003546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8085169263dd62ed3e926131889230921690600401615277565b60206040518083038186803b1580156131a057600080fd5b505afa1580156131b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d8919061510b565b613223576003546132239073ffffffffffffffffffffffffffffffffffffffff84811691167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6139f6565b5050565b60025460009073ffffffffffffffffffffffffffffffffffffffff87811691161415613278576002546132719073ffffffffffffffffffffffffffffffffffffffff1685876142f3565b5083612c3f565b6040805160018082528183019092526060916020808301908036833701905050905083816000815181106132a857fe5b73ffffffffffffffffffffffffffffffffffffffff9290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050838160008151811061330057fe5b60ff909216602092830291909101909101526003546040517f242e3b9f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8089163192169063242e3b9f90613378908c908c90600190899089908f904290600401615663565b600060405180830381600087803b15801561339257600080fd5b505af11580156133a6573d6000803e3d6000fd5b506133cc9250505073ffffffffffffffffffffffffffffffffffffffff88163182614130565b9998505050505050505050565b600082820183811015612c9c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615847565b60008473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156134935773ffffffffffffffffffffffffffffffffffffffff8416301461348c5761348c73ffffffffffffffffffffffffffffffffffffffff881685886137c7565b5084613709565b6040805160018082528183019092526060916020808301908036833701905050905083816000815181106134c357fe5b73ffffffffffffffffffffffffffffffffffffffff9290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050838160008151811061351b57fe5b60ff909216602092830291909101909101526040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8916906370a0823190613582908a90600401615256565b60206040518083038186803b15801561359a57600080fd5b505afa1580156135ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d2919061510b565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc9f70298b8a8c600188888e426040518963ffffffff1660e01b815260040161363e989796959493929190615461565b600060405180830381600087803b15801561365857600080fd5b505af115801561366c573d6000803e3d6000fd5b50505050613703818973ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016136ad9190615256565b60206040518083038186803b1580156136c557600080fd5b505afa1580156136d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fd919061510b565b90614130565b93505050505b9695505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff841690839060405161374a919061523a565b60006040518083038185875af1925050503d8060008114613787576040519150601f19603f3d011682016040523d82523d6000602084013e61378c565b606091505b50509050806126f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615af0565b6126f18363a9059cbb60e01b8484604051602401612e67929190615606565b60008060006137f58b86613047565b6137ff8a86613047565b60035473ffffffffffffffffffffffffffffffffffffffff868116911614156138e6576003546040517ffbf4513500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063fbf4513590613888908f908f908f908f908f908f908f903390429060040161539b565b606060405180830381600087803b1580156138a257600080fd5b505af11580156138b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138da9190615146565b919450925090506139a0565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063e8e3370090613946908e908e908e908e908e908e903390429060040161551e565b606060405180830381600087803b15801561396057600080fd5b505af1158015613974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139989190615146565b919450925090505b83156139e75760006139b28a85614130565b905080156139c5576139c58c33836142f3565b60006139d18a85614130565b905080156139e4576139e48c33836142f3565b50505b99509950999650505050505050565b801580613aa457506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063dd62ed3e90613a529030908690600401615277565b60206040518083038186803b158015613a6a57600080fd5b505afa158015613a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa2919061510b565b155b613ada576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c18565b6126f18363095ea7b360e01b8484604051602401612e67929190615606565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613b7e57600080fd5b505afa158015613b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb691906149c7565b73ffffffffffffffffffffffffffffffffffffffff161480613c8057508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613c3057600080fd5b505afa158015613c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c6891906149c7565b73ffffffffffffffffffffffffffffffffffffffff16145b613cb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615810565b60008173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613d1557600080fd5b505afa158015613d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d4d91906149c7565b73ffffffffffffffffffffffffffffffffffffffff1614613deb578873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613dae57600080fd5b505afa158015613dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de691906149c7565b613e69565b8873ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3157600080fd5b505afa158015613e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e6991906149c7565b90506000613ef78a848b8d73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613eb957600080fd5b505afa158015613ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ef191906149c7565b8b6129f5565b90506000613f088383308e8c6143f5565b905088811015613f44576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061576d565b6000613f508b84614130565b90508473ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613f9a57600080fd5b505af1158015613fae573d6000803e3d6000fd5b5050505050613fc58c868684866001808f8f6137e6565b9e9d5050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415614068576140138147613713565b8173ffffffffffffffffffffffffffffffffffffffff167f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b2478360405161405b929190615cb5565b60405180910390a2613223565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8416906370a08231906140bd903090600401615256565b60206040518083038186803b1580156140d557600080fd5b505afa1580156140e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410d919061510b565b90506111b573ffffffffffffffffffffffffffffffffffffffff841683836137c7565b60008282111561416c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906158ec565b50900390565b600061417f826002612c48565b6141df614198614191856127106133d9565b8790612c48565b6136fd6141da6141c26141ad886127106133d9565b6141bc6109ed8a6127106133d9565b90612c48565b6141d2886141bc8b619c40612c48565b8a9101612c48565b6146fe565b816141e657fe5b0490505b9392505050565b600080821161422c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615980565b81838161423557fe5b049392505050565b606061429f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166147509092919063ffffffff16565b8051909150156126f157808060200190518101906142bd9190615093565b6126f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615b84565b806142fd576126f1565b60025473ffffffffffffffffffffffffffffffffffffffff848116911614156143d4576002546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d90614376908490600401615cac565b600060405180830381600087803b15801561439057600080fd5b505af11580156143a4573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff821630146143cf576143cf8282613713565b6126f1565b6126f173ffffffffffffffffffffffffffffffffffffffff841683836137c7565b60025460009073ffffffffffffffffffffffffffffffffffffffff878116911614156144ec57600254604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691829163d0e30db091899160048082019260009290919082900301818588803b15801561448b57600080fd5b505af115801561449f573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8616301490506144e3576144e373ffffffffffffffffffffffffffffffffffffffff821686886137c7565b85915050612c3f565b60408051600180825281830190925260609160208083019080368337019050509050838160008151811061451c57fe5b73ffffffffffffffffffffffffffffffffffffffff9290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050838160008151811061457457fe5b60ff909216602092830291909101909101526040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8a16906370a08231906145db908a90600401615256565b60206040518083038186803b1580156145f357600080fd5b505afa158015614607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061462b919061510b565b6003546040517f752ebb7c00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063752ebb7c908a9061468f908d90600190899089908f9042906004016155a7565b6000604051808303818588803b1580156146a857600080fd5b505af11580156146bc573d6000803e3d6000fd5b50505050506133cc818a73ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016136ad9190615256565b60006003821115614741575080600160028204015b8181101561473b5780915060028182858161472a57fe5b04018161473357fe5b049050614713565b5061474b565b811561474b575060015b919050565b606061475f8484600085614767565b949350505050565b6060824710156147a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615923565b6147ac85614869565b6147e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615ab9565b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161480c919061523a565b60006040518083038185875af1925050503d8060008114614849576040519150601f19603f3d011682016040523d82523d6000602084013e61484e565b606091505b509150915061485e82828661486f565b979650505050505050565b3b151590565b6060831561487e5750816141ea565b82511561488e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad919061571c565b8035612c9f81615da4565b60008083601f8401126148de578182fd5b50813567ffffffffffffffff8111156148f5578182fd5b602083019150836020808302850101111561490f57600080fd5b9250929050565b600060808284031215614927578081fd5b50919050565b60006080828403121561493e578081fd5b6149486080615d31565b9050813561495581615da4565b8152602082013561496581615da4565b80602083015250604082013560408201526060820135606082015292915050565b805163ffffffff81168114612c9f57600080fd5b803560ff81168114612c9f57600080fd5b6000602082840312156149bc578081fd5b8135612c9c81615da4565b6000602082840312156149d8578081fd5b8151612c9c81615da4565b60008060008060008060008060006101e08a8c031215614a01578485fd5b8935614a0c81615da4565b985060208a0135614a1c81615da4565b9750614a2b8b60408c01614916565b9650614a3a8b60c08c01614916565b95506101408a013594506101608a01359350614a5a8b6101808c0161499a565b92506101a08a013591506101c08a013590509295985092959850929598565b60008060008060006101608688031215614a91578081fd5b8535614a9c81615da4565b94506020860135614aac81615da4565b9350614abb876040880161492d565b9250614aca8760c08801614916565b94979396509194610140013592915050565b600080600060608486031215614af0578283fd5b8335614afb81615da4565b92506020840135614b0b81615da4565b929592945050506040919091013590565b600080600080600080600060c0888a031215614b36578081fd5b8735614b4181615da4565b9650602088013567ffffffffffffffff811115614b5c578182fd5b614b688a828b016148cd565b9097509550506040880135614b7c81615da4565b9350614b8b8960608a0161499a565b92506080880135614b9b81615da4565b915060a0880135614bab81615dc9565b8091505092959891949750929550565b60008060408385031215614bcd578182fd5b8235614bd881615da4565b91506020830135614be881615dc9565b809150509250929050565b600080600060608486031215614c07578081fd5b8335614c1281615da4565b9250602084013591506040840135614c2981615da4565b809150509250925092565b600080600080600080600080610100898b031215614c50578182fd5b8835614c5b81615da4565b9750602089013596506040890135614c7281615da4565b9550606089013594506080890135935060a089013560ff81168114614c95578283fd5b979a969950949793969295929450505060c08201359160e0013590565b60008060008060008060c08789031215614cca578384fd5b8635614cd581615da4565b9550602087013594506040870135614cec81615da4565b935060608701359250614d02886080890161499a565b915060a0870135614d1281615da4565b809150509295509295509295565b60008060008060008060008060008060006101608c8e031215614d41578485fd5b8b35614d4c81615da4565b9a5060208c0135995060408c0135614d6381615da4565b985060608c01359750614d798d60808e0161499a565b965060a08c0135614d8981615da4565b955060c08c0135945060e08c01359350614da78d6101008e0161499a565b92506101208c013591506101408c013590509295989b509295989b9093969950565b60008060008060808587031215614dde578182fd5b8435614de981615da4565b9350602085013592506040850135614e0081615da4565b9150614e0f866060870161499a565b905092959194509250565b60008060008060008060c08789031215614e32578384fd5b8651614e3d81615da4565b8096505060208701519450604087015193506060870151614e5d81615df3565b6080880151909350614e6e81615df3565b60a0880151909250614d1281615df3565b60008060008060008060c08789031215614e97578384fd5b8635614ea281615da4565b95506020870135945060408701359350614ebf886060890161499a565b92506080870135614ecf81615da4565b915060a0870135614d1281615dc9565b60008060408385031215614ef1578182fd5b823567ffffffffffffffff811115614f07578283fd5b8301601f81018513614f17578283fd5b8035614f2a614f2582615d58565b615d31565b808282526020808301925080850189828387028801011115614f4a578788fd5b8795505b84861015614f7457614f608a826148c2565b845260019590950194928101928101614f4e565b50819650614f8489828a016148c2565b955050505050509250929050565b600080600080600060608688031215614fa9578283fd5b853567ffffffffffffffff80821115614fc0578485fd5b614fcc89838a016148cd565b90975095506020880135915080821115614fe4578485fd5b50614ff1888289016148cd565b96999598509660400135949350505050565b60006020808385031215615015578182fd5b825167ffffffffffffffff81111561502b578283fd5b8301601f8101851361503b578283fd5b8051615049614f2582615d58565b8181528381019083850185840285018601891015615065578687fd5b8694505b83851015615087578051835260019490940193918501918501615069565b50979650505050505050565b6000602082840312156150a4578081fd5b8151612c9c81615dc9565b6000608082840312156150c0578081fd5b6141ea838361492d565b6000806000606084860312156150de578081fd5b83516150e981615dd7565b60208501519093506150fa81615dd7565b6040850151909250614c2981615df3565b60006020828403121561511c578081fd5b5051919050565b60008060408385031215615135578182fd5b505080516020909101519092909150565b60008060006060848603121561515a578081fd5b8351925060208401519150604084015190509250925092565b600080600060608486031215615187578081fd5b6151918585614986565b92506151a08560208601614986565b91506151af8560408601614986565b90509250925092565b6000815180845260208085019450808401835b838110156151fd57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016151cb565b509495945050505050565b6000815180845260208085019450808401835b838110156151fd57815160ff168752958201959082019060010161521b565b6000825161524c818460208701615d78565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015260c0608083015261533360c08301856151b8565b82810360a08401526133cc8185615208565b73ffffffffffffffffffffffffffffffffffffffff9889168152968816602088015294871660408701526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b73ffffffffffffffffffffffffffffffffffffffff998a168152978916602089015295881660408801526060870194909452608086019290925260a085015260c084015290921660e08201526101008101919091526101200190565b73ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529216604082015260ff909116606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600061010073ffffffffffffffffffffffffffffffffffffffff808c168452808b1660208501528960408501528860608501528160808501526154a6828501896151b8565b915083820360a08501526154ba8288615208565b951660c0840152505060e001529695505050505050565b73ffffffffffffffffffffffffffffffffffffffff9788168152958716602087015260408601949094526060850192909252608084015290921660a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff9889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b73ffffffffffffffffffffffffffffffffffffffff938416815291909216602082015260ff909116604082015260600190565b600073ffffffffffffffffffffffffffffffffffffffff808916835287602084015260c060408401526155dd60c08401886151b8565b83810360608501526155ef8188615208565b959091166080840152505060a00152949350505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152602081019390935292166040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015260e0606084015261569f60e08401886151b8565b83810360808501526156b18188615208565b9590911660a0840152505060c0015295945050505050565b73ffffffffffffffffffffffffffffffffffffffff9687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b901515815260200190565b600060208252825180602084015261573b816040850160208701615d78565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252818101527f5a61703a20496e73756666696369656e74205265636569766520416d6f756e74604082015260600190565b6020808252600d908201527f5a61703a202170616972424e4200000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f5a61703a20446f206e6f742073656e6420455448206469726563746c79000000604082015260600190565b60208082526015908201527f46697265426972645a61703a202170616972424e420000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526010908201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604082015260600190565b60208082526016908201527f5a61703a204869676820536c697070616765204f757400000000000000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600e908201527f5a61703a20217265636569766572000000000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f5a61703a2021726f757465720000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f5a61703a204869676820536c69707061676520496e0000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201527f4c45440000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f5a61703a20217061697200000000000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60208082526019908201527f5a61703a20496e636f6d70617469626c6520666163746f727900000000000000604082015260600190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b60405181810167ffffffffffffffff81118282101715615d5057600080fd5b604052919050565b600067ffffffffffffffff821115615d6e578081fd5b5060209081020190565b60005b83811015615d93578181015183820152602001615d7b565b83811115612ee95750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114615dc657600080fd5b50565b8015158114615dc657600080fd5b6dffffffffffffffffffffffffffff81168114615dc657600080fd5b63ffffffff81168114615dc657600080fdfea264697066735822122024f7074631e44aba1957f037b0ab8cd30c818b59a8c606da2b06e3cb2a3837fc64736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061016e5760003560e01c80636bd3e89f116100cb5780637e2150fd1161007f578063ab033ea911610059578063ab033ea914610406578063d30b7e2a14610426578063f4a9c16b14610446576101b8565b80637e2150fd146103bc5780638dd95002146103d15780639f53beac146103e6576101b8565b80637a226ab0116100b05780637a226ab0146103695780637a9b214d1461037c5780637b191ff21461039c576101b8565b80636bd3e89f14610329578063760cec6714610349576101b8565b80632c002c0611610122578063457e7e5911610107578063457e7e59146102d25780635aa6e675146102ff57806360a13c5214610314576101b8565b80632c002c06146102925780633904a5ef146102b2576101b8565b806312e225681161015357806312e225681461022357806326d718c91461024557806328e802ac14610272576101b8565b8063047be023146101bd5780630f4c1a93146101f4576101b8565b366101b857333214156101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906157d9565b60405180910390fd5b005b600080fd5b3480156101c957600080fd5b506101dd6101d8366004614dc9565b610466565b6040516101eb929190615cd9565b60405180910390f35b34801561020057600080fd5b5061021461020f366004614dc9565b61078c565b6040516101eb93929190615ce7565b34801561022f57600080fd5b50610238610a68565b6040516101eb9190615256565b34801561025157600080fd5b50610265610260366004614cb2565b610a84565b6040516101eb9190615cac565b34801561027e57600080fd5b506101b661028d366004614adc565b6110f6565b34801561029e57600080fd5b506102656102ad366004614b1c565b61120a565b3480156102be57600080fd5b506101b66102cd366004614f92565b6118b7565b3480156102de57600080fd5b506102f26102ed3660046149ab565b61199a565b6040516101eb9190615711565b34801561030b57600080fd5b506102386119af565b34801561032057600080fd5b506102386119cb565b34801561033557600080fd5b506101b6610344366004614bbb565b6119e7565b34801561035557600080fd5b506101b6610364366004614a79565b611a8e565b610265610377366004614e7f565b611da2565b34801561038857600080fd5b506101dd610397366004614bf3565b612081565b3480156103a857600080fd5b506101b66103b7366004614edf565b612622565b3480156103c857600080fd5b506102386126f6565b3480156103dd57600080fd5b50610238612712565b3480156103f257600080fd5b506101b66104013660046149e3565b61272e565b34801561041257600080fd5b506101b66104213660046149ab565b6127dc565b34801561043257600080fd5b50610265610441366004614d20565b6128ae565b34801561045257600080fd5b506101dd610461366004614c34565b61295f565b600080600080600086905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b957600080fd5b505afa1580156104cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f191906149c7565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561053b57600080fd5b505afa15801561054f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057391906149c7565b90508173ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16146105ae57816105b0565b805b94506105bf898c8c858c6129f5565b6040805160018082528183019092529195506060945090925090506020808301908036833701905050905086816000815181106105f857fe5b73ffffffffffffffffffffffffffffffffffffffff9290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050868160008151811061065057fe5b602002602001019060ff16908160ff16815250506060600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2734c38600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d888888886040518763ffffffff1660e01b81526004016106ed969594939291906152ec565b60006040518083038186803b15801561070557600080fd5b505afa158015610719573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261075f9190810190615003565b90508060018251038151811061077157fe5b60200260200101518496509650505050505094509492505050565b600080600080600088905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156107df57600080fd5b505afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081791906149c7565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089991906149c7565b90508173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146108d457816108d6565b805b935050505060008060008a73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e919061510b565b9050806109f48573ffffffffffffffffffffffffffffffffffffffff166370a082318e6040518263ffffffff1660e01b815260040161099d9190615256565b60206040518083038186803b1580156109b557600080fd5b505afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed919061510b565b8c90612c48565b816109fb57fe5b04925080610a3b8a73ffffffffffffffffffffffffffffffffffffffff166370a082318e6040518263ffffffff1660e01b815260040161099d9190615256565b81610a4257fe5b049150506000610a558b8585858c612ca5565b929b929a50909850909650505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812054829060ff1680610ad4575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b610b0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b60026000541415610b47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615be1565b60026000819055508273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9557600080fd5b505afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd91906149c7565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2957600080fd5b505afa158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6191906149c7565b73ffffffffffffffffffffffffffffffffffffffff1614610cae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c75565b610cd073ffffffffffffffffffffffffffffffffffffffff891633308a612e46565b60008060008060008c90508073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5991906149c7565b94508073ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610da157600080fd5b505afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd991906149c7565b9350610deb8d86868f6001808e612eef565b909350915060009050610dfe8589613047565b610e088489613047565b73ffffffffffffffffffffffffffffffffffffffff8b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610f0a5760025460009073ffffffffffffffffffffffffffffffffffffffff87811691161480610e80575060025473ffffffffffffffffffffffffffffffffffffffff8681169116145b610e8b576000610e8d565b8d5b905073ffffffffffffffffffffffffffffffffffffffff8116610edc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906157a2565b610ee9868530848e613227565b9150610f02610efb868530858f613227565b83906133d9565b915050610ff1565b60008573ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161480610f7157508473ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16145b610f7c576000610f7e565b8d5b905073ffffffffffffffffffffffffffffffffffffffff8116610fcd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615b4d565b610fdb86858e30858f613418565b9150610feb85848e30858f613418565b82019150505b8981101561102b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906158b5565b73ffffffffffffffffffffffffffffffffffffffff8b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561106c576110673382613713565b61108d565b61108d73ffffffffffffffffffffffffffffffffffffffff8c1633836137c7565b3373ffffffffffffffffffffffffffffffffffffffff167f04a863d47eb1f82dce727c38e0b2294b96dea01f7d8c060216edb8ef473ea8398e8e8e856040516110d9949392919061562c565b60405180910390a260016000559c9b505050505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611147576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b73ffffffffffffffffffffffffffffffffffffffff8216611194576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906159b7565b6111b573ffffffffffffffffffffffffffffffffffffffff841683836137c7565b8273ffffffffffffffffffffffffffffffffffffffff167f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b282846040516111fd929190615cb5565b60405180910390a2505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040812054839060ff168061125a575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b611290576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b600260005414156112cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615be1565b60026000819055508573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561131b57600080fd5b505afa15801561132f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135391906149c7565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16148061143457508573ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cd57600080fd5b505afa1580156113e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140591906149c7565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16145b61146a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615b4d565b8373ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e891906149c7565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561154457600080fd5b505afa158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157c91906149c7565b73ffffffffffffffffffffffffffffffffffffffff16146115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c75565b61160933308a8a60008181106115db57fe5b905060200201358c73ffffffffffffffffffffffffffffffffffffffff16612e46909392919063ffffffff16565b6116138985613047565b60008060008873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561165e57600080fd5b505afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169691906149c7565b905060008973ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e057600080fd5b505afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171891906149c7565b90508173ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146117535781611755565b805b93506117778a8e8e8e600081811061176957fe5b90506020020135858d6129f5565b92505050600061178b8c8385308d8d613418565b90508a8a600181811061179a57fe5b905060200201358110156117da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061576d565b611801898d85858f8f60008181106117ee57fe5b9050602002013503856001808e8e6137e6565b96508c91508b9050600281811061181457fe5b90506020020135851015611854576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a82565b337f6c9d1839e8465b42ebfd3c687420dbcdf116253fd431545be184fb051c38f0c28d8d8d60008161188257fe5b905060200201358c8960405161189b949392919061562c565b60405180910390a2505050506001600055979650505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b60005b848110156119925760005b838110156119895761198185858381811061192d57fe5b905060200201602081019061194291906149ab565b8489898681811061194f57fe5b905060200201602081019061196491906149ab565b73ffffffffffffffffffffffffffffffffffffffff1691906139f6565b600101611916565b5060010161190b565b505050505050565b60066020526000908152604090205460ff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314611a38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b825173ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604090205460ff1680611ade575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b611b14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b611b2160208401846149ab565b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604090205460ff1680611b6f575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b611ba5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b600354855173ffffffffffffffffffffffffffffffffffffffff908116911614611d11576000856000015173ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1557600080fd5b505afa158015611c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4d91906149c7565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063e6a4390590611ca4908b908b90600401615277565b60206040518083038186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf491906149c7565b73ffffffffffffffffffffffffffffffffffffffff166020870152505b6020850151611d389073ffffffffffffffffffffffffffffffffffffffff16333086612e46565b600080611d5a87602001518a8a888b604001518c606001518d60000151612eef565b9092509050611d94611d7260408801602089016149ab565b8a8a858560408c013560608d0135611d8d60208f018f6149ab565b60016137e6565b505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040812054839060ff1680611df2575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b611e28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b60026000541415611e65576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615be1565b60026000819055508373ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb357600080fd5b505afa158015611ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eeb91906149c7565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4757600080fd5b505afa158015611f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7f91906149c7565b73ffffffffffffffffffffffffffffffffffffffff1614611fcc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c75565b6000611fdc89348a898989613af9565b905086811015612018576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a82565b60025460405133917f6c9d1839e8465b42ebfd3c687420dbcdf116253fd431545be184fb051c38f0c2916120689173ffffffffffffffffffffffffffffffffffffffff169034908e90879061562c565b60405180910390a2600160005598975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120548190839060ff16806120d3575060035473ffffffffffffffffffffffffffffffffffffffff8281169116145b612109576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615a4b565b60026000541415612146576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615be1565b60026000819055508373ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561219457600080fd5b505afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc91906149c7565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561222857600080fd5b505afa15801561223c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226091906149c7565b73ffffffffffffffffffffffffffffffffffffffff16146122ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c75565b6122cf73ffffffffffffffffffffffffffffffffffffffff8716333088612e46565b6122d98685613047565b600086905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561232657600080fd5b505afa15801561233a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235e91906149c7565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156123a857600080fd5b505afa1580156123bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e091906149c7565b60025490915073ffffffffffffffffffffffffffffffffffffffff90811690831681148061243957508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156125f75760035473ffffffffffffffffffffffffffffffffffffffff8981169116141561251c5760035473ffffffffffffffffffffffffffffffffffffffff9081169063b56b681d908c9086811690851614156124975784612499565b855b8c60018033426040518863ffffffff1660e01b81526004016124c197969594939291906154d1565b6040805180830381600087803b1580156124da57600080fd5b505af11580156124ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125129190615123565b90975095506125f2565b8773ffffffffffffffffffffffffffffffffffffffff166302751cec8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156125725783612574565b845b8b60018033426040518763ffffffff1660e01b815260040161259b969594939291906156c9565b6040805180830381600087803b1580156125b457600080fd5b505af11580156125c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ec9190615123565b90975095505b61260d565b6126078a84848c6001808e612eef565b90975095505b50505050600160008190555050935093915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612673576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b73ffffffffffffffffffffffffffffffffffffffff81166126c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906159b7565b60005b82518110156126f1576126e98382815181106126db57fe5b602002602001015183613fd7565b6001016126c3565b505050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b61273e60408801602089016149ab565b73ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401612782979695949392919061529e565b600060405180830381600087803b15801561279c57600080fd5b505af11580156127b0573d6000803e3d6000fd5b505050506127d18989898036038101906127ca91906150af565b8989611a8e565b505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461282d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061587e565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040517f4d5c50bb72d5f3b4cd853277f0fedffc1df6a70dbed9a9f365013b5a8543e884926128a3921690615256565b60405180910390a150565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8d169063d505accf9061290f90339030908b908b908b908b908b9060040161529e565b600060405180830381600087803b15801561292957600080fd5b505af115801561293d573d6000803e3d6000fd5b5050505061294f8c8c8c8c8c8c610a84565b9c9b505050505050505050505050565b6000808973ffffffffffffffffffffffffffffffffffffffff1663d505accf33308a8a8a8a8a6040518863ffffffff1660e01b81526004016129a7979695949392919061529e565b600060405180830381600087803b1580156129c157600080fd5b505af11580156129d5573d6000803e3d6000fd5b505050506129e48a8a8a612081565b915091509850989650505050505050565b600554600480546040517f0c1815df00000000000000000000000000000000000000000000000000000000815260009384938493849373ffffffffffffffffffffffffffffffffffffffff93841693630c1815df93612a5c93909116918e918b9101615574565b60606040518083038186803b158015612a7457600080fd5b505afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac9190615173565b9250925092508263ffffffff1660321415612bd8576000808a73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612b0a57600080fd5b505afa158015612b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4291906150ca565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008873ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614612ba25781612ba4565b825b90506000612bbd61271063ffffffff8088169061413016565b9050612bca828c83614172565b975050505050505050612c3f565b60008673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614612c19578363ffffffff16612c21565b8263ffffffff165b9050612c386064612c328a84612c48565b906141f1565b9450505050505b95945050505050565b600082612c5757506000612c9f565b82820282848281612c6457fe5b0414612c9c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906159ee565b90505b92915050565b600080600080600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eb22d54f600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d8d8b6040518563ffffffff1660e01b8152600401612d3194939291906153f7565b60c06040518083038186803b158015612d4957600080fd5b505afa158015612d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d819190614e1a565b600554949a509298509096509450925073ffffffffffffffffffffffffffffffffffffffff16905063671a11b58a612db98882614130565b612dc3888d614130565b8787876040518763ffffffff1660e01b8152600401612de796959493929190615cfd565b60206040518083038186803b158015612dff57600080fd5b505afa158015612e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e37919061510b565b9b9a5050505050505050505050565b612ee9846323b872dd60e01b858585604051602401612e6793929190615430565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261423d565b50505050565b600080612efc8984613047565b60035473ffffffffffffffffffffffffffffffffffffffff84811691161415612fdd576003546040517fe1f4a78400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e1f4a78490612f83908c908c908c908c908c908c9030904290600401615345565b6040805180830381600087803b158015612f9c57600080fd5b505af1158015612fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd49190615123565b9150915061303b565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063baa2abde90612f83908b908b908b908b908b90309042906004016154d1565b97509795505050505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9061309b9030908590600401615277565b60206040518083038186803b1580156130b357600080fd5b505afa1580156130c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130eb919061510b565b6131305761313073ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6139f6565b6003546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8085169263dd62ed3e926131889230921690600401615277565b60206040518083038186803b1580156131a057600080fd5b505afa1580156131b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d8919061510b565b613223576003546132239073ffffffffffffffffffffffffffffffffffffffff84811691167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6139f6565b5050565b60025460009073ffffffffffffffffffffffffffffffffffffffff87811691161415613278576002546132719073ffffffffffffffffffffffffffffffffffffffff1685876142f3565b5083612c3f565b6040805160018082528183019092526060916020808301908036833701905050905083816000815181106132a857fe5b73ffffffffffffffffffffffffffffffffffffffff9290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050838160008151811061330057fe5b60ff909216602092830291909101909101526003546040517f242e3b9f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8089163192169063242e3b9f90613378908c908c90600190899089908f904290600401615663565b600060405180830381600087803b15801561339257600080fd5b505af11580156133a6573d6000803e3d6000fd5b506133cc9250505073ffffffffffffffffffffffffffffffffffffffff88163182614130565b9998505050505050505050565b600082820183811015612c9c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615847565b60008473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156134935773ffffffffffffffffffffffffffffffffffffffff8416301461348c5761348c73ffffffffffffffffffffffffffffffffffffffff881685886137c7565b5084613709565b6040805160018082528183019092526060916020808301908036833701905050905083816000815181106134c357fe5b73ffffffffffffffffffffffffffffffffffffffff9290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050838160008151811061351b57fe5b60ff909216602092830291909101909101526040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8916906370a0823190613582908a90600401615256565b60206040518083038186803b15801561359a57600080fd5b505afa1580156135ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d2919061510b565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc9f70298b8a8c600188888e426040518963ffffffff1660e01b815260040161363e989796959493929190615461565b600060405180830381600087803b15801561365857600080fd5b505af115801561366c573d6000803e3d6000fd5b50505050613703818973ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016136ad9190615256565b60206040518083038186803b1580156136c557600080fd5b505afa1580156136d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fd919061510b565b90614130565b93505050505b9695505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff841690839060405161374a919061523a565b60006040518083038185875af1925050503d8060008114613787576040519150601f19603f3d011682016040523d82523d6000602084013e61378c565b606091505b50509050806126f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615af0565b6126f18363a9059cbb60e01b8484604051602401612e67929190615606565b60008060006137f58b86613047565b6137ff8a86613047565b60035473ffffffffffffffffffffffffffffffffffffffff868116911614156138e6576003546040517ffbf4513500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063fbf4513590613888908f908f908f908f908f908f908f903390429060040161539b565b606060405180830381600087803b1580156138a257600080fd5b505af11580156138b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138da9190615146565b919450925090506139a0565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063e8e3370090613946908e908e908e908e908e908e903390429060040161551e565b606060405180830381600087803b15801561396057600080fd5b505af1158015613974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139989190615146565b919450925090505b83156139e75760006139b28a85614130565b905080156139c5576139c58c33836142f3565b60006139d18a85614130565b905080156139e4576139e48c33836142f3565b50505b99509950999650505050505050565b801580613aa457506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063dd62ed3e90613a529030908690600401615277565b60206040518083038186803b158015613a6a57600080fd5b505afa158015613a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa2919061510b565b155b613ada576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615c18565b6126f18363095ea7b360e01b8484604051602401612e67929190615606565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613b7e57600080fd5b505afa158015613b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb691906149c7565b73ffffffffffffffffffffffffffffffffffffffff161480613c8057508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613c3057600080fd5b505afa158015613c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c6891906149c7565b73ffffffffffffffffffffffffffffffffffffffff16145b613cb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615810565b60008173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613d1557600080fd5b505afa158015613d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d4d91906149c7565b73ffffffffffffffffffffffffffffffffffffffff1614613deb578873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613dae57600080fd5b505afa158015613dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613de691906149c7565b613e69565b8873ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3157600080fd5b505afa158015613e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e6991906149c7565b90506000613ef78a848b8d73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613eb957600080fd5b505afa158015613ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ef191906149c7565b8b6129f5565b90506000613f088383308e8c6143f5565b905088811015613f44576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061576d565b6000613f508b84614130565b90508473ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613f9a57600080fd5b505af1158015613fae573d6000803e3d6000fd5b5050505050613fc58c868684866001808f8f6137e6565b9e9d5050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415614068576140138147613713565b8173ffffffffffffffffffffffffffffffffffffffff167f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b2478360405161405b929190615cb5565b60405180910390a2613223565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8416906370a08231906140bd903090600401615256565b60206040518083038186803b1580156140d557600080fd5b505afa1580156140e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410d919061510b565b90506111b573ffffffffffffffffffffffffffffffffffffffff841683836137c7565b60008282111561416c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad906158ec565b50900390565b600061417f826002612c48565b6141df614198614191856127106133d9565b8790612c48565b6136fd6141da6141c26141ad886127106133d9565b6141bc6109ed8a6127106133d9565b90612c48565b6141d2886141bc8b619c40612c48565b8a9101612c48565b6146fe565b816141e657fe5b0490505b9392505050565b600080821161422c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615980565b81838161423557fe5b049392505050565b606061429f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166147509092919063ffffffff16565b8051909150156126f157808060200190518101906142bd9190615093565b6126f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615b84565b806142fd576126f1565b60025473ffffffffffffffffffffffffffffffffffffffff848116911614156143d4576002546040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632e1a7d4d90614376908490600401615cac565b600060405180830381600087803b15801561439057600080fd5b505af11580156143a4573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff821630146143cf576143cf8282613713565b6126f1565b6126f173ffffffffffffffffffffffffffffffffffffffff841683836137c7565b60025460009073ffffffffffffffffffffffffffffffffffffffff878116911614156144ec57600254604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691829163d0e30db091899160048082019260009290919082900301818588803b15801561448b57600080fd5b505af115801561449f573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8616301490506144e3576144e373ffffffffffffffffffffffffffffffffffffffff821686886137c7565b85915050612c3f565b60408051600180825281830190925260609160208083019080368337019050509050838160008151811061451c57fe5b73ffffffffffffffffffffffffffffffffffffffff9290921660209283029190910190910152604080516001808252818301909252606091816020016020820280368337019050509050838160008151811061457457fe5b60ff909216602092830291909101909101526040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8a16906370a08231906145db908a90600401615256565b60206040518083038186803b1580156145f357600080fd5b505afa158015614607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061462b919061510b565b6003546040517f752ebb7c00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063752ebb7c908a9061468f908d90600190899089908f9042906004016155a7565b6000604051808303818588803b1580156146a857600080fd5b505af11580156146bc573d6000803e3d6000fd5b50505050506133cc818a73ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016136ad9190615256565b60006003821115614741575080600160028204015b8181101561473b5780915060028182858161472a57fe5b04018161473357fe5b049050614713565b5061474b565b811561474b575060015b919050565b606061475f8484600085614767565b949350505050565b6060824710156147a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615923565b6147ac85614869565b6147e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90615ab9565b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161480c919061523a565b60006040518083038185875af1925050503d8060008114614849576040519150601f19603f3d011682016040523d82523d6000602084013e61484e565b606091505b509150915061485e82828661486f565b979650505050505050565b3b151590565b6060831561487e5750816141ea565b82511561488e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad919061571c565b8035612c9f81615da4565b60008083601f8401126148de578182fd5b50813567ffffffffffffffff8111156148f5578182fd5b602083019150836020808302850101111561490f57600080fd5b9250929050565b600060808284031215614927578081fd5b50919050565b60006080828403121561493e578081fd5b6149486080615d31565b9050813561495581615da4565b8152602082013561496581615da4565b80602083015250604082013560408201526060820135606082015292915050565b805163ffffffff81168114612c9f57600080fd5b803560ff81168114612c9f57600080fd5b6000602082840312156149bc578081fd5b8135612c9c81615da4565b6000602082840312156149d8578081fd5b8151612c9c81615da4565b60008060008060008060008060006101e08a8c031215614a01578485fd5b8935614a0c81615da4565b985060208a0135614a1c81615da4565b9750614a2b8b60408c01614916565b9650614a3a8b60c08c01614916565b95506101408a013594506101608a01359350614a5a8b6101808c0161499a565b92506101a08a013591506101c08a013590509295985092959850929598565b60008060008060006101608688031215614a91578081fd5b8535614a9c81615da4565b94506020860135614aac81615da4565b9350614abb876040880161492d565b9250614aca8760c08801614916565b94979396509194610140013592915050565b600080600060608486031215614af0578283fd5b8335614afb81615da4565b92506020840135614b0b81615da4565b929592945050506040919091013590565b600080600080600080600060c0888a031215614b36578081fd5b8735614b4181615da4565b9650602088013567ffffffffffffffff811115614b5c578182fd5b614b688a828b016148cd565b9097509550506040880135614b7c81615da4565b9350614b8b8960608a0161499a565b92506080880135614b9b81615da4565b915060a0880135614bab81615dc9565b8091505092959891949750929550565b60008060408385031215614bcd578182fd5b8235614bd881615da4565b91506020830135614be881615dc9565b809150509250929050565b600080600060608486031215614c07578081fd5b8335614c1281615da4565b9250602084013591506040840135614c2981615da4565b809150509250925092565b600080600080600080600080610100898b031215614c50578182fd5b8835614c5b81615da4565b9750602089013596506040890135614c7281615da4565b9550606089013594506080890135935060a089013560ff81168114614c95578283fd5b979a969950949793969295929450505060c08201359160e0013590565b60008060008060008060c08789031215614cca578384fd5b8635614cd581615da4565b9550602087013594506040870135614cec81615da4565b935060608701359250614d02886080890161499a565b915060a0870135614d1281615da4565b809150509295509295509295565b60008060008060008060008060008060006101608c8e031215614d41578485fd5b8b35614d4c81615da4565b9a5060208c0135995060408c0135614d6381615da4565b985060608c01359750614d798d60808e0161499a565b965060a08c0135614d8981615da4565b955060c08c0135945060e08c01359350614da78d6101008e0161499a565b92506101208c013591506101408c013590509295989b509295989b9093969950565b60008060008060808587031215614dde578182fd5b8435614de981615da4565b9350602085013592506040850135614e0081615da4565b9150614e0f866060870161499a565b905092959194509250565b60008060008060008060c08789031215614e32578384fd5b8651614e3d81615da4565b8096505060208701519450604087015193506060870151614e5d81615df3565b6080880151909350614e6e81615df3565b60a0880151909250614d1281615df3565b60008060008060008060c08789031215614e97578384fd5b8635614ea281615da4565b95506020870135945060408701359350614ebf886060890161499a565b92506080870135614ecf81615da4565b915060a0870135614d1281615dc9565b60008060408385031215614ef1578182fd5b823567ffffffffffffffff811115614f07578283fd5b8301601f81018513614f17578283fd5b8035614f2a614f2582615d58565b615d31565b808282526020808301925080850189828387028801011115614f4a578788fd5b8795505b84861015614f7457614f608a826148c2565b845260019590950194928101928101614f4e565b50819650614f8489828a016148c2565b955050505050509250929050565b600080600080600060608688031215614fa9578283fd5b853567ffffffffffffffff80821115614fc0578485fd5b614fcc89838a016148cd565b90975095506020880135915080821115614fe4578485fd5b50614ff1888289016148cd565b96999598509660400135949350505050565b60006020808385031215615015578182fd5b825167ffffffffffffffff81111561502b578283fd5b8301601f8101851361503b578283fd5b8051615049614f2582615d58565b8181528381019083850185840285018601891015615065578687fd5b8694505b83851015615087578051835260019490940193918501918501615069565b50979650505050505050565b6000602082840312156150a4578081fd5b8151612c9c81615dc9565b6000608082840312156150c0578081fd5b6141ea838361492d565b6000806000606084860312156150de578081fd5b83516150e981615dd7565b60208501519093506150fa81615dd7565b6040850151909250614c2981615df3565b60006020828403121561511c578081fd5b5051919050565b60008060408385031215615135578182fd5b505080516020909101519092909150565b60008060006060848603121561515a578081fd5b8351925060208401519150604084015190509250925092565b600080600060608486031215615187578081fd5b6151918585614986565b92506151a08560208601614986565b91506151af8560408601614986565b90509250925092565b6000815180845260208085019450808401835b838110156151fd57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016151cb565b509495945050505050565b6000815180845260208085019450808401835b838110156151fd57815160ff168752958201959082019060010161521b565b6000825161524c818460208701615d78565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015260c0608083015261533360c08301856151b8565b82810360a08401526133cc8185615208565b73ffffffffffffffffffffffffffffffffffffffff9889168152968816602088015294871660408701526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b73ffffffffffffffffffffffffffffffffffffffff998a168152978916602089015295881660408801526060870194909452608086019290925260a085015260c084015290921660e08201526101008101919091526101200190565b73ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529216604082015260ff909116606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600061010073ffffffffffffffffffffffffffffffffffffffff808c168452808b1660208501528960408501528860608501528160808501526154a6828501896151b8565b915083820360a08501526154ba8288615208565b951660c0840152505060e001529695505050505050565b73ffffffffffffffffffffffffffffffffffffffff9788168152958716602087015260408601949094526060850192909252608084015290921660a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff9889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b73ffffffffffffffffffffffffffffffffffffffff938416815291909216602082015260ff909116604082015260600190565b600073ffffffffffffffffffffffffffffffffffffffff808916835287602084015260c060408401526155dd60c08401886151b8565b83810360608501526155ef8188615208565b959091166080840152505060a00152949350505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152602081019390935292166040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015260e0606084015261569f60e08401886151b8565b83810360808501526156b18188615208565b9590911660a0840152505060c0015295945050505050565b73ffffffffffffffffffffffffffffffffffffffff9687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b901515815260200190565b600060208252825180602084015261573b816040850160208701615d78565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252818101527f5a61703a20496e73756666696369656e74205265636569766520416d6f756e74604082015260600190565b6020808252600d908201527f5a61703a202170616972424e4200000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f5a61703a20446f206e6f742073656e6420455448206469726563746c79000000604082015260600190565b60208082526015908201527f46697265426972645a61703a202170616972424e420000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526010908201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604082015260600190565b60208082526016908201527f5a61703a204869676820536c697070616765204f757400000000000000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600e908201527f5a61703a20217265636569766572000000000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f5a61703a2021726f757465720000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f5a61703a204869676820536c69707061676520496e0000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201527f4c45440000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f5a61703a20217061697200000000000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60208082526019908201527f5a61703a20496e636f6d70617469626c6520666163746f727900000000000000604082015260600190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b60405181810167ffffffffffffffff81118282101715615d5057600080fd5b604052919050565b600067ffffffffffffffff821115615d6e578081fd5b5060209081020190565b60005b83811015615d93578181015183820152602001615d7b565b83811115612ee95750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114615dc657600080fd5b50565b8015158114615dc657600080fd5b6dffffffffffffffffffffffffffff81168114615dc657600080fd5b63ffffffff81168114615dc657600080fdfea264697066735822122024f7074631e44aba1957f037b0ab8cd30c818b59a8c606da2b06e3cb2a3837fc64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "manualApproveAllowance(address[],address[],uint256)": {
        "details": "Use only for some special tokens"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1739,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1792,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1794,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "WBNB",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1802,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFireBirdRouter)5888"
      },
      {
        "astId": 1804,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1806,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdFormula",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IFireBirdFormula)5173"
      },
      {
        "astId": 1810,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "whitelistUniRouter",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFireBirdFormula)5173": {
        "encoding": "inplace",
        "label": "contract IFireBirdFormula",
        "numberOfBytes": "20"
      },
      "t_contract(IFireBirdRouter)5888": {
        "encoding": "inplace",
        "label": "contract IFireBirdRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}