{
  "address": "0xA572506d8F496Bb61A7b63d23f607873407B7bA8",
  "abi": [
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "timelock",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakePoolRewardFund",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5863682aead5e99f0727f3c95102b43c520541d5bf72ff3ef3ed3986850b987",
  "receipt": {
    "to": null,
    "from": "0x7a1a8Ecd640bB8399DB2c5265A45AD8a91BF63CC",
    "contractAddress": "0xA572506d8F496Bb61A7b63d23f607873407B7bA8",
    "transactionIndex": 4,
    "gasUsed": "2469516",
    "logsBloom": "0x
    "blockHash": "0x776c7c9296e49dfebe63b1076ed455a56b6762fc053e6b2ba6e400d1c3a7d42e",
    "transactionHash": "0xb5863682aead5e99f0727f3c95102b43c520541d5bf72ff3ef3ed3986850b987",
    "logs": [],
    "blockNumber": 8925217,
    "cumulativeGasUsed": "2670094",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c28cb5271196bace7e8af8d0cd8648a7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakePoolRewardFund\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakePoolEpochRewardCreator.sol\":\"StakePoolEpochRewardCreator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/StakePoolEpochReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./interfaces/IEpochController.sol\\\";\\nimport \\\"./interfaces/IStakePoolEpochReward.sol\\\";\\nimport \\\"./interfaces/IStakePoolController.sol\\\";\\nimport \\\"./interfaces/IStakePoolRewardRebaser.sol\\\";\\nimport \\\"./interfaces/IStakePoolRewardMultiplier.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport './libraries/TransferHelper.sol';\\nimport \\\"./interfaces/IStakePoolRewardFund.sol\\\";\\n\\n// This implements BPool contract, and allows for generalized staking, yield farming (by epoch), and token distribution.\\ncontract StakePoolEpochReward is IStakePoolEpochReward {\\n    using SafeMath for uint;\\n    uint public override version;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 lastSnapshotIndex;\\n        uint256 rewardEarned;\\n        uint256 epochTimerStart;\\n    }\\n\\n    struct Snapshot {\\n        uint256 time;\\n        uint256 rewardReceived;\\n        uint256 rewardPerShare;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address public override epochController;\\n    address public override rewardToken;\\n\\n    uint256 public withdrawLockupEpochs;\\n    uint256 public rewardLockupEpochs;\\n\\n    mapping(address => UserInfo) public userInfo;\\n    Snapshot[] public snapshotHistory;\\n\\n    address public override stakeToken;\\n    address public override rewardFund;\\n    address public timelock;\\n    address public controller;\\n\\n    uint public balance;\\n    uint private _unlocked = 1;\\n    bool private _initialized = false;\\n    uint256 public constant BLOCKS_PER_DAY = 28800;\\n\\n    constructor(address _controller, uint _version) public {\\n        controller = _controller;\\n        timelock = msg.sender;\\n        version = _version;\\n        Snapshot memory genesisSnapshot = Snapshot({time : block.number, rewardReceived : 0, rewardPerShare : 0});\\n        snapshotHistory.push(genesisSnapshot);\\n    }\\n\\n    modifier lock() {\\n        require(_unlocked == 1, 'StakePoolEpochReward: LOCKED');\\n        _unlocked = 0;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n    modifier onlyTimeLock() {\\n        require(msg.sender == timelock, \\\"StakePoolEpochReward: !timelock\\\");\\n        _;\\n    }\\n\\n    modifier onlyEpochController() {\\n        require(msg.sender == epochController, \\\"StakePoolEpochReward: !epochController\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(address _account) {\\n        if (_account != address(0)) {\\n            UserInfo storage user = userInfo[_account];\\n            user.rewardEarned = earned(_account);\\n            user.lastSnapshotIndex = latestSnapshotIndex();\\n        }\\n        _;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _stakeToken, address _rewardFund, address _timelock, address _epochController, address _rewardToken,  uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external {\\n        require(_initialized == false, \\\"StakePoolEpochReward: Initialize must be false.\\\");\\n        stakeToken = _stakeToken;\\n        rewardToken = _rewardToken;\\n        rewardFund = _rewardFund;\\n        setEpochController(_epochController);\\n        setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\\n        timelock = _timelock;\\n        _initialized = true;\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function setEpochController(address _epochController) public override lock onlyTimeLock {\\n        epochController = _epochController;\\n        epoch();\\n        nextEpochPoint();\\n        nextEpochLength();\\n        nextEpochAllocatedReward();\\n    }\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) public override lock onlyTimeLock {\\n        require(_withdrawLockupEpochs >= _rewardLockupEpochs && _withdrawLockupEpochs <= 56, \\\"_withdrawLockupEpochs: out of range\\\"); // <= 2 week\\n        withdrawLockupEpochs = _withdrawLockupEpochs;\\n        rewardLockupEpochs = _rewardLockupEpochs;\\n    }\\n\\n    function allocateReward(uint256 _amount) external override lock onlyEpochController {\\n        require(_amount > 0, \\\"StakePoolEpochReward: Cannot allocate 0\\\");\\n        uint256 _before = IERC20(rewardToken).balanceOf(address(rewardFund));\\n        TransferHelper.safeTransferFrom(rewardToken, msg.sender, rewardFund, _amount);\\n        if (balance > 0) {\\n            uint256 _after = IERC20(rewardToken).balanceOf(address(rewardFund));\\n            _amount = _after.sub(_before);\\n\\n            // Create & add new snapshot\\n            uint256 _prevRPS = getLatestSnapshot().rewardPerShare;\\n            uint256 _nextRPS = _prevRPS.add(_amount.mul(1e18).div(balance));\\n\\n            Snapshot memory _newSnapshot = Snapshot({\\n                time: block.number,\\n                rewardReceived: _amount,\\n                rewardPerShare: _nextRPS\\n            });\\n            emit AllocateReward(block.number, _amount);\\n            snapshotHistory.push(_newSnapshot);\\n        }\\n    }\\n\\n    function allowRecoverRewardToken(address _token) external view override returns (bool) {\\n        if (rewardToken == _token) {\\n            // do not allow to drain reward token if less than 1 week after LatestSnapshot\\n            if (block.number < (getLatestSnapshot().time + (BLOCKS_PER_DAY * 7))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    // =========== Epoch getters\\n\\n    function epoch() public override view returns (uint256) {\\n        return IEpochController(epochController).epoch();\\n    }\\n\\n    function nextEpochPoint() public override view returns (uint256) {\\n        return IEpochController(epochController).nextEpochPoint();\\n    }\\n\\n    function nextEpochLength() public override view returns (uint256) {\\n        return IEpochController(epochController).nextEpochLength();\\n    }\\n\\n    function nextEpochAllocatedReward() public override view returns (uint256) {\\n        return IEpochController(epochController).nextEpochAllocatedReward(address(this));\\n    }\\n\\n    // =========== Snapshot getters\\n\\n    function latestSnapshotIndex() public view returns (uint256) {\\n        return snapshotHistory.length.sub(1);\\n    }\\n\\n    function getLatestSnapshot() internal view returns (Snapshot memory) {\\n        return snapshotHistory[latestSnapshotIndex()];\\n    }\\n\\n    function getLastSnapshotIndexOf(address _account) public view returns (uint256) {\\n        return userInfo[_account].lastSnapshotIndex;\\n    }\\n\\n    function getLastSnapshotOf(address _account) internal view returns (Snapshot memory) {\\n        return snapshotHistory[getLastSnapshotIndexOf(_account)];\\n    }\\n\\n    // =========== _account getters\\n\\n    function rewardPerShare() public view returns (uint256) {\\n        return getLatestSnapshot().rewardPerShare;\\n    }\\n\\n    function earned(address _account) public override view returns (uint256) {\\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 storedRPS = getLastSnapshotOf(_account).rewardPerShare;\\n\\n        UserInfo memory user = userInfo[_account];\\n        return user.amount.mul(latestRPS.sub(storedRPS)).div(1e18).add(user.rewardEarned);\\n    }\\n\\n    function canWithdraw(address _account) external view returns (bool) {\\n        return userInfo[_account].epochTimerStart.add(withdrawLockupEpochs) <= epoch();\\n    }\\n\\n    function canClaimReward(address _account) external view returns (bool) {\\n        return userInfo[_account].epochTimerStart.add(rewardLockupEpochs) <= epoch();\\n    }\\n\\n    function unlockWithdrawEpoch(address _account) public override view returns (uint) {\\n        return userInfo[_account].epochTimerStart.add(withdrawLockupEpochs);\\n    }\\n\\n    function unlockRewardEpoch(address _account) public override view returns (uint) {\\n        return userInfo[_account].epochTimerStart.add(rewardLockupEpochs);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint _amount) external lock override {\\n        TransferHelper.safeTransferFrom(stakeToken, msg.sender, address(this), _amount);\\n        _stakeFor(msg.sender);\\n    }\\n\\n    function stakeFor(address _account) external lock override {\\n        require(IStakePoolController(controller).isWhitelistStakingFor(msg.sender), \\\"StakePoolEpochReward: Invalid sender\\\");\\n        _stakeFor(_account);\\n    }\\n\\n    function _stakeFor(address _account) internal {\\n        uint _amount = IERC20(stakeToken).balanceOf(address(this)).sub(balance);\\n        require(_amount > 0, \\\"StakePoolEpochReward: Invalid balance\\\");\\n        balance = balance.add(_amount);\\n        UserInfo storage user = userInfo[_account];\\n        user.epochTimerStart = epoch(); // reset timer\\n        user.amount = user.amount.add(_amount);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    function removeStakeInternal(uint _amount) internal {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 _epoch = epoch();\\n        require(user.epochTimerStart.add(withdrawLockupEpochs) <= _epoch, \\\"StakePoolEpochReward: still in withdraw lockup\\\");\\n        require(user.amount >= _amount, \\\"StakePoolEpochReward: invalid withdraw amount\\\");\\n        _claimReward(false);\\n        balance = balance.sub(_amount);\\n        user.epochTimerStart = _epoch; // reset timer\\n        user.amount = user.amount.sub(_amount);\\n    }\\n\\n    function withdraw(uint _amount) public lock override {\\n        removeStakeInternal(_amount);\\n        TransferHelper.safeTransfer(stakeToken, msg.sender, _amount);\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(userInfo[msg.sender].amount);\\n    }\\n\\n    function _claimReward(bool _lockChecked) internal updateReward(msg.sender) {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 _reward = user.rewardEarned;\\n        if (_reward > 0) {\\n            if (_lockChecked) {\\n                uint256 _epoch = epoch();\\n                require(user.epochTimerStart.add(rewardLockupEpochs) <= _epoch, \\\"StakePoolEpochReward: still in reward lockup\\\");\\n                user.epochTimerStart = _epoch; // reset timer\\n            }\\n            user.rewardEarned = 0;\\n            // Safe reward transfer, just in case if rounding error causes pool to not have enough reward amount\\n            uint256 _rewardBalance = IERC20(rewardToken).balanceOf(rewardFund);\\n            uint256 _paidAmount = _rewardBalance > _reward ? _reward : _rewardBalance;\\n            IStakePoolRewardFund(rewardFund).safeTransfer(rewardToken, msg.sender, _paidAmount);\\n            emit PayRewardPool(0, rewardToken, msg.sender, _reward, _reward, _paidAmount);\\n        }\\n    }\\n\\n    function claimReward() public override {\\n        _claimReward(true);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw() external lock override {\\n        require(IStakePoolController(controller).isAllowEmergencyWithdrawStakePool(address(this)),\\\"StakePoolEpochReward: Not allow emergencyWithdraw\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint amount = user.amount;\\n        balance = balance.sub(amount);\\n        user.amount = 0;\\n        user.rewardEarned = 0;\\n        TransferHelper.safeTransfer(stakeToken, msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6293cafbd15fa9cc0ec55be2925baaf18516534c3bf8f12fce1f346998d3c66d\",\"license\":\"MIT\"},\"contracts/StakePoolEpochRewardCreator.sol\":{\"content\":\"pragma abicoder v2;\\npragma solidity >=0.7.6;\\n\\nimport './interfaces/IStakePoolCreator.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './TimeLock.sol';\\nimport './StakePoolEpochReward.sol';\\n\\ncontract StakePoolEpochRewardCreator is IStakePoolCreator {\\n    uint public override version = 4001;\\n    struct PoolRewardInfo {\\n        address epochController;\\n        uint256 withdrawLockupEpochs;\\n        uint256 rewardLockupEpochs;\\n\\n    }\\n    function create() external override returns (address) {\\n        StakePoolEpochReward pool = new StakePoolEpochReward(msg.sender, version);\\n        return address(pool);\\n    }\\n    function initialize(address poolAddress, address pair, address rewardToken, address timelock, address stakePoolRewardFund, bytes calldata data) external override {\\n        StakePoolEpochReward pool = StakePoolEpochReward(poolAddress);\\n//\\n        PoolRewardInfo memory poolRewardInfo = abi.decode(data,(PoolRewardInfo));\\n        pool.initialize(\\n            pair,\\n            address(stakePoolRewardFund),\\n            address(timelock),\\n            poolRewardInfo.epochController,\\n            rewardToken,\\n            poolRewardInfo.withdrawLockupEpochs,\\n            poolRewardInfo.rewardLockupEpochs\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9363ad6bf56eef76d2fe38317fb14e611de8ae6bfb1380aed1609b52860a67f2\"},\"contracts/TimeLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract TimeLock {\\n    using SafeMath for uint256;\\n    event NewAdmin(address indexed newAdmin);\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\n    event NewDelay(uint indexed newDelay);\\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n\\n    uint public constant GRACE_PERIOD = 14 days;\\n    uint public constant MINIMUM_DELAY = 1 days;\\n    uint public constant MAXIMUM_DELAY = 30 days;\\n    bool private _initialized;\\n    address public admin;\\n    address public pendingAdmin;\\n    uint public delay;\\n    bool public admin_initialized;\\n    mapping(bytes32 => bool) public queuedTransactions;\\n\\n    constructor() public {\\n        admin_initialized = false;\\n        _initialized = false;\\n    }\\n\\n    function initialize(address _admin, uint _delay) public {\\n        require(_initialized == false, \\\"Timelock::constructor: Initialized must be false.\\\");\\n        require(_delay >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(_delay <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n        delay = _delay;\\n        admin = _admin;\\n        _initialized = true;\\n        emit NewAdmin(admin);\\n        emit NewDelay(delay);\\n    }\\n\\n    receive() external payable {}\\n\\n    function setDelay(uint _delay) public {\\n        require(msg.sender == address(this), \\\"Timelock::setDelay: Call must come from Timelock.\\\");\\n        require(_delay >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(_delay <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n        delay = _delay;\\n        emit NewDelay(delay);\\n    }\\n\\n    function acceptAdmin() public {\\n        require(msg.sender == pendingAdmin, \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\");\\n        admin = msg.sender;\\n        pendingAdmin = address(0);\\n        emit NewAdmin(admin);\\n    }\\n\\n    function setPendingAdmin(address _pendingAdmin) public {\\n        // allows one time setting of admin for deployment purposes\\n        if (admin_initialized) {\\n            require(msg.sender == address(this), \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\");\\n        } else {\\n            require(msg.sender == admin, \\\"Timelock::setPendingAdmin: First call must come from admin.\\\");\\n            admin_initialized = true;\\n        }\\n        pendingAdmin = _pendingAdmin;\\n\\n        emit NewPendingAdmin(pendingAdmin);\\n    }\\n\\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\\n        require(msg.sender == admin, \\\"Timelock::queueTransaction: Call must come from admin.\\\");\\n        require(eta >= getBlockTimestamp().add(delay), \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = true;\\n\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = false;\\n\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\n    }\\n\\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\\n        require(msg.sender == admin, \\\"Timelock::executeTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        require(queuedTransactions[txHash], \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\");\\n        require(getBlockTimestamp() >= eta, \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\");\\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \\\"Timelock::executeTransaction: Transaction is stale.\\\");\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call{value : value}(callData);\\n        require(success, \\\"Timelock::executeTransaction: Transaction execution reverted.\\\");\\n\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\n\\n        return returnData;\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xd96d2ee9b62c0dde565a53d45bef1859a2a501d9b193769684079b28e85b1d4f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdc30fa248655dc9936342ff8f8d2c4669143123013acdea9fa04b234540a0763\"},\"contracts/interfaces/IEpochController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6;\\n\\ninterface IEpochController {\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function nextEpochLength() external view returns (uint256);\\n\\n    function nextEpochAllocatedReward(address _pool) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1ce96eb81a65102e02182c8b92bacddd4476eb9bdcd99fcb5e2c2bbc2940f1a5\",\"license\":\"MIT\"},\"contracts/interfaces/IStakePoolController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma abicoder v2;\\npragma solidity 0.7.6;\\n\\ninterface IStakePoolController {\\n    event MasterCreated(address indexed farm, address indexed stakeToken, uint version, address timelock, address stakePoolRewardFund, uint totalStakePool);\\n    event SetWhitelistStakingFor(address indexed contractAddress, bool value);\\n    event SetWhitelistStakePool(address indexed contractAddress, int8 value);\\n    event SetStakePoolCreator(address indexed contractAddress, uint verion);\\n    event SetWhitelistRewardRebaser(address indexed contractAddress, bool value);\\n    event SetWhitelistRewardMultiplier(address indexed contractAddress, bool value);\\n    event SetStakePoolVerifier(address indexed contractAddress, bool value);\\n    event ChangeGovernance(address indexed governance);\\n    event SetFeeCollector(address indexed feeCollector);\\n    event SetFeeToken(address indexed token);\\n    event SetFeeAmount(uint indexed amount);\\n    event SetExtraFeeRate(uint indexed amount);\\n\\n\\n\\n    function allStakePools(uint) external view returns (address stakePool);\\n\\n    function isStakePool(address contractAddress) external view returns (bool);\\n    function isStakePoolVerifier(address contractAddress) external view returns (bool);\\n\\n    function isWhitelistStakingFor(address contractAddress) external view returns (bool);\\n    function isWhitelistStakePool(address contractAddress) external view returns (int8);\\n    function setStakePoolVerifier(address contractAddress, bool state) external;\\n    function setWhitelistStakingFor(address contractAddress, bool state) external;\\n\\n    function setWhitelistStakePool(address contractAddress, int8 state) external;\\n    function addStakePoolCreator(address contractAddress) external;\\n\\n    function isWhitelistRewardRebaser(address contractAddress) external view returns (bool);\\n    function isAllowEmergencyWithdrawStakePool(address _address) external view returns (bool);\\n    function setWhitelistRewardRebaser(address contractAddress, bool state) external;\\n\\n    function isWhitelistRewardMultiplier(address contractAddress) external view returns (bool);\\n    function setAllowEmergencyWithdrawStakePool(address _address, bool state) external;\\n    function setWhitelistRewardMultiplier(address contractAddress, bool state) external;\\n    function setEnableWhitelistRewardRebaser(bool value) external;\\n    function setEnableWhitelistRewardMultiplier(bool value) external;\\n    function allStakePoolsLength() external view returns (uint);\\n\\n    function create(uint version, address stakeToken, address rewardToken, uint rewardFundAmount, uint delayTimeLock, bytes calldata data) external returns (address);\\n\\n    function setGovernance(address) external;\\n\\n    function setFeeCollector(address _address) external;\\n    function setFeeToken(address _token) external;\\n    function setFeeAmount(uint _token) external;\\n    function setExtraFeeRate(uint _extraFeeRate) external;\\n\\n}\",\"keccak256\":\"0xf7ffd995740a98ba1e193fcedd2b0cabc0142842b8bedd14b8d6ec2945620fca\",\"license\":\"MIT\"},\"contracts/interfaces/IStakePoolCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma abicoder v2;\\npragma solidity 0.7.6;\\n\\ninterface IStakePoolCreator {\\n    function version() external returns (uint);\\n\\n    function create() external returns (address);\\n    function initialize(address poolAddress, address pair, address rewardToken, address timelock, address stakePoolRewardFund, bytes calldata data) external;\\n}\",\"keccak256\":\"0xfed47bcfc5ef51c4ed3dc252af2ed48b176f074670af2e9956d744578e6f2e73\",\"license\":\"MIT\"},\"contracts/interfaces/IStakePoolEpochReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IStakePoolEpochReward {\\n    event AllocateReward(uint256 blocktime, uint256 amount);\\n    event Deposit(address indexed account, uint256 amount);\\n    event PayRewardPool(uint256 indexed poolId, address indexed rewardToken, address indexed account, uint256 pendingReward, uint256 rebaseAmount, uint256 paidReward);\\n    event Withdraw(address indexed account, uint256 amount);\\n\\n    function version() external view returns (uint256);\\n    function stakeToken() external view returns (address);\\n    function rewardToken() external view returns (address);\\n    function rewardFund() external view returns (address);\\n    function epochController() external view returns (address);\\n\\n    function allowRecoverRewardToken(address _token) external view returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function nextEpochLength() external view returns (uint256);\\n\\n    function nextEpochAllocatedReward() external view returns (uint256);\\n\\n    function earned(address _account) external view returns (uint256);\\n\\n    function unlockWithdrawEpoch(address _account) external view returns (uint256);\\n\\n    function unlockRewardEpoch(address _account) external view returns (uint256);\\n\\n    function stake(uint256) external;\\n\\n    function stakeFor(address _account) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function claimReward() external;\\n\\n    function emergencyWithdraw() external;\\n\\n    function setEpochController(address) external;\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\\n\\n    function allocateReward(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5eded20a9f883975d15cff36b5a3c1f044f5406babedf5052be9f4f66bb83c35\",\"license\":\"MIT\"},\"contracts/interfaces/IStakePoolRewardFund.sol\":{\"content\":\"interface IStakePoolRewardFund {\\n    function initialize(address _stakePool, address _timelock) external;\\n\\n    function safeTransfer(address _token, address _to, uint _value) external;\\n}\",\"keccak256\":\"0x0ba19508fd5db0749996e0828d7993e163b24e5e107731e47e6754224ec1cfe0\"},\"contracts/interfaces/IStakePoolRewardMultiplier.sol\":{\"content\":\"interface IStakePoolRewardMultiplier {\\n    function getRewardMultiplier(uint _start, uint _end, uint _from, uint _to, uint _rewardPerBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xd9b5d72f9396bf0bdeaef53896bba463a235b4948c234d6339195d82761e6ef8\"},\"contracts/interfaces/IStakePoolRewardRebaser.sol\":{\"content\":\"interface IStakePoolRewardRebaser {\\n    function getRebaseAmount(address rewardToken, uint baseAmount) external view returns (uint);\\n}\",\"keccak256\":\"0x899c8012550ec4aad61f760951bc926aa65629cf8e29cd15be29f73e14e36b1b\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x771a09cfe236d26cfbfd1b048a0d68bd37710260efddfc9b175db51d8cd96b4f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052610fa160005534801561001657600080fd5b50612b95806100266000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301f79fb61461004657806354fd4d501461005b578063efc81a8c14610079575b600080fd5b6100596100543660046101aa565b61008e565b005b61006361012d565b604051610070919061035c565b60405180910390f35b610081610133565b60405161007091906102c5565b86600061009d8385018561026b565b90508173ffffffffffffffffffffffffffffffffffffffff1663b33f952789878985600001518c876020015188604001516040518863ffffffff1660e01b81526004016100f0979695949392919061030c565b600060405180830381600087803b15801561010a57600080fd5b505af115801561011e573d6000803e3d6000fd5b50505050505050505050505050565b60005481565b6000803360005460405161014690610174565b6101519291906102e6565b604051809103906000f08015801561016d573d6000803e3d6000fd5b5091505090565b6127fa8061036683390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146101a557600080fd5b919050565b600080600080600080600060c0888a0312156101c4578283fd5b6101cd88610181565b96506101db60208901610181565b95506101e960408901610181565b94506101f760608901610181565b935061020560808901610181565b925060a088013567ffffffffffffffff80821115610221578384fd5b818a0191508a601f830112610234578384fd5b813581811115610242578485fd5b8b6020828501011115610253578485fd5b60208301945080935050505092959891949750929550565b60006060828403121561027c578081fd5b6040516060810181811067ffffffffffffffff8211171561029957fe5b6040526102a583610181565b815260208301356020820152604083013560408201528091505092915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9788168152958716602087015293861660408601529185166060850152909316608083015260a082019290925260c081019190915260e00190565b9081526020019056fe60806040526001600c55600d805460ff1916905534801561001f57600080fd5b506040516127fa3803806127fa8339818101604052604081101561004257600080fd5b508051602091820151600a80546001600160a01b039093166001600160a01b0319938416179055600980549092163317909155600090815560408051606081018252438152928301828152908301828152600680546001810182559352925160039092027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810192909255517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41909101556126d2806101286000396000f3fe608060405234801561001057600080fd5b506004361061025b5760003560e01c80635a9c064411610145578063c5967c26116100bd578063e7d80e311161008c578063efe2226611610071578063efe2226614610671578063f77c479114610679578063f7c618c1146106815761025b565b8063e7d80e3114610636578063e9fad8ee146106695761025b565b8063c5967c2614610601578063d33219b414610609578063db2e21bc14610611578063e2dcb616146106195761025b565b8063900cf0cf11610114578063b33f9527116100f9578063b33f952714610592578063b69ef8a8146105f1578063b88a802f146105f95761025b565b8063900cf0cf1461056d578063a694fc3a146105755761025b565b80635a9c0644146104cc57806362e7e463146104ff5780636bb987fe14610532578063714b46581461053a5761025b565b806322455618116101d85780633f9e3f04116101a75780634bf692061161018c5780634bf692061461048957806351ed6a30146104bc57806354fd4d50146104c45761025b565b80633f9e3f0414610479578063446a2ec8146104815761025b565b806322455618146103fc5780632e1a7d4d146104045780632ffaaa09146104235780633468a5b8146104465761025b565b806307284ce91161022f57806319262d301161021457806319262d30146103685780631959a0021461039b5780631e85cd65146103f45761025b565b806307284ce91461032557806311815a391461032d5761025b565b80628cc26214610260578063022ba18d146102a557806303df4868146102ad578063046335d0146102de575b600080fd5b6102936004803603602081101561027657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610689565b60408051918252519081900360200190f35b61029361073e565b6102b5610744565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610311600480360360208110156102f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610760565b604080519115158252519081900360200190f35b6102936107a7565b61034a6004803603602081101561034357600080fd5b5035610843565b60408051938452602084019290925282820152519081900360600190f35b6103116004803603602081101561037e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610876565b6103ce600480360360208110156103b157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108b6565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6102936108dd565b6102936108e3565b6104216004803603602081101561041a57600080fd5b5035610954565b005b6104216004803603604081101561043957600080fd5b5080359060200135610a35565b6103116004803603602081101561045c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ba7565b610293610bf2565b610293610c08565b6104216004803603602081101561049f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c1b565b6102b5610d94565b610293610db0565b610421600480360360208110156104e257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610db6565b6102936004803603602081101561051557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f1e565b610293610f5c565b6102936004803603602081101561055057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f62565b610293610f8d565b6104216004803603602081101561058b57600080fd5b5035610ff8565b610421600480360360e08110156105a857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013581169160608101358216916080820135169060a08101359060c0013561109c565b6102936111e6565b6104216111ec565b6102936111f8565b6102b5611263565b61042161127f565b6104216004803603602081101561062f57600080fd5b5035611436565b6102936004803603602081101561064c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611839565b61042161186f565b6102b5611888565b6102b56118a4565b6102b56118c0565b6000806106946118dc565b60400151905060006106a584611934565b60409081015173ffffffffffffffffffffffffffffffffffffffff8616600090815260056020908152908390208351608081018552815481526001820154928101929092526002810154938201849052600301546060820152909250906107339061072d670de0b6b3a764000061072761071f888861198f565b865190611a06565b90611a80565b90611b01565b93505050505b919050565b60045481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600061076a610f8d565b60045473ffffffffffffffffffffffffffffffffffffffff841660009081526005602052604090206003015461079f91611b01565b111592915050565b600154604080517f07284ce9000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916307284ce9916004808301926020929190829003018186803b15801561081257600080fd5b505afa158015610826573d6000803e3d6000fd5b505050506040513d602081101561083c57600080fd5b5051905090565b6006818154811061085357600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b6000610880610f8d565b6003805473ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090209091015461079f91611b01565b60056020526000908152604090208054600182015460028301546003909301549192909184565b60035481565b600154604080517f7effa5b6000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff1691637effa5b6916024808301926020929190829003018186803b15801561081257600080fd5b600c546001146109c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c556109d381611b75565b6007546109f79073ffffffffffffffffffffffffffffffffffffffff163383611c8e565b60408051828152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2506001600c55565b600c54600114610aa657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c5560095473ffffffffffffffffffffffffffffffffffffffff163314610b3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5374616b65506f6f6c45706f63685265776172643a202174696d656c6f636b00604482015290519081900360640190fd5b808210158015610b42575060388211155b610b97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061259d6023913960400191505060405180910390fd5b6003919091556004556001600c55565b60025460009073ffffffffffffffffffffffffffffffffffffffff83811691161415610bea5762031380610bd96118dc565b5101431015610bea57506000610739565b506001919050565b600654600090610c0390600161198f565b905090565b6000610c126118dc565b60400151905090565b600c54600114610c8c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c55600a54604080517f393a7484000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163393a748491602480820192602092909190829003018186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d6020811015610d2c57600080fd5b5051610d83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806125796024913960400191505060405180910390fd5b610d8c81611e6a565b506001600c55565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600c54600114610e2757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c5560095473ffffffffffffffffffffffffffffffffffffffff163314610eb257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5374616b65506f6f6c45706f63685265776172643a202174696d656c6f636b00604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055610efa610f8d565b50610f036111f8565b50610f0c6107a7565b50610f156108e3565b50506001600c55565b60045473ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260408120600301549091610f569190611b01565b92915050565b61708081565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090206001015490565b600154604080517f900cf0cf000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163900cf0cf916004808301926020929190829003018186803b15801561081257600080fd5b600c5460011461106957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c556007546110939073ffffffffffffffffffffffffffffffffffffffff16333084612015565b610d8c33611e6a565b600d5460ff16156110f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061261d602f913960400191505060405180910390fd5b6007805473ffffffffffffffffffffffffffffffffffffffff808a167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560028054868416908316179055600880549289169290911691909117905561116384610db6565b61116d8282610a35565b5050600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94909416939093179092555050600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050565b600b5481565b6111f660016121e4565b565b600154604080517fc5967c26000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163c5967c26916004808301926020929190829003018186803b15801561081257600080fd5b60095473ffffffffffffffffffffffffffffffffffffffff1681565b600c546001146112f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c55600a54604080517fea74109e000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163ea74109e91602480820192602092909190829003018186803b15801561136657600080fd5b505afa15801561137a573d6000803e3d6000fd5b505050506040513d602081101561139057600080fd5b50516113e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806125c06031913960400191505060405180910390fd5b3360009081526005602052604090208054600b54611405908261198f565b600b5560008083556002830155600754610f159073ffffffffffffffffffffffffffffffffffffffff163383611c8e565b600c546001146114a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c5560015473ffffffffffffffffffffffffffffffffffffffff16331461151c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806124dd6026913960400191505060405180910390fd5b60008111611575576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806125036027913960400191505060405180910390fd5b600254600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b1580156115ef57600080fd5b505afa158015611603573d6000803e3d6000fd5b505050506040513d602081101561161957600080fd5b505160025460085491925061164a9173ffffffffffffffffffffffffffffffffffffffff9182169133911685612015565b600b5415610f1557600254600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b1580156116cc57600080fd5b505afa1580156116e0573d6000803e3d6000fd5b505050506040513d60208110156116f657600080fd5b50519050611704818361198f565b925060006117106118dc565b604001519050600061174361173c600b54610727670de0b6b3a764000089611a0690919063ffffffff16565b8390611b01565b604080516060810182524380825260208083018a905282840185905283519182528101899052825193945090927fae0e1452e3105698745005d16edaee897b9daf225b8434ea419008b58e60cb76929181900390910190a160068054600181018255600091909152815160039091027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f81019190915560208201517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d408201556040909101517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d419091015550505050506001600c55565b6003805473ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040812090920154610f5691611b01565b336000908152600560205260409020546111f690610954565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6118e4612496565b60066118ee610bf2565b815481106118f857fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b61193c612496565b600661194783610f62565b8154811061195157fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b600082821115611a0057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082611a1557506000610f56565b82820282848281611a2257fe5b0414611a79576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806125586021913960400191505060405180910390fd5b9392505050565b6000808211611af057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611af957fe5b049392505050565b600082820183811015611a7957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b33600090815260056020526040812090611b8d610f8d565b905080611ba96003548460030154611b0190919063ffffffff16565b1115611c00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061252a602e913960400191505060405180910390fd5b8154831115611c5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d81526020018061264c602d913960400191505060405180910390fd5b611c6460006121e4565b600b54611c71908461198f565b600b55600382018190558154611c87908461198f565b9091555050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310611d6357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611d26565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611dc5576040519150601f19603f3d011682016040523d82523d6000602084013e611dca565b606091505b5091509150818015611df8575080511580611df85750808060200190516020811015611df557600080fd5b50515b611e6357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b600b54600754604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093611f1993909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015611ee757600080fd5b505afa158015611efb573d6000803e3d6000fd5b505050506040513d6020811015611f1157600080fd5b50519061198f565b905060008111611f74576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806124b86025913960400191505060405180910390fd5b600b54611f819082611b01565b600b5573ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260409020611fb1610f8d565b60038201558054611fc29083611b01565b815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a2505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106120f257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016120b5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612154576040519150601f19603f3d011682016040523d82523d6000602084013e612159565b606091505b5091509150818015612187575080511580612187575080806020019051602081101561218457600080fd5b50515b6121dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806126796024913960400191505060405180910390fd5b505050505050565b33801561222d5773ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902061221982610689565b6002820155612226610bf2565b6001909101555b336000908152600560205260409020600281015480156124905783156122d0576000612257610f8d565b9050806122736004548560030154611b0190919063ffffffff16565b11156122ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806125f1602c913960400191505060405180910390fd5b60038301555b6000600280840182905554600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561234e57600080fd5b505afa158015612362573d6000803e3d6000fd5b505050506040513d602081101561237857600080fd5b50519050600082821161238b578161238d565b825b600854600254604080517fd1660f9900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015233602482015260448101859052905193945091169163d1660f999160648082019260009290919082900301818387803b15801561241357600080fd5b505af1158015612427573d6000803e3d6000fd5b50506002546040805187815260208101889052808201869052905133945073ffffffffffffffffffffffffffffffffffffffff9290921692506000917f16dc511f817964d1eb39e0c3e84ce317f07b5b12cdfa1f8c2f179a08836af51a9181900360600190a450505b50505050565b6040518060600160405280600081526020016000815260200160008152509056fe5374616b65506f6f6c45706f63685265776172643a20496e76616c69642062616c616e63655374616b65506f6f6c45706f63685265776172643a202165706f6368436f6e74726f6c6c65725374616b65506f6f6c45706f63685265776172643a2043616e6e6f7420616c6c6f6361746520305374616b65506f6f6c45706f63685265776172643a207374696c6c20696e207769746864726177206c6f636b7570536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775374616b65506f6f6c45706f63685265776172643a20496e76616c69642073656e6465725f77697468647261774c6f636b757045706f6368733a206f7574206f662072616e67655374616b65506f6f6c45706f63685265776172643a204e6f7420616c6c6f7720656d657267656e637957697468647261775374616b65506f6f6c45706f63685265776172643a207374696c6c20696e20726577617264206c6f636b75705374616b65506f6f6c45706f63685265776172643a20496e697469616c697a65206d7573742062652066616c73652e5374616b65506f6f6c45706f63685265776172643a20696e76616c696420776974686472617720616d6f756e745472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220c32923b8f5cd9307a43dd3187aa6e1bccbc38ed439def3e332e4ed639d5c31c364736f6c63430007060033a26469706673582212207e820757b51813131650d28d84b4b07115f0aa2868b8920f757dba96fd54492f64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806301f79fb61461004657806354fd4d501461005b578063efc81a8c14610079575b600080fd5b6100596100543660046101aa565b61008e565b005b61006361012d565b604051610070919061035c565b60405180910390f35b610081610133565b60405161007091906102c5565b86600061009d8385018561026b565b90508173ffffffffffffffffffffffffffffffffffffffff1663b33f952789878985600001518c876020015188604001516040518863ffffffff1660e01b81526004016100f0979695949392919061030c565b600060405180830381600087803b15801561010a57600080fd5b505af115801561011e573d6000803e3d6000fd5b50505050505050505050505050565b60005481565b6000803360005460405161014690610174565b6101519291906102e6565b604051809103906000f08015801561016d573d6000803e3d6000fd5b5091505090565b6127fa8061036683390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146101a557600080fd5b919050565b600080600080600080600060c0888a0312156101c4578283fd5b6101cd88610181565b96506101db60208901610181565b95506101e960408901610181565b94506101f760608901610181565b935061020560808901610181565b925060a088013567ffffffffffffffff80821115610221578384fd5b818a0191508a601f830112610234578384fd5b813581811115610242578485fd5b8b6020828501011115610253578485fd5b60208301945080935050505092959891949750929550565b60006060828403121561027c578081fd5b6040516060810181811067ffffffffffffffff8211171561029957fe5b6040526102a583610181565b815260208301356020820152604083013560408201528091505092915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9788168152958716602087015293861660408601529185166060850152909316608083015260a082019290925260c081019190915260e00190565b9081526020019056fe60806040526001600c55600d805460ff1916905534801561001f57600080fd5b506040516127fa3803806127fa8339818101604052604081101561004257600080fd5b508051602091820151600a80546001600160a01b039093166001600160a01b0319938416179055600980549092163317909155600090815560408051606081018252438152928301828152908301828152600680546001810182559352925160039092027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810192909255517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41909101556126d2806101286000396000f3fe608060405234801561001057600080fd5b506004361061025b5760003560e01c80635a9c064411610145578063c5967c26116100bd578063e7d80e311161008c578063efe2226611610071578063efe2226614610671578063f77c479114610679578063f7c618c1146106815761025b565b8063e7d80e3114610636578063e9fad8ee146106695761025b565b8063c5967c2614610601578063d33219b414610609578063db2e21bc14610611578063e2dcb616146106195761025b565b8063900cf0cf11610114578063b33f9527116100f9578063b33f952714610592578063b69ef8a8146105f1578063b88a802f146105f95761025b565b8063900cf0cf1461056d578063a694fc3a146105755761025b565b80635a9c0644146104cc57806362e7e463146104ff5780636bb987fe14610532578063714b46581461053a5761025b565b806322455618116101d85780633f9e3f04116101a75780634bf692061161018c5780634bf692061461048957806351ed6a30146104bc57806354fd4d50146104c45761025b565b80633f9e3f0414610479578063446a2ec8146104815761025b565b806322455618146103fc5780632e1a7d4d146104045780632ffaaa09146104235780633468a5b8146104465761025b565b806307284ce91161022f57806319262d301161021457806319262d30146103685780631959a0021461039b5780631e85cd65146103f45761025b565b806307284ce91461032557806311815a391461032d5761025b565b80628cc26214610260578063022ba18d146102a557806303df4868146102ad578063046335d0146102de575b600080fd5b6102936004803603602081101561027657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610689565b60408051918252519081900360200190f35b61029361073e565b6102b5610744565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610311600480360360208110156102f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610760565b604080519115158252519081900360200190f35b6102936107a7565b61034a6004803603602081101561034357600080fd5b5035610843565b60408051938452602084019290925282820152519081900360600190f35b6103116004803603602081101561037e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610876565b6103ce600480360360208110156103b157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108b6565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6102936108dd565b6102936108e3565b6104216004803603602081101561041a57600080fd5b5035610954565b005b6104216004803603604081101561043957600080fd5b5080359060200135610a35565b6103116004803603602081101561045c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ba7565b610293610bf2565b610293610c08565b6104216004803603602081101561049f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c1b565b6102b5610d94565b610293610db0565b610421600480360360208110156104e257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610db6565b6102936004803603602081101561051557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f1e565b610293610f5c565b6102936004803603602081101561055057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f62565b610293610f8d565b6104216004803603602081101561058b57600080fd5b5035610ff8565b610421600480360360e08110156105a857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013581169160608101358216916080820135169060a08101359060c0013561109c565b6102936111e6565b6104216111ec565b6102936111f8565b6102b5611263565b61042161127f565b6104216004803603602081101561062f57600080fd5b5035611436565b6102936004803603602081101561064c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611839565b61042161186f565b6102b5611888565b6102b56118a4565b6102b56118c0565b6000806106946118dc565b60400151905060006106a584611934565b60409081015173ffffffffffffffffffffffffffffffffffffffff8616600090815260056020908152908390208351608081018552815481526001820154928101929092526002810154938201849052600301546060820152909250906107339061072d670de0b6b3a764000061072761071f888861198f565b865190611a06565b90611a80565b90611b01565b93505050505b919050565b60045481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600061076a610f8d565b60045473ffffffffffffffffffffffffffffffffffffffff841660009081526005602052604090206003015461079f91611b01565b111592915050565b600154604080517f07284ce9000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916307284ce9916004808301926020929190829003018186803b15801561081257600080fd5b505afa158015610826573d6000803e3d6000fd5b505050506040513d602081101561083c57600080fd5b5051905090565b6006818154811061085357600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b6000610880610f8d565b6003805473ffffffffffffffffffffffffffffffffffffffff851660009081526005602052604090209091015461079f91611b01565b60056020526000908152604090208054600182015460028301546003909301549192909184565b60035481565b600154604080517f7effa5b6000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff1691637effa5b6916024808301926020929190829003018186803b15801561081257600080fd5b600c546001146109c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c556109d381611b75565b6007546109f79073ffffffffffffffffffffffffffffffffffffffff163383611c8e565b60408051828152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2506001600c55565b600c54600114610aa657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c5560095473ffffffffffffffffffffffffffffffffffffffff163314610b3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5374616b65506f6f6c45706f63685265776172643a202174696d656c6f636b00604482015290519081900360640190fd5b808210158015610b42575060388211155b610b97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061259d6023913960400191505060405180910390fd5b6003919091556004556001600c55565b60025460009073ffffffffffffffffffffffffffffffffffffffff83811691161415610bea5762031380610bd96118dc565b5101431015610bea57506000610739565b506001919050565b600654600090610c0390600161198f565b905090565b6000610c126118dc565b60400151905090565b600c54600114610c8c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c55600a54604080517f393a7484000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163393a748491602480820192602092909190829003018186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d6020811015610d2c57600080fd5b5051610d83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806125796024913960400191505060405180910390fd5b610d8c81611e6a565b506001600c55565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600c54600114610e2757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c5560095473ffffffffffffffffffffffffffffffffffffffff163314610eb257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5374616b65506f6f6c45706f63685265776172643a202174696d656c6f636b00604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055610efa610f8d565b50610f036111f8565b50610f0c6107a7565b50610f156108e3565b50506001600c55565b60045473ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260408120600301549091610f569190611b01565b92915050565b61708081565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090206001015490565b600154604080517f900cf0cf000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163900cf0cf916004808301926020929190829003018186803b15801561081257600080fd5b600c5460011461106957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c556007546110939073ffffffffffffffffffffffffffffffffffffffff16333084612015565b610d8c33611e6a565b600d5460ff16156110f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061261d602f913960400191505060405180910390fd5b6007805473ffffffffffffffffffffffffffffffffffffffff808a167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560028054868416908316179055600880549289169290911691909117905561116384610db6565b61116d8282610a35565b5050600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94909416939093179092555050600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050565b600b5481565b6111f660016121e4565b565b600154604080517fc5967c26000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163c5967c26916004808301926020929190829003018186803b15801561081257600080fd5b60095473ffffffffffffffffffffffffffffffffffffffff1681565b600c546001146112f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c55600a54604080517fea74109e000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163ea74109e91602480820192602092909190829003018186803b15801561136657600080fd5b505afa15801561137a573d6000803e3d6000fd5b505050506040513d602081101561139057600080fd5b50516113e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806125c06031913960400191505060405180910390fd5b3360009081526005602052604090208054600b54611405908261198f565b600b5560008083556002830155600754610f159073ffffffffffffffffffffffffffffffffffffffff163383611c8e565b600c546001146114a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b65506f6f6c45706f63685265776172643a204c4f434b454400000000604482015290519081900360640190fd5b6000600c5560015473ffffffffffffffffffffffffffffffffffffffff16331461151c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806124dd6026913960400191505060405180910390fd5b60008111611575576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806125036027913960400191505060405180910390fd5b600254600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b1580156115ef57600080fd5b505afa158015611603573d6000803e3d6000fd5b505050506040513d602081101561161957600080fd5b505160025460085491925061164a9173ffffffffffffffffffffffffffffffffffffffff9182169133911685612015565b600b5415610f1557600254600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b1580156116cc57600080fd5b505afa1580156116e0573d6000803e3d6000fd5b505050506040513d60208110156116f657600080fd5b50519050611704818361198f565b925060006117106118dc565b604001519050600061174361173c600b54610727670de0b6b3a764000089611a0690919063ffffffff16565b8390611b01565b604080516060810182524380825260208083018a905282840185905283519182528101899052825193945090927fae0e1452e3105698745005d16edaee897b9daf225b8434ea419008b58e60cb76929181900390910190a160068054600181018255600091909152815160039091027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f81019190915560208201517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d408201556040909101517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d419091015550505050506001600c55565b6003805473ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040812090920154610f5691611b01565b336000908152600560205260409020546111f690610954565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6118e4612496565b60066118ee610bf2565b815481106118f857fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b61193c612496565b600661194783610f62565b8154811061195157fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b600082821115611a0057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082611a1557506000610f56565b82820282848281611a2257fe5b0414611a79576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806125586021913960400191505060405180910390fd5b9392505050565b6000808211611af057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611af957fe5b049392505050565b600082820183811015611a7957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b33600090815260056020526040812090611b8d610f8d565b905080611ba96003548460030154611b0190919063ffffffff16565b1115611c00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061252a602e913960400191505060405180910390fd5b8154831115611c5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d81526020018061264c602d913960400191505060405180910390fd5b611c6460006121e4565b600b54611c71908461198f565b600b55600382018190558154611c87908461198f565b9091555050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310611d6357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611d26565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611dc5576040519150601f19603f3d011682016040523d82523d6000602084013e611dca565b606091505b5091509150818015611df8575080511580611df85750808060200190516020811015611df557600080fd5b50515b611e6357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b600b54600754604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093611f1993909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015611ee757600080fd5b505afa158015611efb573d6000803e3d6000fd5b505050506040513d6020811015611f1157600080fd5b50519061198f565b905060008111611f74576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806124b86025913960400191505060405180910390fd5b600b54611f819082611b01565b600b5573ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260409020611fb1610f8d565b60038201558054611fc29083611b01565b815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a2505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106120f257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016120b5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612154576040519150601f19603f3d011682016040523d82523d6000602084013e612159565b606091505b5091509150818015612187575080511580612187575080806020019051602081101561218457600080fd5b50515b6121dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806126796024913960400191505060405180910390fd5b505050505050565b33801561222d5773ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902061221982610689565b6002820155612226610bf2565b6001909101555b336000908152600560205260409020600281015480156124905783156122d0576000612257610f8d565b9050806122736004548560030154611b0190919063ffffffff16565b11156122ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806125f1602c913960400191505060405180910390fd5b60038301555b6000600280840182905554600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561234e57600080fd5b505afa158015612362573d6000803e3d6000fd5b505050506040513d602081101561237857600080fd5b50519050600082821161238b578161238d565b825b600854600254604080517fd1660f9900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015233602482015260448101859052905193945091169163d1660f999160648082019260009290919082900301818387803b15801561241357600080fd5b505af1158015612427573d6000803e3d6000fd5b50506002546040805187815260208101889052808201869052905133945073ffffffffffffffffffffffffffffffffffffffff9290921692506000917f16dc511f817964d1eb39e0c3e84ce317f07b5b12cdfa1f8c2f179a08836af51a9181900360600190a450505b50505050565b6040518060600160405280600081526020016000815260200160008152509056fe5374616b65506f6f6c45706f63685265776172643a20496e76616c69642062616c616e63655374616b65506f6f6c45706f63685265776172643a202165706f6368436f6e74726f6c6c65725374616b65506f6f6c45706f63685265776172643a2043616e6e6f7420616c6c6f6361746520305374616b65506f6f6c45706f63685265776172643a207374696c6c20696e207769746864726177206c6f636b7570536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775374616b65506f6f6c45706f63685265776172643a20496e76616c69642073656e6465725f77697468647261774c6f636b757045706f6368733a206f7574206f662072616e67655374616b65506f6f6c45706f63685265776172643a204e6f7420616c6c6f7720656d657267656e637957697468647261775374616b65506f6f6c45706f63685265776172643a207374696c6c20696e20726577617264206c6f636b75705374616b65506f6f6c45706f63685265776172643a20496e697469616c697a65206d7573742062652066616c73652e5374616b65506f6f6c45706f63685265776172643a20696e76616c696420776974686472617720616d6f756e745472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220c32923b8f5cd9307a43dd3187aa6e1bccbc38ed439def3e332e4ed639d5c31c364736f6c63430007060033a26469706673582212207e820757b51813131650d28d84b4b07115f0aa2868b8920f757dba96fd54492f64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12303,
        "contract": "contracts/StakePoolEpochRewardCreator.sol:StakePoolEpochRewardCreator",
        "label": "version",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}