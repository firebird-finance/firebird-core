{
  "address": "0xF5d8af516D6668A25faa0cC869329EbE09E928CA",
  "abi": [
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "timelock",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakePoolRewardFund",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2c9fa5dffc33c37a3b5f03c17942629a99da054f24cd02bfb6e34a8431b96b5",
  "receipt": {
    "to": null,
    "from": "0x7a1a8Ecd640bB8399DB2c5265A45AD8a91BF63CC",
    "contractAddress": "0xF5d8af516D6668A25faa0cC869329EbE09E928CA",
    "transactionIndex": 4,
    "gasUsed": "3377662",
    "logsBloom": "0x
    "blockHash": "0x62d2870d5527e661a9c0e7d87dd7fe62627919331f30212be6e987bf0aa0531c",
    "transactionHash": "0xc2c9fa5dffc33c37a3b5f03c17942629a99da054f24cd02bfb6e34a8431b96b5",
    "logs": [],
    "blockNumber": 8925210,
    "cumulativeGasUsed": "3603090",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c28cb5271196bace7e8af8d0cd8648a7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakePoolRewardFund\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakePoolCreator.sol\":\"StakePoolCreator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/StakePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./interfaces/IStakePool.sol\\\";\\nimport \\\"./interfaces/IStakePoolController.sol\\\";\\nimport \\\"./interfaces/IStakePoolRewardRebaser.sol\\\";\\nimport \\\"./interfaces/IStakePoolRewardMultiplier.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport './libraries/TransferHelper.sol';\\nimport \\\"./interfaces/IStakePoolRewardFund.sol\\\";\\n\\ncontract StakePool is IStakePool {\\n    using SafeMath for uint;\\n    uint public override version;\\n    // Info of each user.\\n    struct UserInfo {\\n        uint amount;\\n        mapping(uint8 => uint) rewardDebt;\\n        mapping(uint8 => uint) reward;\\n        mapping(uint8 => uint) accumulatedEarned; // will accumulate every time user harvest\\n        mapping(uint8 => uint) lockReward;\\n        mapping(uint8 => uint) lockRewardReleased;\\n        uint lastStakeTime;\\n    }\\n\\n    // Info of each rewardPool funding.\\n    struct RewardPoolInfo {\\n        address rewardToken;     // Address of rewardPool token contract.\\n        address rewardRebaser;     // Address of rewardRebaser contract.\\n        address rewardMultiplier;     // Address of rewardMultiplier contract.\\n        uint startRewardBlock;   // Start reward block number that rewardPool distribution occurs.\\n        uint lastRewardBlock;   // Last block number that rewardPool distribution occurs.\\n        uint endRewardBlock;    // Block number which rewardPool distribution ends.\\n        uint rewardPerBlock;    // Reward token amount to distribute per block.\\n        uint accRewardPerShare; // Accumulated rewardPool per share, times 1e18.\\n\\n        uint lockRewardPercent; // Lock reward percent - 0 to disable lock & vesting\\n        uint startVestingBlock; // Block number which vesting starts.\\n        uint endVestingBlock;   // Block number which vesting ends.\\n        uint numOfVestingBlocks;\\n\\n        uint totalPaidRewards;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n    RewardPoolInfo[] public rewardPoolInfo;\\n    address public override stakeToken;\\n    address public rewardFund;\\n    address public timelock;\\n    address public controller;\\n\\n    uint public balance;\\n    uint public unstakingFrozenTime = 3 days;\\n    uint private unlocked = 1;\\n    bool private _initialized = false;\\n    uint256 public constant BLOCKS_PER_DAY = 28800;\\n\\n    constructor(address _controller, uint _version) public {\\n        controller = _controller;\\n        timelock = msg.sender;\\n        version = _version;\\n    }\\n    modifier lock() {\\n        require(unlocked == 1, 'StakePool: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n    modifier onlyTimeLock() {\\n        require(msg.sender == timelock, \\\"StakePool: !timelock\\\");\\n        _;\\n    }\\n\\n    function allowRecoverRewardToken(address _token) external view override returns (bool) {\\n        for (uint8 pid = 0; pid < rewardPoolInfo.length; ++pid) {\\n            RewardPoolInfo storage rewardPool = rewardPoolInfo[pid];\\n            if (rewardPool.rewardToken == _token) {\\n                // do not allow to drain reward token if less than 7 days after pool ends\\n                if (block.number < (rewardPool.endRewardBlock + (BLOCKS_PER_DAY * 7))) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n    // called once by the factory at time of deployment\\n    function initialize(address _stakeToken, uint _unstakingFrozenTime, address _rewardFund, address _timelock) external override {\\n        require(_initialized == false, \\\"StakePool: Initialize must be false.\\\");\\n        require(unstakingFrozenTime <= 30 days, \\\"StakePool: unstakingFrozenTime > 30 days\\\");\\n        stakeToken = _stakeToken;\\n        unstakingFrozenTime = _unstakingFrozenTime;\\n        rewardFund = _rewardFund;\\n        timelock = _timelock;\\n        _initialized = true;\\n    }\\n\\n    function addRewardPool(\\n        address _rewardToken, address _rewardRebaser, address _rewardMultiplier,\\n        uint256 _startBlock, uint256 _endRewardBlock,\\n        uint256 _rewardPerBlock, uint256 _lockRewardPercent,\\n        uint256 _startVestingBlock, uint256 _endVestingBlock\\n    ) external override lock onlyTimeLock {\\n        require(rewardPoolInfo.length <= 16, \\\"StakePool: Reward pool length > 16\\\");\\n        require(IStakePoolController(controller).isWhitelistRewardRebaser(_rewardRebaser), \\\"StakePool: Invalid reward rebaser\\\");\\n        require(IStakePoolController(controller).isWhitelistRewardMultiplier(_rewardMultiplier), \\\"StakePool: Invalid reward multiplier\\\");\\n        require(_startVestingBlock <= _endVestingBlock, \\\"StakePool: startVestingBlock > endVestingBlock\\\");\\n        _startBlock = (block.number > _startBlock) ? block.number : _startBlock;\\n        require(_startBlock < _endRewardBlock, \\\"StakePool: startBlock >= endRewardBlock\\\");\\n        require(_lockRewardPercent <= 100, \\\"StakePool: invalid lockRewardPercent\\\");\\n        updateReward();\\n        rewardPoolInfo.push(RewardPoolInfo({\\n        rewardToken : _rewardToken,\\n        rewardRebaser : _rewardRebaser,\\n        startRewardBlock : _startBlock,\\n        rewardMultiplier : _rewardMultiplier,\\n        lastRewardBlock : _startBlock,\\n        endRewardBlock : _endRewardBlock,\\n        rewardPerBlock : _rewardPerBlock,\\n        accRewardPerShare : 0,\\n        lockRewardPercent : _lockRewardPercent,\\n        startVestingBlock : _startVestingBlock,\\n        endVestingBlock : _endVestingBlock,\\n        numOfVestingBlocks : _endVestingBlock - _startVestingBlock,\\n        totalPaidRewards : 0\\n        }));\\n        emit AddRewardPool(rewardPoolInfo.length - 1);\\n    }\\n\\n    function updateRewardMultiplier(uint8 _pid, address _rewardMultiplier) external override lock onlyTimeLock {\\n        require(IStakePoolController(controller).isWhitelistRewardMultiplier(_rewardMultiplier), \\\"StakePool: Invalid reward multiplier\\\");\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\\n        rewardPool.rewardMultiplier = _rewardMultiplier;\\n        updateReward(_pid);\\n        emit UpdateRewardMultiplier(_pid, _rewardMultiplier);\\n    }\\n\\n    function updateRewardRebaser(uint8 _pid, address _rewardRebaser) external override lock onlyTimeLock {\\n        require(IStakePoolController(controller).isWhitelistRewardRebaser(_rewardRebaser), \\\"StakePool: Invalid reward rebaser\\\");\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\\n        rewardPool.rewardRebaser = _rewardRebaser;\\n        updateReward(_pid);\\n        emit UpdateRewardRebaser(_pid, _rewardRebaser);\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getRewardMultiplier(uint8 _pid, uint _from, uint _to, uint _rewardPerBlock) public override view returns (uint) {\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\\n        address rewardMultiplier = rewardPool.rewardMultiplier;\\n        if (rewardMultiplier == address(0)) {\\n            return _to.sub(_from).mul(_rewardPerBlock);\\n        }\\n        return IStakePoolRewardMultiplier(rewardMultiplier).getRewardMultiplier(\\n            rewardPool.startRewardBlock,\\n            rewardPool.endRewardBlock,\\n            _from,\\n            _to,\\n            _rewardPerBlock\\n        );\\n    }\\n\\n    function getRewardRebase(uint8 _pid, address _rewardToken, uint _pendingReward) public override view returns (uint) {\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\\n        address rewardRebaser = rewardPool.rewardRebaser;\\n        if (rewardRebaser == address(0)) {\\n            return _pendingReward;\\n        }\\n        return IStakePoolRewardRebaser(rewardRebaser).getRebaseAmount(_rewardToken, _pendingReward);\\n    }\\n\\n    function getRewardPerBlock(uint8 pid, uint from, uint to) public view returns (uint) {\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[pid];\\n        uint rewardPerBlock = rewardPool.rewardPerBlock;\\n        if (from < rewardPool.startRewardBlock || from > rewardPool.endRewardBlock) return 0;\\n        uint reward = getRewardMultiplier(pid, from, to, rewardPerBlock);\\n        return getRewardRebase(pid, rewardPool.rewardToken, reward);\\n    }\\n\\n    function getRewardPerBlock(uint8 pid) external override view returns (uint) {\\n        return getRewardPerBlock(pid, block.number, block.number + 1);\\n    }\\n\\n    function updateRewardPool(uint8 _pid, uint256 _endRewardBlock, uint256 _rewardPerBlock) public override lock onlyTimeLock {\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\\n        require(block.number <= rewardPool.endRewardBlock && block.number <= _endRewardBlock, \\\"StakePool: blockNumber > endRewardBlock\\\");\\n        updateReward(_pid);\\n        rewardPool.endRewardBlock = _endRewardBlock;\\n        rewardPool.rewardPerBlock = _rewardPerBlock;\\n        emit UpdateRewardPool(_pid, _endRewardBlock, _rewardPerBlock);\\n    }\\n\\n    function stopRewardPool(uint8 _pid) public override lock onlyTimeLock {\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\\n        updateReward(_pid);\\n        rewardPool.endRewardBlock = block.number;\\n        rewardPool.rewardPerBlock = 0;\\n        emit UpdateRewardPool(_pid, rewardPool.endRewardBlock, rewardPool.rewardPerBlock);\\n    }\\n\\n    function stake(uint _amount) external lock override {\\n        TransferHelper.safeTransferFrom(stakeToken, msg.sender, address(this), _amount);\\n        _stakeFor(msg.sender);\\n    }\\n\\n    function stakeFor(address _account) external lock override {\\n        require(IStakePoolController(controller).isWhitelistStakingFor(msg.sender), \\\"StakePool: Invalid sender\\\");\\n        _stakeFor(_account);\\n    }\\n\\n    function _stakeFor(address _account) internal {\\n        uint _amount = IERC20(stakeToken).balanceOf(address(this)).sub(balance);\\n        require(_amount > 0, \\\"StakePool: Invalid balance\\\");\\n        balance = balance.add(_amount);\\n        UserInfo storage user = userInfo[_account];\\n        getAllRewards(_account);\\n        user.amount = user.amount.add(_amount);\\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\\n            user.rewardDebt[_pid] = user.amount.mul(rewardPoolInfo[_pid].accRewardPerShare).div(1e18);\\n        }\\n        user.lastStakeTime = block.timestamp;\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    function rewardPoolInfoLength() public override view returns (uint) {\\n        return rewardPoolInfo.length;\\n    }\\n\\n    function unfrozenStakeTime(address _account) public override view returns (uint) {\\n        return userInfo[_account].lastStakeTime + unstakingFrozenTime;\\n    }\\n\\n    function removeStakeInternal(uint _amount) internal {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"StakePool: invalid withdraw amount\\\");\\n        require(block.timestamp >= user.lastStakeTime.add(unstakingFrozenTime), \\\"StakePool: frozen\\\");\\n        getAllRewards(msg.sender);\\n        balance = balance.sub(_amount);\\n        user.amount = user.amount.sub(_amount);\\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\\n            user.rewardDebt[_pid] = user.amount.mul(rewardPoolInfo[_pid].accRewardPerShare).div(1e18);\\n        }\\n    }\\n\\n    function withdraw(uint _amount) public lock override {\\n        removeStakeInternal(_amount);\\n        TransferHelper.safeTransfer(stakeToken, msg.sender, _amount);\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(userInfo[msg.sender].amount);\\n    }\\n\\n    function getAllRewards(address _account) public override {\\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\\n            getReward(_pid, _account);\\n        }\\n    }\\n\\n    function claimReward() external override {\\n        getAllRewards(msg.sender);\\n    }\\n\\n    function getReward(uint8 _pid, address _account) public override {\\n        updateReward(_pid);\\n        UserInfo storage user = userInfo[_account];\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\\n        uint _accRewardPerShare = rewardPool.accRewardPerShare;\\n        uint _pendingReward = user.amount.mul(_accRewardPerShare).div(1e18).sub(user.rewardDebt[_pid]);\\n        uint _lockRewardPercent = rewardPool.lockRewardPercent;\\n        if (_lockRewardPercent > 0) {\\n            if (block.number > rewardPool.endVestingBlock) {\\n                uint _unlockReward = user.lockReward[_pid].sub(user.lockRewardReleased[_pid]);\\n                if (_unlockReward > 0) {\\n                    _pendingReward = _pendingReward.add(_unlockReward);\\n                    user.lockRewardReleased[_pid] = user.lockRewardReleased[_pid].add(_unlockReward);\\n                }\\n            } else {\\n                if (_pendingReward > 0) {\\n                    uint _toLocked = _pendingReward.mul(_lockRewardPercent).div(100);\\n                    _pendingReward = _pendingReward.sub(_toLocked);\\n                    user.lockReward[_pid] = user.lockReward[_pid].add(_toLocked);\\n                }\\n                uint _startVestingBlock = rewardPool.startVestingBlock;\\n                if (block.number > _startVestingBlock) {\\n                    uint _toReleased = user.lockReward[_pid].mul(block.number.sub(_startVestingBlock)).div(rewardPool.numOfVestingBlocks);\\n                    uint _lockRewardReleased = user.lockRewardReleased[_pid];\\n                    if (_toReleased > _lockRewardReleased) {\\n                        uint _unlockReward = _toReleased.sub(_lockRewardReleased);\\n                        user.lockRewardReleased[_pid] = _lockRewardReleased.add(_unlockReward);\\n                        _pendingReward = _pendingReward.add(_unlockReward);\\n                    }\\n                }\\n            }\\n        }\\n        if (_pendingReward > 0) {\\n            user.accumulatedEarned[_pid] = user.accumulatedEarned[_pid].add(_pendingReward);\\n            rewardPool.totalPaidRewards = rewardPool.totalPaidRewards.add(_pendingReward);\\n            user.rewardDebt[_pid] = user.amount.mul(_accRewardPerShare).div(1e18);\\n            uint reward = user.reward[_pid].add(_pendingReward);\\n            user.reward[_pid] = reward;\\n            // Safe reward transfer, just in case if rounding error causes pool to not have enough reward amount\\n            address rewardToken = rewardPool.rewardToken;\\n            uint rewardBalance = IERC20(rewardToken).balanceOf(rewardFund);\\n            if (rewardBalance > 0) {\\n                user.reward[_pid] = 0;\\n                uint rebaseAmount = getRewardRebase(_pid, rewardToken, reward);\\n                uint paidAmount = rebaseAmount > rewardBalance ? rewardBalance : rebaseAmount;\\n                IStakePoolRewardFund(rewardFund).safeTransfer(rewardToken, _account, paidAmount);\\n                emit PayRewardPool(_pid, rewardToken, _account, reward, rebaseAmount, paidAmount);\\n            }\\n        }\\n    }\\n\\n\\n    function pendingReward(uint8 _pid, address _account) external override view returns (uint) {\\n        UserInfo storage user = userInfo[_account];\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\\n        uint _accRewardPerShare = rewardPool.accRewardPerShare;\\n        uint lpSupply = IERC20(stakeToken).balanceOf(address(this));\\n        uint _endRewardBlock = rewardPool.endRewardBlock;\\n        uint _endRewardBlockApplicable = block.number > _endRewardBlock ? _endRewardBlock : block.number;\\n        uint _lastRewardBlock = rewardPool.lastRewardBlock;\\n        if (_endRewardBlockApplicable > _lastRewardBlock && lpSupply != 0) {\\n            uint _incRewardPerShare = getRewardMultiplier(_pid, _lastRewardBlock, _endRewardBlockApplicable, rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\\n            _accRewardPerShare = _accRewardPerShare.add(_incRewardPerShare);\\n        }\\n        uint pending = user.amount.mul(_accRewardPerShare).div(1e18).add(user.reward[_pid]).sub(user.rewardDebt[_pid]);\\n        return getRewardRebase(_pid, rewardPool.rewardToken, pending);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw() external lock override {\\n        require(IStakePoolController(controller).isAllowEmergencyWithdrawStakePool(address(this)), \\\"StakePool: Not allow emergencyWithdraw\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint amount = user.amount;\\n        balance = balance.sub(amount);\\n        user.amount = 0;\\n        TransferHelper.safeTransfer(stakeToken, msg.sender, amount);\\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\\n            user.rewardDebt[_pid] = 0;\\n            user.reward[_pid] = 0;\\n        }\\n    }\\n\\n    function getUserInfo(uint8 _pid, address _account) public override view returns (uint amount, uint rewardDebt, uint accumulatedEarned, uint lockReward, uint lockRewardReleased) {\\n        UserInfo storage user = userInfo[_account];\\n        amount = user.amount;\\n        rewardDebt = user.rewardDebt[_pid];\\n        accumulatedEarned = user.accumulatedEarned[_pid];\\n        lockReward = user.lockReward[_pid];\\n        lockRewardReleased = user.lockRewardReleased[_pid];\\n    }\\n\\n    function updateReward() public override {\\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\\n            updateReward(_pid);\\n        }\\n    }\\n\\n    function updateReward(uint8 _pid) public override {\\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\\n        uint _endRewardBlock = rewardPool.endRewardBlock;\\n        uint _endRewardBlockApplicable = block.number > _endRewardBlock ? _endRewardBlock : block.number;\\n        uint _lastRewardBlock = rewardPool.lastRewardBlock;\\n        if (_endRewardBlockApplicable > _lastRewardBlock) {\\n            uint lpSupply = IERC20(stakeToken).balanceOf(address(this));\\n            if (lpSupply > 0) {\\n                uint _incRewardPerShare = getRewardMultiplier(_pid, _lastRewardBlock, _endRewardBlockApplicable, rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\\n                rewardPool.accRewardPerShare = rewardPool.accRewardPerShare.add(_incRewardPerShare);\\n            }\\n            rewardPool.lastRewardBlock = _endRewardBlockApplicable;\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa9e4b1b3da6cba89d25557580c588800c3790c95cee239b35ccdb90737dbda2a\",\"license\":\"MIT\"},\"contracts/StakePoolCreator.sol\":{\"content\":\"pragma abicoder v2;\\npragma solidity >=0.7.6;\\n\\nimport './interfaces/IStakePoolCreator.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './TimeLock.sol';\\nimport './StakePool.sol';\\n\\ncontract StakePoolCreator is IStakePoolCreator {\\n    uint public override version = 3001;\\n\\n    struct PoolRewardInfo {\\n        address rewardRebaser;\\n        address rewardMultiplier;\\n        uint256 startBlock;\\n        uint256 endRewardBlock;\\n        uint256 rewardPerBlock;\\n        uint256 lockRewardPercent;\\n        uint256 startVestingBlock;\\n        uint256 endVestingBlock;\\n        uint unstakingFrozenTime;\\n    }\\n    function create() external override returns (address) {\\n        StakePool pool = new StakePool(msg.sender, version);\\n        return address(pool);\\n    }\\n    function initialize(address poolAddress, address pair, address rewardToken, address timelock, address stakePoolRewardFund, bytes calldata data) external override {\\n        StakePool pool = StakePool(poolAddress);\\n        PoolRewardInfo memory poolRewardInfo = abi.decode(data, (PoolRewardInfo));\\n        pool.addRewardPool(\\n            rewardToken,\\n            poolRewardInfo.rewardRebaser,\\n            poolRewardInfo.rewardMultiplier,\\n            poolRewardInfo.startBlock,\\n            poolRewardInfo.endRewardBlock,\\n            poolRewardInfo.rewardPerBlock,\\n            poolRewardInfo.lockRewardPercent,\\n            poolRewardInfo.startVestingBlock,\\n            poolRewardInfo.endVestingBlock\\n        );\\n        pool.initialize(pair, poolRewardInfo.unstakingFrozenTime, address(stakePoolRewardFund), address(timelock));\\n    }\\n}\",\"keccak256\":\"0x90d6f1fced3c9c8df45f00bba2d2a5a5a62b0342881cdbb29e590fc9fa5a4289\"},\"contracts/TimeLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract TimeLock {\\n    using SafeMath for uint256;\\n    event NewAdmin(address indexed newAdmin);\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\n    event NewDelay(uint indexed newDelay);\\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n\\n    uint public constant GRACE_PERIOD = 14 days;\\n    uint public constant MINIMUM_DELAY = 1 days;\\n    uint public constant MAXIMUM_DELAY = 30 days;\\n    bool private _initialized;\\n    address public admin;\\n    address public pendingAdmin;\\n    uint public delay;\\n    bool public admin_initialized;\\n    mapping(bytes32 => bool) public queuedTransactions;\\n\\n    constructor() public {\\n        admin_initialized = false;\\n        _initialized = false;\\n    }\\n\\n    function initialize(address _admin, uint _delay) public {\\n        require(_initialized == false, \\\"Timelock::constructor: Initialized must be false.\\\");\\n        require(_delay >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(_delay <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n        delay = _delay;\\n        admin = _admin;\\n        _initialized = true;\\n        emit NewAdmin(admin);\\n        emit NewDelay(delay);\\n    }\\n\\n    receive() external payable {}\\n\\n    function setDelay(uint _delay) public {\\n        require(msg.sender == address(this), \\\"Timelock::setDelay: Call must come from Timelock.\\\");\\n        require(_delay >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(_delay <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n        delay = _delay;\\n        emit NewDelay(delay);\\n    }\\n\\n    function acceptAdmin() public {\\n        require(msg.sender == pendingAdmin, \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\");\\n        admin = msg.sender;\\n        pendingAdmin = address(0);\\n        emit NewAdmin(admin);\\n    }\\n\\n    function setPendingAdmin(address _pendingAdmin) public {\\n        // allows one time setting of admin for deployment purposes\\n        if (admin_initialized) {\\n            require(msg.sender == address(this), \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\");\\n        } else {\\n            require(msg.sender == admin, \\\"Timelock::setPendingAdmin: First call must come from admin.\\\");\\n            admin_initialized = true;\\n        }\\n        pendingAdmin = _pendingAdmin;\\n\\n        emit NewPendingAdmin(pendingAdmin);\\n    }\\n\\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\\n        require(msg.sender == admin, \\\"Timelock::queueTransaction: Call must come from admin.\\\");\\n        require(eta >= getBlockTimestamp().add(delay), \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = true;\\n\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = false;\\n\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\n    }\\n\\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\\n        require(msg.sender == admin, \\\"Timelock::executeTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        require(queuedTransactions[txHash], \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\");\\n        require(getBlockTimestamp() >= eta, \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\");\\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \\\"Timelock::executeTransaction: Transaction is stale.\\\");\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call{value : value}(callData);\\n        require(success, \\\"Timelock::executeTransaction: Transaction execution reverted.\\\");\\n\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\n\\n        return returnData;\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xd96d2ee9b62c0dde565a53d45bef1859a2a501d9b193769684079b28e85b1d4f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdc30fa248655dc9936342ff8f8d2c4669143123013acdea9fa04b234540a0763\"},\"contracts/interfaces/IStakePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IStakePool {\\n    event Deposit(address indexed account, uint256 amount);\\n    event AddRewardPool(uint256 indexed poolId);\\n    event UpdateRewardPool(uint256 indexed poolId, uint256 endRewardBlock, uint256 rewardPerBlock);\\n    event PayRewardPool(uint256 indexed poolId, address indexed rewardToken, address indexed account, uint256 pendingReward, uint256 rebaseAmount, uint256 paidReward);\\n    event UpdateRewardRebaser(uint256 indexed poolId, address rewardRebaser);\\n    event UpdateRewardMultiplier(uint256 indexed poolId, address rewardMultiplier);\\n    event Withdraw(address indexed account, uint256 amount);\\n    function version() external view returns (uint);\\n    function stakeToken() external view returns (address);\\n    function initialize(address _stakeToken, uint _unstakingFrozenTime, address _rewardFund, address _timelock) external;\\n\\n    function stake(uint) external;\\n\\n    function stakeFor(address _account) external;\\n\\n    function withdraw(uint) external;\\n\\n    function getReward(uint8 _pid, address _account) external;\\n\\n    function getAllRewards(address _account) external;\\n    function claimReward() external;\\n    function pendingReward(uint8 _pid, address _account) external view returns (uint);\\n\\n    function allowRecoverRewardToken(address _token) external view returns (bool);\\n    function getRewardPerBlock(uint8 pid) external view returns (uint);\\n    function rewardPoolInfoLength() external view returns (uint);\\n\\n    function unfrozenStakeTime(address _account) external view returns (uint);\\n\\n    function emergencyWithdraw() external;\\n\\n    function updateReward() external;\\n\\n    function updateReward(uint8 _pid) external;\\n\\n    function updateRewardPool(uint8 _pid, uint256 _endRewardBlock, uint256 _rewardPerBlock) external;\\n    function stopRewardPool(uint8 _pid) external;\\n    function getRewardMultiplier(uint8 _pid, uint _from, uint _to, uint _rewardPerBlock) external view returns (uint);\\n\\n    function getRewardRebase(uint8 _pid, address _rewardToken, uint _pendingReward) external view returns (uint);\\n\\n    function updateRewardRebaser(uint8 _pid, address _rewardRebaser) external;\\n\\n    function updateRewardMultiplier(uint8 _pid, address _rewardMultiplier) external;\\n\\n    function getUserInfo(uint8 _pid, address _account) external view returns (uint amount, uint rewardDebt, uint accumulatedEarned, uint lockReward, uint lockRewardReleased);\\n\\n    function addRewardPool(\\n        address _rewardToken,\\n        address _rewardRebaser,\\n        address _rewardMultiplier,\\n        uint256 _startBlock,\\n        uint256 _endRewardBlock,\\n        uint256 _rewardPerBlock,\\n        uint256 _lockRewardPercent,\\n        uint256 _startVestingBlock,\\n        uint256 _endVestingBlock\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc196a63fda79a817c3fe2aee2897a815ad72aaa0d9a0b96563567bbd501d6f4c\",\"license\":\"MIT\"},\"contracts/interfaces/IStakePoolController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma abicoder v2;\\npragma solidity 0.7.6;\\n\\ninterface IStakePoolController {\\n    event MasterCreated(address indexed farm, address indexed stakeToken, uint version, address timelock, address stakePoolRewardFund, uint totalStakePool);\\n    event SetWhitelistStakingFor(address indexed contractAddress, bool value);\\n    event SetWhitelistStakePool(address indexed contractAddress, int8 value);\\n    event SetStakePoolCreator(address indexed contractAddress, uint verion);\\n    event SetWhitelistRewardRebaser(address indexed contractAddress, bool value);\\n    event SetWhitelistRewardMultiplier(address indexed contractAddress, bool value);\\n    event SetStakePoolVerifier(address indexed contractAddress, bool value);\\n    event ChangeGovernance(address indexed governance);\\n    event SetFeeCollector(address indexed feeCollector);\\n    event SetFeeToken(address indexed token);\\n    event SetFeeAmount(uint indexed amount);\\n    event SetExtraFeeRate(uint indexed amount);\\n\\n\\n\\n    function allStakePools(uint) external view returns (address stakePool);\\n\\n    function isStakePool(address contractAddress) external view returns (bool);\\n    function isStakePoolVerifier(address contractAddress) external view returns (bool);\\n\\n    function isWhitelistStakingFor(address contractAddress) external view returns (bool);\\n    function isWhitelistStakePool(address contractAddress) external view returns (int8);\\n    function setStakePoolVerifier(address contractAddress, bool state) external;\\n    function setWhitelistStakingFor(address contractAddress, bool state) external;\\n\\n    function setWhitelistStakePool(address contractAddress, int8 state) external;\\n    function addStakePoolCreator(address contractAddress) external;\\n\\n    function isWhitelistRewardRebaser(address contractAddress) external view returns (bool);\\n    function isAllowEmergencyWithdrawStakePool(address _address) external view returns (bool);\\n    function setWhitelistRewardRebaser(address contractAddress, bool state) external;\\n\\n    function isWhitelistRewardMultiplier(address contractAddress) external view returns (bool);\\n    function setAllowEmergencyWithdrawStakePool(address _address, bool state) external;\\n    function setWhitelistRewardMultiplier(address contractAddress, bool state) external;\\n    function setEnableWhitelistRewardRebaser(bool value) external;\\n    function setEnableWhitelistRewardMultiplier(bool value) external;\\n    function allStakePoolsLength() external view returns (uint);\\n\\n    function create(uint version, address stakeToken, address rewardToken, uint rewardFundAmount, uint delayTimeLock, bytes calldata data) external returns (address);\\n\\n    function setGovernance(address) external;\\n\\n    function setFeeCollector(address _address) external;\\n    function setFeeToken(address _token) external;\\n    function setFeeAmount(uint _token) external;\\n    function setExtraFeeRate(uint _extraFeeRate) external;\\n\\n}\",\"keccak256\":\"0xf7ffd995740a98ba1e193fcedd2b0cabc0142842b8bedd14b8d6ec2945620fca\",\"license\":\"MIT\"},\"contracts/interfaces/IStakePoolCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma abicoder v2;\\npragma solidity 0.7.6;\\n\\ninterface IStakePoolCreator {\\n    function version() external returns (uint);\\n\\n    function create() external returns (address);\\n    function initialize(address poolAddress, address pair, address rewardToken, address timelock, address stakePoolRewardFund, bytes calldata data) external;\\n}\",\"keccak256\":\"0xfed47bcfc5ef51c4ed3dc252af2ed48b176f074670af2e9956d744578e6f2e73\",\"license\":\"MIT\"},\"contracts/interfaces/IStakePoolRewardFund.sol\":{\"content\":\"interface IStakePoolRewardFund {\\n    function initialize(address _stakePool, address _timelock) external;\\n\\n    function safeTransfer(address _token, address _to, uint _value) external;\\n}\",\"keccak256\":\"0x0ba19508fd5db0749996e0828d7993e163b24e5e107731e47e6754224ec1cfe0\"},\"contracts/interfaces/IStakePoolRewardMultiplier.sol\":{\"content\":\"interface IStakePoolRewardMultiplier {\\n    function getRewardMultiplier(uint _start, uint _end, uint _from, uint _to, uint _rewardPerBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xd9b5d72f9396bf0bdeaef53896bba463a235b4948c234d6339195d82761e6ef8\"},\"contracts/interfaces/IStakePoolRewardRebaser.sol\":{\"content\":\"interface IStakePoolRewardRebaser {\\n    function getRebaseAmount(address rewardToken, uint baseAmount) external view returns (uint);\\n}\",\"keccak256\":\"0x899c8012550ec4aad61f760951bc926aa65629cf8e29cd15be29f73e14e36b1b\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x771a09cfe236d26cfbfd1b048a0d68bd37710260efddfc9b175db51d8cd96b4f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052610bb960005534801561001657600080fd5b50613c1f806100266000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301f79fb61461004657806354fd4d501461005b578063efc81a8c14610079575b600080fd5b610059610054366004610250565b61008e565b005b6100636101d3565b6040516100709190610479565b60405180910390f35b6100816101d9565b604051610070919061039d565b86600061009d83850185610311565b90508173ffffffffffffffffffffffffffffffffffffffff1663c0eac9ea88836000015184602001518560400151866060015187608001518860a001518960c001518a60e001516040518a63ffffffff1660e01b8152600401610108999897969594939291906103e4565b600060405180830381600087803b15801561012257600080fd5b505af1158015610136573d6000803e3d6000fd5b505050506101008101516040517f358394d800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169163358394d891610196918c918a908c90600401610441565b600060405180830381600087803b1580156101b057600080fd5b505af11580156101c4573d6000803e3d6000fd5b50505050505050505050505050565b60005481565b600080336000546040516101ec9061021a565b6101f79291906103be565b604051809103906000f080158015610213573d6000803e3d6000fd5b5091505090565b613743806104a783390190565b803573ffffffffffffffffffffffffffffffffffffffff8116811461024b57600080fd5b919050565b600080600080600080600060c0888a03121561026a578283fd5b61027388610227565b965061028160208901610227565b955061028f60408901610227565b945061029d60608901610227565b93506102ab60808901610227565b925060a088013567ffffffffffffffff808211156102c7578384fd5b818a0191508a601f8301126102da578384fd5b8135818111156102e8578485fd5b8b60208285010111156102f9578485fd5b60208301945080935050505092959891949750929550565b6000610120808385031215610324578182fd5b61032d81610482565b905061033883610227565b815261034660208401610227565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152508091505092915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff998a16815297891660208901529590971660408701526060860193909352608085019190915260a084015260c083015260e08201929092526101008101919091526101200190565b73ffffffffffffffffffffffffffffffffffffffff948516815260208101939093529083166040830152909116606082015260800190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561049e57fe5b60405291905056fe60806040526203f4806008556001600955600a805460ff1916905534801561002657600080fd5b506040516137433803806137438339818101604052604081101561004957600080fd5b508051602090910151600680546001600160a01b039093166001600160a01b03199384161790556005805490921633179091556000556136b58061008e6000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806372aa0a6011610145578063c012c42e116100bd578063e2589d381161008c578063efe2226611610071578063efe222661461080c578063f36c0a7214610814578063f77c47911461081c57610241565b8063e2589d38146107c8578063e9fad8ee1461080457610241565b8063c012c42e1461071d578063c0eac9ea1461074f578063d33219b4146107b8578063db2e21bc146107c057610241565b806393ae1d1f11610114578063b69ef8a8116100f9578063b69ef8a8146106d1578063b88a802f146106d9578063be615335146106e157610241565b806393ae1d1f14610694578063a694fc3a146106b457610241565b806372aa0a601461056e57806376d743fe1461060c5780638583f6a51461063857806385cc179e1461067457610241565b806343768649116101d8578063597293f3116101a757806364467bbe1161018c57806364467bbe1461050a5780636bb987fe1461052a5780636d3c6d921461053257610241565b8063597293f31461049557806360d47088146104d757610241565b806343768649146104215780634bf692061461042957806351ed6a301461045c57806354fd4d501461048d57610241565b80632e1a7d4d116102145780632e1a7d4d1461033f5780633468a5b81461035e578063358394d8146103a5578063362a3fad146103ee57610241565b806317837baa146102465780631959a002146102605780631e9183fa146102ac57806329d79588146102d8575b600080fd5b61024e610824565b60408051918252519081900360200190f35b6102936004803603602081101561027657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661082a565b6040805192835260208301919091528051918290030190f35b61024e600480360360608110156102c257600080fd5b5060ff8135169060208101359060400135610843565b610314600480360360408110156102ee57600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff166108d6565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b61035c6004803603602081101561035557600080fd5b5035610936565b005b6103916004803603602081101561037457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a17565b604080519115158252519081900360200190f35b61035c600480360360808110156103bb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359160408201358116916060013516610a9f565b61035c6004803603602081101561040457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610bee565b61024e610c19565b61035c6004803603602081101561043f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c1f565b610464610dae565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61024e610dca565b61024e600480360360608110156104ab57600080fd5b5060ff8135169073ffffffffffffffffffffffffffffffffffffffff6020820135169060400135610dd0565b61024e600480360360208110156104ed57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ec5565b61035c6004803603602081101561052057600080fd5b503560ff16610ef7565b61024e611077565b61035c6004803603604081101561054857600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff1661107d565b61058b6004803603602081101561058457600080fd5b5035611562565b6040805173ffffffffffffffffffffffffffffffffffffffff9e8f1681529c8e1660208e01529a909c168b8b015260608b019890985260808a019690965260a089019490945260c088019290925260e08701526101008601526101208501526101408401526101608301526101808201929092529051908190036101a00190f35b61035c6004803603606081101561062257600080fd5b5060ff81351690602081013590604001356115f5565b61035c6004803603604081101561064e57600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff166117db565b61035c6004803603602081101561068a57600080fd5b503560ff16611a93565b61024e600480360360208110156106aa57600080fd5b503560ff16611bd5565b61035c600480360360208110156106ca57600080fd5b5035611beb565b61024e611c8f565b61035c611c95565b61024e600480360360408110156106f757600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff16611ca0565b61024e6004803603608081101561073357600080fd5b5060ff8135169060208101359060408101359060600135611e74565b61035c600480360361012081101561076657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040820135169060608101359060808101359060a08101359060c08101359060e0810135906101000135611f82565b610464612634565b61035c612650565b61035c600480360360408110156107de57600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff1661284e565b61035c612b06565b610464612b1f565b61035c612b3b565b610464612b64565b60085481565b6001602052600090815260409020805460069091015482565b60008060028560ff168154811061085657fe5b90600052602060002090600d0201905060008160060154905081600301548510806108845750816005015485115b15610894576000925050506108cf565b60006108a287878785611e74565b83549091506108c990889073ffffffffffffffffffffffffffffffffffffffff1683610dd0565b93505050505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160208181526040808420805460ff909616855292830182528084205460038401835281852054600485018452828620546005909501909352932054939492939092565b6009546001146109a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b60006009556109b581612b80565b6003546109d99073ffffffffffffffffffffffffffffffffffffffff163383612d04565b60408051828152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2506001600955565b6000805b60025460ff82161015610a9457600060028260ff1681548110610a3a57fe5b60009182526020909120600d90910201805490915073ffffffffffffffffffffffffffffffffffffffff85811691161415610a8b5760058101546203138001431015610a8b57600092505050610a9a565b50600101610a1b565b50600190505b919050565b600a5460ff1615610afb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806134c26024913960400191505060405180910390fd5b62278d006008541115610b59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806134e66028913960400191505060405180910390fd5b6003805473ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600893909355600480549285169284169290921790915560058054919093169116179055600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60025460005b8160ff168160ff161015610c1457610c0c818461107d565b600101610bf4565b505050565b60025490565b600954600114610c9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600955600654604080517f393a7484000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163393a748491602480820192602092909190829003018186803b158015610d0657600080fd5b505afa158015610d1a573d6000803e3d6000fd5b505050506040513d6020811015610d3057600080fd5b5051610d9d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5374616b65506f6f6c3a20496e76616c69642073656e64657200000000000000604482015290519081900360640190fd5b610da681612ed9565b506001600955565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b60008060028560ff1681548110610de357fe5b60009182526020909120600d90910201600181015490915073ffffffffffffffffffffffffffffffffffffffff1680610e205783925050506108cf565b8073ffffffffffffffffffffffffffffffffffffffff16632e81056686866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015610e8f57600080fd5b505afa158015610ea3573d6000803e3d6000fd5b505050506040513d6020811015610eb957600080fd5b50519695505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090206006015401919050565b600954600114610f6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff163314610ff357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600060028260ff168154811061100557fe5b90600052602060002090600d0201905061101e82611a93565b4360058201819055600060068301819055604080519283526020830191909152805160ff8516927fd50c9d621671c3fc38b7813912936d3cee3f956bdbf5f6c61b5091f2ff2b0fd592908290030190a250506001600955565b61708081565b61108682611a93565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081206002805491929160ff86169081106110bf57fe5b600091825260208083206007600d909302019182015460ff881684526001860190915260408320548554929450909291611118919061111290670de0b6b3a76400009061110c90876130f1565b90613164565b906131e5565b600884015490915080156112aa5783600a01544311156111ad5760ff871660009081526005860160209081526040808320546004890190925282205461115d916131e5565b905080156111a75761116f838261325c565b60ff89166000908152600588016020526040902054909350611191908261325c565b60ff891660009081526005880160205260409020555b506112aa565b81156112095760006111c4606461110c85856130f1565b90506111d083826131e5565b60ff891660009081526004880160205260409020549093506111f2908261325c565b60ff89166000908152600488016020526040902055505b6009840154438110156112a857600b85015460009061124a9061110c61122f43866131e5565b60ff8d16600090815260048c016020526040902054906130f1565b60ff8a166000908152600589016020526040902054909150808211156112a557600061127683836131e5565b9050611282828261325c565b60ff8c16600090815260058b0160205260409020556112a1868261325c565b9550505b50505b505b81156115595760ff871660009081526003860160205260409020546112cf908361325c565b60ff88166000908152600387016020526040902055600c8401546112f3908361325c565b600c850155845461131290670de0b6b3a76400009061110c90866130f1565b60ff8816600090815260018701602090815260408083209390935560028801905290812054611341908461325c565b60ff89166000908152600288016020908152604080832084905588546004805483517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821692810192909252925195965091169384926370a082319260248082019391829003018186803b1580156113d057600080fd5b505afa1580156113e4573d6000803e3d6000fd5b505050506040513d60208110156113fa57600080fd5b5051905080156115555760ff8a16600090815260028901602052604081208190556114268b8486610dd0565b905060008282116114375781611439565b825b60048054604080517fd1660f9900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116948201949094528f8416602482015260448101859052905193945091169163d1660f999160648082019260009290919082900301818387803b1580156114c157600080fd5b505af11580156114d5573d6000803e3d6000fd5b505050508a73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168d60ff167f16dc511f817964d1eb39e0c3e84ce317f07b5b12cdfa1f8c2f179a08836af51a88868660405180848152602001838152602001828152602001935050505060405180910390a450505b5050505b50505050505050565b6002818154811061157257600080fd5b60009182526020909120600d9091020180546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c015473ffffffffffffffffffffffffffffffffffffffff9b8c169d50998b169b9a9098169996989597949693959294919390928d565b60095460011461166657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff1633146116f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600060028460ff168154811061170357fe5b90600052602060002090600d02019050806005015443111580156117275750824311155b61177c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806135356027913960400191505060405180910390fd5b61178584611a93565b60058101839055600681018290556040805184815260208101849052815160ff8716927fd50c9d621671c3fc38b7813912936d3cee3f956bdbf5f6c61b5091f2ff2b0fd5928290030190a2505060016009555050565b60095460011461184c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff1633146118d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600654604080517fbd5b622a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169163bd5b622a916024808301926020929190829003018186803b15801561194a57600080fd5b505afa15801561195e573d6000803e3d6000fd5b505050506040513d602081101561197457600080fd5b50516119cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806135d16021913960400191505060405180910390fd5b600060028360ff16815481106119dd57fe5b60009182526020909120600d909102016001810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790559050611a3a83611a93565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152905160ff8516917fe6b2c8a01867d369cd4952ca70fea492ef433a6ff31b8c8d15c4781f136e60ed919081900360200190a25050600160095550565b600060028260ff1681548110611aa557fe5b90600052602060002090600d020190506000816005015490506000814311611acd5743611acf565b815b600484015490915080821115611bce57600354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015611b5057600080fd5b505afa158015611b64573d6000803e3d6000fd5b505050506040513d6020811015611b7a57600080fd5b505190508015611bc5576000611bac8261110c670de0b6b3a7640000611ba68b888a8d60060154611e74565b906130f1565b6007870154909150611bbe908261325c565b6007870155505b50600484018290555b5050505050565b6000611be5824343600101610843565b92915050565b600954600114611c5c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600955600354611c869073ffffffffffffffffffffffffffffffffffffffff163330846132d0565b610da633612ed9565b60075481565b611c9e33610bee565b565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081206002805483919060ff8716908110611cd957fe5b600091825260208083206007600d9093020191820154600354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965091949373ffffffffffffffffffffffffffffffffffffffff909116926370a082319260248082019391829003018186803b158015611d6157600080fd5b505afa158015611d75573d6000803e3d6000fd5b505050506040513d6020811015611d8b57600080fd5b505160058401549091506000438210611da45743611da6565b815b60048601549091508082118015611dbc57508315155b15611df3576000611de38561110c670de0b6b3a7640000611ba68f87898e60060154611e74565b9050611def868261325c565b9550505b60ff8a16600090815260018801602090815260408083205460028b019092528220548954611e3e929161111291611e3890670de0b6b3a76400009061110c908d6130f1565b9061325c565b8754909150611e65908c9073ffffffffffffffffffffffffffffffffffffffff1683610dd0565b9b9a5050505050505050505050565b60008060028660ff1681548110611e8757fe5b60009182526020909120600d90910201600281015490915073ffffffffffffffffffffffffffffffffffffffff1680611ed157611ec884611ba687896131e5565b92505050611f7a565b8073ffffffffffffffffffffffffffffffffffffffff16629fc047836003015484600501548989896040518663ffffffff1660e01b8152600401808681526020018581526020018481526020018381526020018281526020019550505050505060206040518083038186803b158015611f4957600080fd5b505afa158015611f5d573d6000803e3d6000fd5b505050506040513d6020811015611f7357600080fd5b5051925050505b949350505050565b600954600114611ff357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff16331461207e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600254601010156120da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806134a06022913960400191505060405180910390fd5b600654604080517fbd5b622a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301529151919092169163bd5b622a916024808301926020929190829003018186803b15801561214d57600080fd5b505afa158015612161573d6000803e3d6000fd5b505050506040513d602081101561217757600080fd5b50516121ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806135d16021913960400191505060405180910390fd5b600654604080517fa5120bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301529151919092169163a5120bd5916024808301926020929190829003018186803b15801561224157600080fd5b505afa158015612255573d6000803e3d6000fd5b505050506040513d602081101561226b57600080fd5b50516122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806135f26024913960400191505060405180910390fd5b8082111561231b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806135a3602e913960400191505060405180910390fd5b854311612328578561232a565b435b9550848610612384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061350e6027913960400191505060405180910390fd5b60648311156123de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806136166024913960400191505060405180910390fd5b6123e6612b3b565b6002604051806101a001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001888152602001878152602001868152602001600081526020018581526020018481526020018381526020018484038152602001600081525090806001815401808255809150506001900390600052602060002090600d020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c015550506001600280549050037fa2c202ffa25e71dc0d2875a9b67a9e2572541a0a246c21d72355cca968fd4be160405160405180910390a25050600160095550505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b6009546001146126c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600955600654604080517fea74109e000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163ea74109e91602480820192602092909190829003018186803b15801561273757600080fd5b505afa15801561274b573d6000803e3d6000fd5b505050506040513d602081101561276157600080fd5b50516127b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061357d6026913960400191505060405180910390fd5b33600090815260016020526040902080546007546127d690826131e5565b600755600082556003546128019073ffffffffffffffffffffffffffffffffffffffff163383612d04565b60025460005b8160ff168160ff1610156128435760ff811660009081526001808601602090815260408084208490556002880190915282209190915501612807565b505060016009555050565b6009546001146128bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff16331461294a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600654604080517fa5120bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169163a5120bd5916024808301926020929190829003018186803b1580156129bd57600080fd5b505afa1580156129d1573d6000803e3d6000fd5b505050506040513d60208110156129e757600080fd5b5051612a3e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806135f26024913960400191505060405180910390fd5b600060028360ff1681548110612a5057fe5b60009182526020909120600d909102016002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790559050612aad83611a93565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152905160ff8516917fa5e6b0a10fde1bb3c6184cb03bd87ce234e172121088195454746cf4a2e8094d919081900360200190a25050600160095550565b33600090815260016020526040902054611c9e90610936565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60025460005b8160ff168160ff161015612b6057612b5881611a93565b600101612b41565b5050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b3360009081526001602052604090208054821115612be9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061363a6022913960400191505060405180910390fd5b6008546006820154612bfa9161325c565b421015612c6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a2066726f7a656e000000000000000000000000000000604482015290519081900360640190fd5b612c7133610bee565b600754612c7e90836131e5565b6007558054612c8d90836131e5565b815560025460005b8160ff168160ff161015612cfe57612cde670de0b6b3a764000061110c60028460ff1681548110612cc257fe5b600091825260209091206007600d9092020101548654906130f1565b60ff82166000908152600180860160205260409091209190915501612c95565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310612dd957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612d9c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612e3b576040519150601f19603f3d011682016040523d82523d6000602084013e612e40565b606091505b5091509150818015612e6e575080511580612e6e5750808060200190516020811015612e6b57600080fd5b50515b611bce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b600754600354604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093612f8893909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015612f5657600080fd5b505afa158015612f6a573d6000803e3d6000fd5b505050506040513d6020811015612f8057600080fd5b5051906131e5565b905060008111612ff957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5374616b65506f6f6c3a20496e76616c69642062616c616e6365000000000000604482015290519081900360640190fd5b600754613006908261325c565b60075573ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902061303783610bee565b8054613043908361325c565b815560025460005b8160ff168160ff16101561309857613078670de0b6b3a764000061110c60028460ff1681548110612cc257fe5b60ff8216600090815260018086016020526040909120919091550161304b565b5042600683015560408051848152905173ffffffffffffffffffffffffffffffffffffffff8616917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a250505050565b60008261310057506000611be5565b8282028284828161310d57fe5b04146108cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061355c6021913960400191505060405180910390fd5b60008082116131d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816131dd57fe5b049392505050565b60008282111561325657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000828201838110156108cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106133ad57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613370565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461340f576040519150601f19603f3d011682016040523d82523d6000602084013e613414565b606091505b5091509150818015613442575080511580613442575080806020019051602081101561343f57600080fd5b50515b613497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061365c6024913960400191505060405180910390fd5b50505050505056fe5374616b65506f6f6c3a2052657761726420706f6f6c206c656e677468203e2031365374616b65506f6f6c3a20496e697469616c697a65206d7573742062652066616c73652e5374616b65506f6f6c3a20756e7374616b696e6746726f7a656e54696d65203e20333020646179735374616b65506f6f6c3a207374617274426c6f636b203e3d20656e64526577617264426c6f636b5374616b65506f6f6c3a20626c6f636b4e756d626572203e20656e64526577617264426c6f636b536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775374616b65506f6f6c3a204e6f7420616c6c6f7720656d657267656e637957697468647261775374616b65506f6f6c3a20737461727456657374696e67426c6f636b203e20656e6456657374696e67426c6f636b5374616b65506f6f6c3a20496e76616c69642072657761726420726562617365725374616b65506f6f6c3a20496e76616c696420726577617264206d756c7469706c6965725374616b65506f6f6c3a20696e76616c6964206c6f636b52657761726450657263656e745374616b65506f6f6c3a20696e76616c696420776974686472617720616d6f756e745472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220adb5cc0b2b8d14b00d586400499545a9bd3960043ce0d32d596ccfbb8ad19ae864736f6c63430007060033a2646970667358221220155504c59fdc25c076f2c4cac1bfe9c904e42d9a54ea874b03fdc3d0e657225264736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806301f79fb61461004657806354fd4d501461005b578063efc81a8c14610079575b600080fd5b610059610054366004610250565b61008e565b005b6100636101d3565b6040516100709190610479565b60405180910390f35b6100816101d9565b604051610070919061039d565b86600061009d83850185610311565b90508173ffffffffffffffffffffffffffffffffffffffff1663c0eac9ea88836000015184602001518560400151866060015187608001518860a001518960c001518a60e001516040518a63ffffffff1660e01b8152600401610108999897969594939291906103e4565b600060405180830381600087803b15801561012257600080fd5b505af1158015610136573d6000803e3d6000fd5b505050506101008101516040517f358394d800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169163358394d891610196918c918a908c90600401610441565b600060405180830381600087803b1580156101b057600080fd5b505af11580156101c4573d6000803e3d6000fd5b50505050505050505050505050565b60005481565b600080336000546040516101ec9061021a565b6101f79291906103be565b604051809103906000f080158015610213573d6000803e3d6000fd5b5091505090565b613743806104a783390190565b803573ffffffffffffffffffffffffffffffffffffffff8116811461024b57600080fd5b919050565b600080600080600080600060c0888a03121561026a578283fd5b61027388610227565b965061028160208901610227565b955061028f60408901610227565b945061029d60608901610227565b93506102ab60808901610227565b925060a088013567ffffffffffffffff808211156102c7578384fd5b818a0191508a601f8301126102da578384fd5b8135818111156102e8578485fd5b8b60208285010111156102f9578485fd5b60208301945080935050505092959891949750929550565b6000610120808385031215610324578182fd5b61032d81610482565b905061033883610227565b815261034660208401610227565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152508091505092915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff998a16815297891660208901529590971660408701526060860193909352608085019190915260a084015260c083015260e08201929092526101008101919091526101200190565b73ffffffffffffffffffffffffffffffffffffffff948516815260208101939093529083166040830152909116606082015260800190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561049e57fe5b60405291905056fe60806040526203f4806008556001600955600a805460ff1916905534801561002657600080fd5b506040516137433803806137438339818101604052604081101561004957600080fd5b508051602090910151600680546001600160a01b039093166001600160a01b03199384161790556005805490921633179091556000556136b58061008e6000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806372aa0a6011610145578063c012c42e116100bd578063e2589d381161008c578063efe2226611610071578063efe222661461080c578063f36c0a7214610814578063f77c47911461081c57610241565b8063e2589d38146107c8578063e9fad8ee1461080457610241565b8063c012c42e1461071d578063c0eac9ea1461074f578063d33219b4146107b8578063db2e21bc146107c057610241565b806393ae1d1f11610114578063b69ef8a8116100f9578063b69ef8a8146106d1578063b88a802f146106d9578063be615335146106e157610241565b806393ae1d1f14610694578063a694fc3a146106b457610241565b806372aa0a601461056e57806376d743fe1461060c5780638583f6a51461063857806385cc179e1461067457610241565b806343768649116101d8578063597293f3116101a757806364467bbe1161018c57806364467bbe1461050a5780636bb987fe1461052a5780636d3c6d921461053257610241565b8063597293f31461049557806360d47088146104d757610241565b806343768649146104215780634bf692061461042957806351ed6a301461045c57806354fd4d501461048d57610241565b80632e1a7d4d116102145780632e1a7d4d1461033f5780633468a5b81461035e578063358394d8146103a5578063362a3fad146103ee57610241565b806317837baa146102465780631959a002146102605780631e9183fa146102ac57806329d79588146102d8575b600080fd5b61024e610824565b60408051918252519081900360200190f35b6102936004803603602081101561027657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661082a565b6040805192835260208301919091528051918290030190f35b61024e600480360360608110156102c257600080fd5b5060ff8135169060208101359060400135610843565b610314600480360360408110156102ee57600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff166108d6565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b61035c6004803603602081101561035557600080fd5b5035610936565b005b6103916004803603602081101561037457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a17565b604080519115158252519081900360200190f35b61035c600480360360808110156103bb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359160408201358116916060013516610a9f565b61035c6004803603602081101561040457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610bee565b61024e610c19565b61035c6004803603602081101561043f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c1f565b610464610dae565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61024e610dca565b61024e600480360360608110156104ab57600080fd5b5060ff8135169073ffffffffffffffffffffffffffffffffffffffff6020820135169060400135610dd0565b61024e600480360360208110156104ed57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ec5565b61035c6004803603602081101561052057600080fd5b503560ff16610ef7565b61024e611077565b61035c6004803603604081101561054857600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff1661107d565b61058b6004803603602081101561058457600080fd5b5035611562565b6040805173ffffffffffffffffffffffffffffffffffffffff9e8f1681529c8e1660208e01529a909c168b8b015260608b019890985260808a019690965260a089019490945260c088019290925260e08701526101008601526101208501526101408401526101608301526101808201929092529051908190036101a00190f35b61035c6004803603606081101561062257600080fd5b5060ff81351690602081013590604001356115f5565b61035c6004803603604081101561064e57600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff166117db565b61035c6004803603602081101561068a57600080fd5b503560ff16611a93565b61024e600480360360208110156106aa57600080fd5b503560ff16611bd5565b61035c600480360360208110156106ca57600080fd5b5035611beb565b61024e611c8f565b61035c611c95565b61024e600480360360408110156106f757600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff16611ca0565b61024e6004803603608081101561073357600080fd5b5060ff8135169060208101359060408101359060600135611e74565b61035c600480360361012081101561076657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040820135169060608101359060808101359060a08101359060c08101359060e0810135906101000135611f82565b610464612634565b61035c612650565b61035c600480360360408110156107de57600080fd5b50803560ff16906020013573ffffffffffffffffffffffffffffffffffffffff1661284e565b61035c612b06565b610464612b1f565b61035c612b3b565b610464612b64565b60085481565b6001602052600090815260409020805460069091015482565b60008060028560ff168154811061085657fe5b90600052602060002090600d0201905060008160060154905081600301548510806108845750816005015485115b15610894576000925050506108cf565b60006108a287878785611e74565b83549091506108c990889073ffffffffffffffffffffffffffffffffffffffff1683610dd0565b93505050505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160208181526040808420805460ff909616855292830182528084205460038401835281852054600485018452828620546005909501909352932054939492939092565b6009546001146109a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b60006009556109b581612b80565b6003546109d99073ffffffffffffffffffffffffffffffffffffffff163383612d04565b60408051828152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2506001600955565b6000805b60025460ff82161015610a9457600060028260ff1681548110610a3a57fe5b60009182526020909120600d90910201805490915073ffffffffffffffffffffffffffffffffffffffff85811691161415610a8b5760058101546203138001431015610a8b57600092505050610a9a565b50600101610a1b565b50600190505b919050565b600a5460ff1615610afb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806134c26024913960400191505060405180910390fd5b62278d006008541115610b59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806134e66028913960400191505060405180910390fd5b6003805473ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600893909355600480549285169284169290921790915560058054919093169116179055600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60025460005b8160ff168160ff161015610c1457610c0c818461107d565b600101610bf4565b505050565b60025490565b600954600114610c9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600955600654604080517f393a7484000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163393a748491602480820192602092909190829003018186803b158015610d0657600080fd5b505afa158015610d1a573d6000803e3d6000fd5b505050506040513d6020811015610d3057600080fd5b5051610d9d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5374616b65506f6f6c3a20496e76616c69642073656e64657200000000000000604482015290519081900360640190fd5b610da681612ed9565b506001600955565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b60008060028560ff1681548110610de357fe5b60009182526020909120600d90910201600181015490915073ffffffffffffffffffffffffffffffffffffffff1680610e205783925050506108cf565b8073ffffffffffffffffffffffffffffffffffffffff16632e81056686866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015610e8f57600080fd5b505afa158015610ea3573d6000803e3d6000fd5b505050506040513d6020811015610eb957600080fd5b50519695505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604090206006015401919050565b600954600114610f6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff163314610ff357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600060028260ff168154811061100557fe5b90600052602060002090600d0201905061101e82611a93565b4360058201819055600060068301819055604080519283526020830191909152805160ff8516927fd50c9d621671c3fc38b7813912936d3cee3f956bdbf5f6c61b5091f2ff2b0fd592908290030190a250506001600955565b61708081565b61108682611a93565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081206002805491929160ff86169081106110bf57fe5b600091825260208083206007600d909302019182015460ff881684526001860190915260408320548554929450909291611118919061111290670de0b6b3a76400009061110c90876130f1565b90613164565b906131e5565b600884015490915080156112aa5783600a01544311156111ad5760ff871660009081526005860160209081526040808320546004890190925282205461115d916131e5565b905080156111a75761116f838261325c565b60ff89166000908152600588016020526040902054909350611191908261325c565b60ff891660009081526005880160205260409020555b506112aa565b81156112095760006111c4606461110c85856130f1565b90506111d083826131e5565b60ff891660009081526004880160205260409020549093506111f2908261325c565b60ff89166000908152600488016020526040902055505b6009840154438110156112a857600b85015460009061124a9061110c61122f43866131e5565b60ff8d16600090815260048c016020526040902054906130f1565b60ff8a166000908152600589016020526040902054909150808211156112a557600061127683836131e5565b9050611282828261325c565b60ff8c16600090815260058b0160205260409020556112a1868261325c565b9550505b50505b505b81156115595760ff871660009081526003860160205260409020546112cf908361325c565b60ff88166000908152600387016020526040902055600c8401546112f3908361325c565b600c850155845461131290670de0b6b3a76400009061110c90866130f1565b60ff8816600090815260018701602090815260408083209390935560028801905290812054611341908461325c565b60ff89166000908152600288016020908152604080832084905588546004805483517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821692810192909252925195965091169384926370a082319260248082019391829003018186803b1580156113d057600080fd5b505afa1580156113e4573d6000803e3d6000fd5b505050506040513d60208110156113fa57600080fd5b5051905080156115555760ff8a16600090815260028901602052604081208190556114268b8486610dd0565b905060008282116114375781611439565b825b60048054604080517fd1660f9900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116948201949094528f8416602482015260448101859052905193945091169163d1660f999160648082019260009290919082900301818387803b1580156114c157600080fd5b505af11580156114d5573d6000803e3d6000fd5b505050508a73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168d60ff167f16dc511f817964d1eb39e0c3e84ce317f07b5b12cdfa1f8c2f179a08836af51a88868660405180848152602001838152602001828152602001935050505060405180910390a450505b5050505b50505050505050565b6002818154811061157257600080fd5b60009182526020909120600d9091020180546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c015473ffffffffffffffffffffffffffffffffffffffff9b8c169d50998b169b9a9098169996989597949693959294919390928d565b60095460011461166657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff1633146116f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600060028460ff168154811061170357fe5b90600052602060002090600d02019050806005015443111580156117275750824311155b61177c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806135356027913960400191505060405180910390fd5b61178584611a93565b60058101839055600681018290556040805184815260208101849052815160ff8716927fd50c9d621671c3fc38b7813912936d3cee3f956bdbf5f6c61b5091f2ff2b0fd5928290030190a2505060016009555050565b60095460011461184c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff1633146118d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600654604080517fbd5b622a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169163bd5b622a916024808301926020929190829003018186803b15801561194a57600080fd5b505afa15801561195e573d6000803e3d6000fd5b505050506040513d602081101561197457600080fd5b50516119cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806135d16021913960400191505060405180910390fd5b600060028360ff16815481106119dd57fe5b60009182526020909120600d909102016001810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790559050611a3a83611a93565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152905160ff8516917fe6b2c8a01867d369cd4952ca70fea492ef433a6ff31b8c8d15c4781f136e60ed919081900360200190a25050600160095550565b600060028260ff1681548110611aa557fe5b90600052602060002090600d020190506000816005015490506000814311611acd5743611acf565b815b600484015490915080821115611bce57600354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015611b5057600080fd5b505afa158015611b64573d6000803e3d6000fd5b505050506040513d6020811015611b7a57600080fd5b505190508015611bc5576000611bac8261110c670de0b6b3a7640000611ba68b888a8d60060154611e74565b906130f1565b6007870154909150611bbe908261325c565b6007870155505b50600484018290555b5050505050565b6000611be5824343600101610843565b92915050565b600954600114611c5c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600955600354611c869073ffffffffffffffffffffffffffffffffffffffff163330846132d0565b610da633612ed9565b60075481565b611c9e33610bee565b565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081206002805483919060ff8716908110611cd957fe5b600091825260208083206007600d9093020191820154600354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965091949373ffffffffffffffffffffffffffffffffffffffff909116926370a082319260248082019391829003018186803b158015611d6157600080fd5b505afa158015611d75573d6000803e3d6000fd5b505050506040513d6020811015611d8b57600080fd5b505160058401549091506000438210611da45743611da6565b815b60048601549091508082118015611dbc57508315155b15611df3576000611de38561110c670de0b6b3a7640000611ba68f87898e60060154611e74565b9050611def868261325c565b9550505b60ff8a16600090815260018801602090815260408083205460028b019092528220548954611e3e929161111291611e3890670de0b6b3a76400009061110c908d6130f1565b9061325c565b8754909150611e65908c9073ffffffffffffffffffffffffffffffffffffffff1683610dd0565b9b9a5050505050505050505050565b60008060028660ff1681548110611e8757fe5b60009182526020909120600d90910201600281015490915073ffffffffffffffffffffffffffffffffffffffff1680611ed157611ec884611ba687896131e5565b92505050611f7a565b8073ffffffffffffffffffffffffffffffffffffffff16629fc047836003015484600501548989896040518663ffffffff1660e01b8152600401808681526020018581526020018481526020018381526020018281526020019550505050505060206040518083038186803b158015611f4957600080fd5b505afa158015611f5d573d6000803e3d6000fd5b505050506040513d6020811015611f7357600080fd5b5051925050505b949350505050565b600954600114611ff357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff16331461207e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600254601010156120da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806134a06022913960400191505060405180910390fd5b600654604080517fbd5b622a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301529151919092169163bd5b622a916024808301926020929190829003018186803b15801561214d57600080fd5b505afa158015612161573d6000803e3d6000fd5b505050506040513d602081101561217757600080fd5b50516121ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806135d16021913960400191505060405180910390fd5b600654604080517fa5120bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301529151919092169163a5120bd5916024808301926020929190829003018186803b15801561224157600080fd5b505afa158015612255573d6000803e3d6000fd5b505050506040513d602081101561226b57600080fd5b50516122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806135f26024913960400191505060405180910390fd5b8082111561231b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806135a3602e913960400191505060405180910390fd5b854311612328578561232a565b435b9550848610612384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061350e6027913960400191505060405180910390fd5b60648311156123de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806136166024913960400191505060405180910390fd5b6123e6612b3b565b6002604051806101a001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001888152602001878152602001868152602001600081526020018581526020018481526020018381526020018484038152602001600081525090806001815401808255809150506001900390600052602060002090600d020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c015550506001600280549050037fa2c202ffa25e71dc0d2875a9b67a9e2572541a0a246c21d72355cca968fd4be160405160405180910390a25050600160095550505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b6009546001146126c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600955600654604080517fea74109e000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163ea74109e91602480820192602092909190829003018186803b15801561273757600080fd5b505afa15801561274b573d6000803e3d6000fd5b505050506040513d602081101561276157600080fd5b50516127b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061357d6026913960400191505060405180910390fd5b33600090815260016020526040902080546007546127d690826131e5565b600755600082556003546128019073ffffffffffffffffffffffffffffffffffffffff163383612d04565b60025460005b8160ff168160ff1610156128435760ff811660009081526001808601602090815260408084208490556002880190915282209190915501612807565b505060016009555050565b6009546001146128bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b600060095560055473ffffffffffffffffffffffffffffffffffffffff16331461294a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5374616b65506f6f6c3a202174696d656c6f636b000000000000000000000000604482015290519081900360640190fd5b600654604080517fa5120bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169163a5120bd5916024808301926020929190829003018186803b1580156129bd57600080fd5b505afa1580156129d1573d6000803e3d6000fd5b505050506040513d60208110156129e757600080fd5b5051612a3e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806135f26024913960400191505060405180910390fd5b600060028360ff1681548110612a5057fe5b60009182526020909120600d909102016002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790559050612aad83611a93565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152905160ff8516917fa5e6b0a10fde1bb3c6184cb03bd87ce234e172121088195454746cf4a2e8094d919081900360200190a25050600160095550565b33600090815260016020526040902054611c9e90610936565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60025460005b8160ff168160ff161015612b6057612b5881611a93565b600101612b41565b5050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b3360009081526001602052604090208054821115612be9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061363a6022913960400191505060405180910390fd5b6008546006820154612bfa9161325c565b421015612c6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5374616b65506f6f6c3a2066726f7a656e000000000000000000000000000000604482015290519081900360640190fd5b612c7133610bee565b600754612c7e90836131e5565b6007558054612c8d90836131e5565b815560025460005b8160ff168160ff161015612cfe57612cde670de0b6b3a764000061110c60028460ff1681548110612cc257fe5b600091825260209091206007600d9092020101548654906130f1565b60ff82166000908152600180860160205260409091209190915501612c95565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310612dd957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612d9c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612e3b576040519150601f19603f3d011682016040523d82523d6000602084013e612e40565b606091505b5091509150818015612e6e575080511580612e6e5750808060200190516020811015612e6b57600080fd5b50515b611bce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b600754600354604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093612f8893909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015612f5657600080fd5b505afa158015612f6a573d6000803e3d6000fd5b505050506040513d6020811015612f8057600080fd5b5051906131e5565b905060008111612ff957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5374616b65506f6f6c3a20496e76616c69642062616c616e6365000000000000604482015290519081900360640190fd5b600754613006908261325c565b60075573ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902061303783610bee565b8054613043908361325c565b815560025460005b8160ff168160ff16101561309857613078670de0b6b3a764000061110c60028460ff1681548110612cc257fe5b60ff8216600090815260018086016020526040909120919091550161304b565b5042600683015560408051848152905173ffffffffffffffffffffffffffffffffffffffff8616917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a250505050565b60008261310057506000611be5565b8282028284828161310d57fe5b04146108cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061355c6021913960400191505060405180910390fd5b60008082116131d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816131dd57fe5b049392505050565b60008282111561325657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000828201838110156108cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106133ad57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613370565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461340f576040519150601f19603f3d011682016040523d82523d6000602084013e613414565b606091505b5091509150818015613442575080511580613442575080806020019051602081101561343f57600080fd5b50515b613497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061365c6024913960400191505060405180910390fd5b50505050505056fe5374616b65506f6f6c3a2052657761726420706f6f6c206c656e677468203e2031365374616b65506f6f6c3a20496e697469616c697a65206d7573742062652066616c73652e5374616b65506f6f6c3a20756e7374616b696e6746726f7a656e54696d65203e20333020646179735374616b65506f6f6c3a207374617274426c6f636b203e3d20656e64526577617264426c6f636b5374616b65506f6f6c3a20626c6f636b4e756d626572203e20656e64526577617264426c6f636b536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775374616b65506f6f6c3a204e6f7420616c6c6f7720656d657267656e637957697468647261775374616b65506f6f6c3a20737461727456657374696e67426c6f636b203e20656e6456657374696e67426c6f636b5374616b65506f6f6c3a20496e76616c69642072657761726420726562617365725374616b65506f6f6c3a20496e76616c696420726577617264206d756c7469706c6965725374616b65506f6f6c3a20696e76616c6964206c6f636b52657761726450657263656e745374616b65506f6f6c3a20696e76616c696420776974686472617720616d6f756e745472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220adb5cc0b2b8d14b00d586400499545a9bd3960043ce0d32d596ccfbb8ad19ae864736f6c63430007060033a2646970667358221220155504c59fdc25c076f2c4cac1bfe9c904e42d9a54ea874b03fdc3d0e657225264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11127,
        "contract": "contracts/StakePoolCreator.sol:StakePoolCreator",
        "label": "version",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}