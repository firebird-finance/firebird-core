{
  "address": "0x44219f1532dbC3Ee31A9f65aC31F66F813b7c763",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_pooledTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decimals",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lpTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "timeLock",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f259ba2cf48d41aceb007d50d2927c649cebcf6ac2d87030c67edbbd00582bc",
  "receipt": {
    "to": null,
    "from": "0x7a1a8Ecd640bB8399DB2c5265A45AD8a91BF63CC",
    "contractAddress": "0x44219f1532dbC3Ee31A9f65aC31F66F813b7c763",
    "transactionIndex": 7,
    "gasUsed": "5273548",
    "logsBloom": "0x
    "blockHash": "0x1fed35b9f3c435dfa1746749358dc0d0178a06914a08dd9513649d138d729740",
    "transactionHash": "0x5f259ba2cf48d41aceb007d50d2927c649cebcf6ac2d87030c67edbbd00582bc",
    "logs": [],
    "blockNumber": 8925234,
    "cumulativeGasUsed": "6041702",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "62812d29f709351baf601151a10eb8e0",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_pooledTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"timeLock\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableSwap/SwapCreator.sol\":\"SwapCreator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapFactory.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStableSwapFactory {\\n    event SwapCreated(IERC20[] pooledTokens, address indexed swap, uint length);\\n    event SetFeeTo(address indexed feeTo);\\n    event SetFeeToken(address indexed token);\\n    event SetFeeAmount(uint indexed amount);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function allPools(uint) external view returns (address pool);\\n    function isPool(address) external view returns (bool);\\n    function allPoolsLength() external view returns (uint);\\n\\n    function isTimelock(address) external view returns (bool);\\n\\n    function createPool(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        uint256 _withdrawFee,\\n        uint delayTimeLock\\n    ) external returns (address pool);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setFeeToken(address _token) external;\\n    function setFeeAmount(uint _token) external;\\n}\\n\",\"keccak256\":\"0x2f4aeac402451c76bfb174d943bf429b1c0ca43240043bf9bed2ccc8d39a2dfc\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenLength() external view returns (uint);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function swapStorage() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, address);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    // withdraw fee update function\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\\n    external;\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateTokenAmount(\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n}\\n\",\"keccak256\":\"0x830f79d1e17a4fbb800902e2866bb95a18c91de7956ceada7159441fb28fded5\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISwapCreator {\\n\\n    function create(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        uint256 _withdrawFee,\\n        address timeLock\\n    ) external returns (address);\\n}\",\"keccak256\":\"0x40ccb9e870bb43d228d0d20de0569cf552b74bd965bf8e0dfd7a55771fc28296\",\"license\":\"MIT\"},\"contracts/stableSwap/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n */\\ncontract LPToken is ERC20Burnable, Ownable {\\n    using SafeMath for uint256;\\n\\n    // Address of the swap contract that owns this LP token. When a user adds liquidity to the swap contract,\\n    // they receive a proportionate amount of this LPToken.\\n    ISwap public swap;\\n\\n    /**\\n     * @notice Deploys LPToken contract with given name, symbol, and decimals\\n     * @dev the caller of this constructor will become the owner of this contract\\n     * @param name_ name of this token\\n     * @param symbol_ symbol of this token\\n     * @param decimals_ number of decimals this token will be based on\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public ERC20(name_, symbol_) {\\n        _setupDecimals(decimals_);\\n        swap = ISwap(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Mints the given amount of LPToken to the recipient.\\n     * @dev only owner can call this mint function\\n     * @param recipient address of account to receive the tokens\\n     * @param amount amount of tokens to mint\\n     */\\n    function mint(\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        require(amount != 0, \\\"amount == 0\\\");\\n        _mint(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x86d9c09dc9677d3087aa6a0d9e7f221bc01b6ca0220c59e3b0512d278a7e4dfa\",\"license\":\"MIT\"},\"contracts/stableSwap/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title MathUtils library\\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\\n * differences between two uint256.\\n */\\nlibrary MathUtils {\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) external pure returns (bool) {\\n        return (_difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) external pure returns (uint256) {\\n        return _difference(a, b);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function _difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\",\"keccak256\":\"0xfcbf4da0de5a883f3c009d389011cc926034d9957269a1f0a5f5985e9ddee163\",\"license\":\"MIT\"},\"contracts/stableSwap/OwnerPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title OwnerPausable\\n * @notice An ownable contract allows the owner to pause and unpause the\\n * contract without a delay.\\n * @dev Only methods using the provided modifiers will be paused.\\n */\\ncontract OwnerPausable is Ownable, Pausable {\\n    /**\\n     * @notice Pause the contract. Revert if already paused.\\n     */\\n    function pause() external onlyOwner {\\n        Pausable._pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract. Revert if already unpaused.\\n     */\\n    function unpause() external onlyOwner {\\n        Pausable._unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x54acfb1dd51f2b8e8e9fc6ee280c0eaa65723691203a2bebc77bf37160603220\",\"license\":\"MIT\"},\"contracts/stableSwap/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./OwnerPausable.sol\\\";\\nimport \\\"./SwapUtils.sol\\\";\\nimport \\\"./MathUtils.sol\\\";\\nimport \\\"../interfaces/IStableSwapFactory.sol\\\";\\n\\n/**\\n * @title Swap - A StableSwap implementation in solidity.\\n * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)\\n * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens\\n * in desired ratios for an exchange of the pool token that represents their share of the pool.\\n * Users can burn pool tokens and withdraw their share of token(s).\\n *\\n * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\\n * distributed to the LPs.\\n *\\n * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\\n * stops the ratio of the tokens in the pool from changing.\\n * Users can always withdraw their tokens via multi-asset withdraws.\\n *\\n * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's\\n * deployment size.\\n */\\ncontract Swap is OwnerPausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using MathUtils for uint256;\\n    using SwapUtils for SwapUtils.Swap;\\n\\n    // Struct storing data responsible for automatic market maker functionalities. In order to\\n    // access this data, this contract uses SwapUtils library. For more details, see SwapUtils.sol\\n    SwapUtils.Swap public swapStorage;\\n\\n    // Maps token address to an index in the pool. Used to prevent duplicate tokens in the pool.\\n    // getTokenIndex function also relies on this mapping to retrieve token index.\\n    mapping(address => uint8) private tokenIndexes;\\n    address public factory;\\n    bool private _initialized = false;\\n\\n    /*** EVENTS ***/\\n\\n    // events replicated from SwapUtils to make the ABI easier for dumb\\n    // clients\\n    event TokenSwap(\\n        address indexed buyer,\\n        uint256 tokensSold,\\n        uint256 tokensBought,\\n        uint128 soldId,\\n        uint128 boughtId\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event CollectProtocolFee(address token, uint256 amount);\\n    event NewAdminFee(uint256 newAdminFee);\\n    event NewSwapFee(uint256 newSwapFee);\\n    event NewWithdrawFee(uint256 newWithdrawFee);\\n    event RampA(\\n        uint256 oldA,\\n        uint256 newA,\\n        uint256 initialTime,\\n        uint256 futureTime\\n    );\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n    constructor() public OwnerPausable() ReentrancyGuard() {\\n    }\\n\\n    /**\\n     * @notice Deploys this Swap contract with given parameters as default\\n     * values. This will also deploy a LPToken that represents users\\n     * LP position. The owner of LPToken will be this contract - which means\\n     * only this contract is allowed to mint new tokens.\\n     *\\n     * @param _pooledTokens an array of ERC20s this pool will accept\\n     * @param decimals the decimals to use for each pooled token,\\n     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS\\n     * @param lpTokenName the long-form name of the token to be deployed\\n     * @param lpTokenSymbol the short symbol for the token to be deployed\\n     * @param _a the amplification coefficient * n * (n - 1). See the\\n     * StableSwap paper for details\\n     * @param _fee default swap fee to be initialized with\\n     * @param _adminFee default adminFee to be initialized with\\n     * @param _withdrawFee default withdrawFee to be initialized with\\n     */\\n    function initialize(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        uint256 _withdrawFee,\\n        address _factory\\n    ) public {\\n        require(_initialized == false, \\\"Swap: Initialize must be false.\\\");\\n        // Check _pooledTokens and precisions parameter\\n        require(_pooledTokens.length > 1, \\\"_pooledTokens.length <= 1\\\");\\n        require(_pooledTokens.length <= 32, \\\"_pooledTokens.length > 32\\\");\\n        require(\\n            _pooledTokens.length == decimals.length,\\n            \\\"_pooledTokens decimals mismatch\\\"\\n        );\\n\\n        uint256[] memory precisionMultipliers = new uint256[](decimals.length);\\n\\n        for (uint8 i = 0; i < _pooledTokens.length; i++) {\\n            if (i > 0) {\\n                // Check if index is already used. Check if 0th element is a duplicate.\\n                require(\\n                    tokenIndexes[address(_pooledTokens[i])] == 0 &&\\n                        _pooledTokens[0] != _pooledTokens[i],\\n                    \\\"Duplicate tokens\\\"\\n                );\\n            }\\n            require(\\n                address(_pooledTokens[i]) != address(0),\\n                \\\"The 0 address isn't an ERC-20\\\"\\n            );\\n            require(\\n                decimals[i] <= SwapUtils.POOL_PRECISION_DECIMALS,\\n                \\\"Token decimals exceeds max\\\"\\n            );\\n            precisionMultipliers[i] =\\n                10 **\\n                    uint256(SwapUtils.POOL_PRECISION_DECIMALS).sub(\\n                        uint256(decimals[i])\\n                    );\\n            tokenIndexes[address(_pooledTokens[i])] = i;\\n        }\\n\\n        // Check _a, _fee, _adminFee, _withdrawFee parameters\\n        require(_a < SwapUtils.MAX_A, \\\"_a exceeds maximum\\\");\\n        require(_fee <= SwapUtils.MAX_SWAP_FEE, \\\"_fee exceeds maximum\\\");\\n        require(\\n            _adminFee <= SwapUtils.MAX_ADMIN_FEE,\\n            \\\"_adminFee exceeds maximum\\\"\\n        );\\n        require(\\n            _withdrawFee <= SwapUtils.MAX_WITHDRAW_FEE,\\n            \\\"_withdrawFee exceeds maximum\\\"\\n        );\\n\\n        // Initialize swapStorage struct\\n        swapStorage.lpToken = new LPToken(\\n            lpTokenName,\\n            lpTokenSymbol,\\n            SwapUtils.POOL_PRECISION_DECIMALS\\n        );\\n        swapStorage.pooledTokens = _pooledTokens;\\n        swapStorage.tokenPrecisionMultipliers = precisionMultipliers;\\n        swapStorage.balances = new uint256[](_pooledTokens.length);\\n        swapStorage.initialA = _a.mul(SwapUtils.A_PRECISION);\\n        swapStorage.futureA = _a.mul(SwapUtils.A_PRECISION);\\n        swapStorage.initialATime = 0;\\n        swapStorage.futureATime = 0;\\n        swapStorage.swapFee = _fee;\\n        swapStorage.adminFee = _adminFee;\\n        swapStorage.defaultWithdrawFee = _withdrawFee;\\n\\n        // Initialize variables related to guarding the initial deposits\\n        factory = _factory;\\n        _initialized = true;\\n    }\\n\\n    /*** MODIFIERS ***/\\n\\n    /**\\n     * @notice Modifier to check deadline against current timestamp\\n     * @param deadline latest timestamp to accept this transaction\\n     */\\n    modifier deadlineCheck(uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"Deadline not met\\\");\\n        _;\\n    }\\n\\n    /*** VIEW FUNCTIONS ***/\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @return A parameter\\n     */\\n    function getA() external view returns (uint256) {\\n        return swapStorage.getA();\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision form\\n     * @dev See the StableSwap paper for details\\n     * @return A parameter in its raw precision form\\n     */\\n    function getAPrecise() external view returns (uint256) {\\n        return swapStorage.getAPrecise();\\n    }\\n\\n    /**\\n     * @notice Return address of the pooled token at given index. Reverts if tokenIndex is out of range.\\n     * @param index the index of the token\\n     * @return address of the token at given index\\n     */\\n    function getToken(uint8 index) public view returns (IERC20) {\\n        require(index < swapStorage.pooledTokens.length, \\\"Out of range\\\");\\n        return swapStorage.pooledTokens[index];\\n    }\\n\\n    function getTokenLength() public view returns (uint) {\\n        return swapStorage.pooledTokens.length;\\n    }\\n\\n    /**\\n     * @notice Return the index of the given token address. Reverts if no matching\\n     * token is found.\\n     * @param tokenAddress address of the token\\n     * @return the index of the given token address\\n     */\\n    function getTokenIndex(address tokenAddress) external view returns (uint8) {\\n        uint8 index = tokenIndexes[tokenAddress];\\n        require(\\n            address(getToken(index)) == tokenAddress,\\n            \\\"Token does not exist\\\"\\n        );\\n        return index;\\n    }\\n\\n    /**\\n     * @notice Return timestamp of last deposit of given address\\n     * @return timestamp of the last deposit made by the given address\\n     */\\n    function getDepositTimestamp(address user) external view returns (uint256) {\\n        return swapStorage.getDepositTimestamp(user);\\n    }\\n\\n    /**\\n     * @notice Return current balance of the pooled token at given index\\n     * @param index the index of the token\\n     * @return current balance of the pooled token at given index with token's native precision\\n     */\\n    function getTokenBalance(uint8 index) external view returns (uint256) {\\n        require(index < swapStorage.pooledTokens.length, \\\"Index out of range\\\");\\n        return swapStorage.balances[index];\\n    }\\n\\n    /**\\n     * @notice Get the virtual price, to help calculate profit\\n     * @return the virtual price, scaled to the POOL_PRECISION_DECIMALS\\n     */\\n    function getVirtualPrice() external view returns (uint256) {\\n        return swapStorage.getVirtualPrice();\\n    }\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param tokenIndexFrom the token the user wants to sell\\n     * @param tokenIndexTo the token the user wants to buy\\n     * @param dx the amount of tokens the user wants to sell. If the token charges\\n     * a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return amount of tokens the user will receive\\n     */\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        return swapStorage.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param account address that is depositing or withdrawing tokens\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pooledTokens. The amount should be in each\\n     * pooled token's native precision. If a token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return token amount the user will receive\\n     */\\n    function calculateTokenAmount(\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        return swapStorage.calculateTokenAmount(account, amounts, deposit);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of LP tokens\\n     * @param account the address that is withdrawing tokens\\n     * @param amount the amount of LP tokens that would be burned on withdrawal\\n     * @return array of token balances that the user will receive\\n     */\\n    function calculateRemoveLiquidity(address account, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return swapStorage.calculateRemoveLiquidity(account, amount);\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of underlying token available to withdraw\\n     * when withdrawing via only single token\\n     * @param account the address that is withdrawing tokens\\n     * @param tokenAmount the amount of LP token to burn\\n     * @param tokenIndex index of which token will be withdrawn\\n     * @return availableTokenAmount calculated amount of underlying token\\n     * available to withdraw\\n     */\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount) {\\n        (availableTokenAmount, ) = swapStorage.calculateWithdrawOneToken(\\n            account,\\n            tokenAmount,\\n            tokenIndex\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws. The withdraw fee\\n     * decays linearly over period of 4 weeks. For example, depositing and withdrawing right away\\n     * will charge you the full amount of withdraw fee. But withdrawing after 4 weeks will charge you\\n     * no additional fees.\\n     * @dev returned value should be divided by FEE_DENOMINATOR to convert to correct decimals\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function calculateCurrentWithdrawFee(address user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return swapStorage.calculateCurrentWithdrawFee(user);\\n    }\\n\\n    /**\\n     * @notice This function reads the accumulated amount of admin fees of the token with given index\\n     * @param index Index of the pooled token\\n     * @return admin's token balance in the token's precision\\n     */\\n    function getAdminBalance(uint256 index) external view returns (uint256) {\\n        return swapStorage.getAdminBalance(index);\\n    }\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances) {\\n        uint256 length = getTokenLength();\\n        adminBalances = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            adminBalances[i] = swapStorage.getAdminBalance(i);\\n        }\\n    }\\n\\n    /*** STATE MODIFYING FUNCTIONS ***/\\n\\n    /**\\n     * @notice Swap two tokens using this pool\\n     * @param tokenIndexFrom the token the user wants to swap from\\n     * @param tokenIndexTo the token the user wants to swap to\\n     * @param dx the amount of tokens the user wants to swap from\\n     * @param minDy the min amount the user would like to receive, or revert.\\n     * @param deadline latest timestamp to accept this transaction\\n     */\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        deadlineCheck(deadline)\\n        returns (uint256)\\n    {\\n        return swapStorage.swap(tokenIndexFrom, tokenIndexTo, dx, minDy);\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool with given amounts.\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP token user minted and received\\n     */\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        deadlineCheck(deadline)\\n        returns (uint256)\\n    {\\n        return swapStorage.addLiquidity(amounts, minToMint);\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     *        acceptable for this burn. Useful as a front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amounts of tokens user received\\n     */\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external nonReentrant deadlineCheck(deadline) returns (uint256[] memory) {\\n        return swapStorage.removeLiquidity(amount, minAmounts);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param tokenAmount the amount of the token you want to receive\\n     * @param tokenIndex the index of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of chosen token user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        deadlineCheck(deadline)\\n        returns (uint256)\\n    {\\n        return\\n            swapStorage.removeLiquidityOneToken(\\n                tokenAmount,\\n                tokenIndex,\\n                minAmount\\n            );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param amounts how much of each token to withdraw\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        deadlineCheck(deadline)\\n        returns (uint256)\\n    {\\n        return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\\n    }\\n\\n    /*** ADMIN FUNCTIONS ***/\\n\\n    /**\\n     * @notice Updates the user withdraw fee. This function can only be called by\\n     * the pool token. Should be used to update the withdraw fee on transfer of pool tokens.\\n     * Transferring your pool token will reset the 4 weeks period. If the recipient is already\\n     * holding some pool tokens, the withdraw fee will be discounted in respective amounts.\\n     * @param recipient address of the recipient of pool token\\n     * @param transferAmount amount of pool token to transfer\\n     */\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\\n        external\\n    {\\n        require(\\n            msg.sender == address(swapStorage.lpToken),\\n            \\\"Only callable by pool token\\\"\\n        );\\n        swapStorage.updateUserWithdrawFee(recipient, transferAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw all admin fees to the fee collector\\n     */\\n    function withdrawAdminFees() external {\\n        address feeTo = IStableSwapFactory(factory).feeTo();\\n        if (feeTo != address(0)) {\\n            swapStorage.withdrawAdminFees(feeTo);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update the admin fee. Admin fee takes portion of the swap fee.\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setAdminFee(uint256 newAdminFee) external onlyOwner {\\n        swapStorage.setAdminFee(newAdminFee);\\n    }\\n\\n    /**\\n     * @notice Update the swap fee to be applied on swaps\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     */\\n    function setSwapFee(uint256 newSwapFee) external onlyOwner {\\n        swapStorage.setSwapFee(newSwapFee);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee. This fee decays linearly over 4 weeks since\\n     * user's last deposit.\\n     * @param newWithdrawFee new withdraw fee to be applied on future deposits\\n     */\\n    function setDefaultWithdrawFee(uint256 newWithdrawFee) external onlyOwner {\\n        swapStorage.setDefaultWithdrawFee(newWithdrawFee);\\n    }\\n\\n    function setFactory (address _factory) external onlyOwner {\\n        factory = _factory;\\n    }\\n\\n    function getPoolTokens() external view returns (IERC20[] memory) {\\n        return swapStorage.pooledTokens;\\n    }\\n\\n    function getTokenPrecisionMultipliers() external view returns (uint256[] memory) {\\n        return swapStorage.tokenPrecisionMultipliers;\\n    }\\n\\n    function getBalances() external view returns (uint256[] memory) {\\n        return swapStorage.balances;\\n    }\\n\\n    function getWithdrawFeeMultiplier(address user) external view returns (uint256) {\\n        return swapStorage.withdrawFeeMultiplier[user];\\n    }\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA and futureTime\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param futureA the new A to ramp towards\\n     * @param futureTime timestamp when the new A should be reached\\n     */\\n    function rampA(uint256 futureA, uint256 futureTime) external onlyOwner {\\n        swapStorage.rampA(futureA, futureTime);\\n    }\\n\\n    /**\\n     * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.\\n     */\\n    function stopRampA() external onlyOwner {\\n        swapStorage.stopRampA();\\n    }\\n}\\n\",\"keccak256\":\"0xbfef994b3d27a33dc194119c4090ffb387a0cd60ad8dfffffbc77c38bf9af314\",\"license\":\"MIT\"},\"contracts/stableSwap/SwapCreator.sol\":{\"content\":\"pragma solidity =0.6.12;\\n\\nimport './Swap.sol';\\nimport \\\"../interfaces/ISwapCreator.sol\\\";\\n\\ncontract SwapCreator is ISwapCreator {\\n\\n    function create(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        uint256 _withdrawFee,\\n        address timeLock\\n    ) external override returns (address) {\\n        Swap swap = new Swap();\\n        swap.initialize(_pooledTokens,\\n            decimals,\\n            lpTokenName,\\n            lpTokenSymbol,\\n            _a,\\n            _fee,\\n            _adminFee,\\n            _withdrawFee,\\n            msg.sender\\n        );\\n        swap.transferOwnership(timeLock);\\n\\n        return address(swap);\\n    }\\n}\",\"keccak256\":\"0xfba2edeea2e9668c17178ce31e820e8fbbd4621a2c456358b31fcd1ad8cb5946\"},\"contracts/stableSwap/SwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./LPToken.sol\\\";\\nimport \\\"./MathUtils.sol\\\";\\n\\n/**\\n * @title SwapUtils library\\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\\n * Admin functions should be protected within contracts using this library.\\n */\\nlibrary SwapUtils {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using MathUtils for uint256;\\n\\n    /*** EVENTS ***/\\n\\n    event TokenSwap(\\n        address indexed buyer,\\n        uint256 tokensSold,\\n        uint256 tokensBought,\\n        uint128 soldId,\\n        uint128 boughtId\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event CollectProtocolFee(address token, uint256 amount);\\n    event NewAdminFee(uint256 newAdminFee);\\n    event NewSwapFee(uint256 newSwapFee);\\n    event NewWithdrawFee(uint256 newWithdrawFee);\\n    event RampA(\\n        uint256 oldA,\\n        uint256 newA,\\n        uint256 initialTime,\\n        uint256 futureTime\\n    );\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n    struct Swap {\\n        // variables around the ramp management of A,\\n        // the amplification coefficient * n * (n - 1)\\n        // see https://www.curve.fi/stableswap-paper.pdf for details\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // fee calculation\\n        uint256 swapFee;\\n        uint256 adminFee;\\n        uint256 defaultWithdrawFee;\\n        LPToken lpToken;\\n        // contract references for all tokens being pooled\\n        IERC20[] pooledTokens;\\n        // multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS\\n        // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC\\n        // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10\\n        uint256[] tokenPrecisionMultipliers;\\n        // the pool balance of each token, in the token's precision\\n        // the contract's actual token balance might differ\\n        uint256[] balances;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    // Struct storing variables used in calculations in the\\n    // calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n    struct CalculateWithdrawOneTokenDYInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 newY;\\n        uint256 feePerToken;\\n        uint256 preciseA;\\n    }\\n\\n    // Struct storing variables used in calculation in addLiquidity function\\n    // to avoid stack too deep error\\n    struct AddLiquidityInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 d2;\\n        uint256 preciseA;\\n    }\\n\\n    // Struct storing variables used in calculation in removeLiquidityImbalance function\\n    // to avoid stack too deep error\\n    struct RemoveLiquidityImbalanceInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 d2;\\n        uint256 preciseA;\\n    }\\n\\n    // the precision all pools tokens will be converted to\\n    uint8 public constant POOL_PRECISION_DECIMALS = 18;\\n\\n    // the denominator used to calculate admin and LP fees. For example, an\\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    // Max swap fee is 1% or 100bps of each swap\\n    uint256 public constant MAX_SWAP_FEE = 10**8;\\n\\n    // Max adminFee is 100% of the swapFee\\n    // adminFee does not add additional fee on top of swapFee\\n    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\\n    // users but only on the earnings of LPs\\n    uint256 public constant MAX_ADMIN_FEE = 10**10;\\n\\n    // Max withdrawFee is 1% of the value withdrawn\\n    // Fee will be redistributed to the LPs in the pool, rewarding\\n    // long term providers.\\n    uint256 public constant MAX_WITHDRAW_FEE = 10**8;\\n\\n    // Constant value used as max loop limit\\n    uint256 private constant MAX_LOOP_LIMIT = 256;\\n\\n    // Constant values used in ramping A calculations\\n    uint256 public constant A_PRECISION = 100;\\n    uint256 public constant MAX_A = 10**6;\\n    uint256 private constant MAX_A_CHANGE = 2;\\n    uint256 private constant MIN_RAMP_TIME = 14 days;\\n\\n    /*** VIEW & PURE FUNCTIONS ***/\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter\\n     */\\n    function getA(Swap storage self) external view returns (uint256) {\\n        return _getA(self);\\n    }\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter\\n     */\\n    function _getA(Swap storage self) internal view returns (uint256) {\\n        return _getAPrecise(self).div(A_PRECISION);\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function getAPrecise(Swap storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns A based on the ramp settings\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function _getAPrecise(Swap storage self) internal view returns (uint256) {\\n        uint256 t1 = self.futureATime; // time when ramp is finished\\n        uint256 a1 = self.futureA; // final A value when ramp is finished\\n\\n        if (block.timestamp < t1) {\\n            uint256 t0 = self.initialATime; // time when ramp is started\\n            uint256 a0 = self.initialA; // initial A value when ramp is started\\n            if (a1 > a0) {\\n                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\\n                return\\n                    a0.add(\\n                        a1.sub(a0).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\\n                    );\\n            } else {\\n                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\\n                return\\n                    a0.sub(\\n                        a0.sub(a1).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\\n                    );\\n            }\\n        } else {\\n            return a1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the timestamp of last deposit made by the given address\\n     * @param self Swap struct to read from\\n     * @return timestamp of last deposit\\n     */\\n    function getDepositTimestamp(Swap storage self, address user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return self.depositTimestamp[user];\\n    }\\n\\n    /**\\n     * @notice Calculate the dy, the amount of selected token that user receives and\\n     * the fee of withdrawing in one token\\n     * @param account the address that is withdrawing\\n     * @param tokenAmount the amount to withdraw in the pool's precision\\n     * @param tokenIndex which token will be withdrawn\\n     * @param self Swap struct to read from\\n     * @return the amount of token user will receive and the associated swap fee\\n     */\\n    function calculateWithdrawOneToken(\\n        Swap storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) public view returns (uint256, uint256) {\\n        uint256 dy;\\n        uint256 newY;\\n\\n        (dy, newY) = calculateWithdrawOneTokenDY(self, tokenIndex, tokenAmount);\\n\\n        // dy_0 (without fees)\\n        // dy, dy_0 - dy\\n\\n        uint256 dySwapFee =\\n            _xp(self)[tokenIndex]\\n                .sub(newY)\\n                .div(self.tokenPrecisionMultipliers[tokenIndex])\\n                .sub(dy);\\n\\n        dy = dy\\n            .mul(\\n            FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, account))\\n        )\\n            .div(FEE_DENOMINATOR);\\n\\n        return (dy, dySwapFee);\\n    }\\n\\n    /**\\n     * @notice Calculate the dy of withdrawing in one token\\n     * @param self Swap struct to read from\\n     * @param tokenIndex which token will be withdrawn\\n     * @param tokenAmount the amount to withdraw in the pools precision\\n     * @return the d and the new y after withdrawing one token\\n     */\\n    function calculateWithdrawOneTokenDY(\\n        Swap storage self,\\n        uint8 tokenIndex,\\n        uint256 tokenAmount\\n    ) internal view returns (uint256, uint256) {\\n        require(\\n            tokenIndex < self.pooledTokens.length,\\n            \\\"Token index out of range\\\"\\n        );\\n\\n        // Get the current D, then solve the stableswap invariant\\n        // y_i for D - tokenAmount\\n        uint256[] memory xp = _xp(self);\\n        CalculateWithdrawOneTokenDYInfo memory v =\\n            CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n        v.preciseA = _getAPrecise(self);\\n        v.d0 = getD(xp, v.preciseA);\\n        v.d1 = v.d0.sub(tokenAmount.mul(v.d0).div(self.lpToken.totalSupply()));\\n\\n        require(tokenAmount <= xp[tokenIndex], \\\"Withdraw exceeds available\\\");\\n\\n        v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);\\n\\n        uint256[] memory xpReduced = new uint256[](xp.length);\\n\\n        v.feePerToken = _feePerToken(self);\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 xpi = xp[i];\\n            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\\n            // else dxExpected = xp[i] - (xp[i] * d1 / d0)\\n            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\\n            xpReduced[i] = xpi.sub(\\n                (\\n                    (i == tokenIndex)\\n                        ? xpi.mul(v.d1).div(v.d0).sub(v.newY)\\n                        : xpi.sub(xpi.mul(v.d1).div(v.d0))\\n                )\\n                    .mul(v.feePerToken)\\n                    .div(FEE_DENOMINATOR)\\n            );\\n        }\\n\\n        uint256 dy =\\n            xpReduced[tokenIndex].sub(\\n                getYD(v.preciseA, tokenIndex, xpReduced, v.d1)\\n            );\\n        dy = dy.sub(1).div(self.tokenPrecisionMultipliers[tokenIndex]);\\n\\n        return (dy, v.newY);\\n    }\\n\\n    /**\\n     * @notice Calculate the price of a token in the pool with given\\n     * precision-adjusted balances and a particular D.\\n     *\\n     * @dev This is accomplished via solving the invariant iteratively.\\n     * See the StableSwap paper and Curve.fi implementation for further details.\\n     *\\n     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     * x_1**2 + b*x_1 = c\\n     * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     *\\n     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\\n     * @param tokenIndex Index of token we are calculating for.\\n     * @param xp a precision-adjusted set of pool balances. Array should be\\n     * the same cardinality as the pool.\\n     * @param d the stableswap invariant\\n     * @return the price of the token, in the same precision as in xp\\n     */\\n    function getYD(\\n        uint256 a,\\n        uint8 tokenIndex,\\n        uint256[] memory xp,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        uint256 numTokens = xp.length;\\n        require(tokenIndex < numTokens, \\\"Token not found\\\");\\n\\n        uint256 c = d;\\n        uint256 s;\\n        uint256 nA = a.mul(numTokens);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (i != tokenIndex) {\\n                s = s.add(xp[i]);\\n                c = c.mul(d).div(xp[i].mul(numTokens));\\n                // If we were to protect the division loss we would have to keep the denominator separate\\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n                // c = c * D * D * D * ... overflow!\\n            }\\n        }\\n        c = c.mul(d).mul(A_PRECISION).div(nA.mul(numTokens));\\n\\n        uint256 b = s.add(d.mul(A_PRECISION).div(nA));\\n        uint256 yPrev;\\n        uint256 y = d;\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\\n     * as the pool.\\n     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n     * See the StableSwap paper for details\\n     * @return the invariant, at the precision of the pool\\n     */\\n    function getD(uint256[] memory xp, uint256 a)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 numTokens = xp.length;\\n        uint256 s;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            s = s.add(xp[i]);\\n        }\\n        if (s == 0) {\\n            return 0;\\n        }\\n\\n        uint256 prevD;\\n        uint256 d = s;\\n        uint256 nA = a.mul(numTokens);\\n\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            uint256 dP = d;\\n            for (uint256 j = 0; j < numTokens; j++) {\\n                dP = dP.mul(d).div(xp[j].mul(numTokens));\\n                // If we were to protect the division loss we would have to keep the denominator separate\\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n                // dP = dP * D * D * D * ... overflow!\\n            }\\n            prevD = d;\\n            d = nA.mul(s).div(A_PRECISION).add(dP.mul(numTokens)).mul(d).div(\\n                nA.sub(A_PRECISION).mul(d).div(A_PRECISION).add(\\n                    numTokens.add(1).mul(dP)\\n                )\\n            );\\n            if (d.within1(prevD)) {\\n                return d;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"D does not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Get D, the StableSwap invariant, based on self Swap struct\\n     * @param self Swap struct to read from\\n     * @return The invariant, at the precision of the pool\\n     */\\n    function getD(Swap storage self) internal view returns (uint256) {\\n        return getD(_xp(self), _getAPrecise(self));\\n    }\\n\\n    /**\\n     * @notice Given a set of balances and precision multipliers, return the\\n     * precision-adjusted balances.\\n     *\\n     * @param balances an array of token balances, in their native precisions.\\n     * These should generally correspond with pooled tokens.\\n     *\\n     * @param precisionMultipliers an array of multipliers, corresponding to\\n     * the amounts in the balances array. When multiplied together they\\n     * should yield amounts at the pool's precision.\\n     *\\n     * @return an array of amounts \\\"scaled\\\" to the pool's precision\\n     */\\n    function _xp(\\n        uint256[] memory balances,\\n        uint256[] memory precisionMultipliers\\n    ) internal pure returns (uint256[] memory) {\\n        uint256 numTokens = balances.length;\\n        require(\\n            numTokens == precisionMultipliers.length,\\n            \\\"Balances must match multipliers\\\"\\n        );\\n        uint256[] memory xp = new uint256[](numTokens);\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            xp[i] = balances[i].mul(precisionMultipliers[i]);\\n        }\\n        return xp;\\n    }\\n\\n    /**\\n     * @notice Return the precision-adjusted balances of all tokens in the pool\\n     * @param self Swap struct to read from\\n     * @param balances array of balances to scale\\n     * @return balances array \\\"scaled\\\" to the pool's precision, allowing\\n     * them to be more easily compared.\\n     */\\n    function _xp(Swap storage self, uint256[] memory balances)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return _xp(balances, self.tokenPrecisionMultipliers);\\n    }\\n\\n    /**\\n     * @notice Return the precision-adjusted balances of all tokens in the pool\\n     * @param self Swap struct to read from\\n     * @return the pool balances \\\"scaled\\\" to the pool's precision, allowing\\n     * them to be more easily compared.\\n     */\\n    function _xp(Swap storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenPrecisionMultipliers);\\n    }\\n\\n    /**\\n     * @notice Get the virtual price, to help calculate profit\\n     * @param self Swap struct to read from\\n     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\\n     */\\n    function getVirtualPrice(Swap storage self)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 d = getD(_xp(self), _getAPrecise(self));\\n        uint256 supply = self.lpToken.totalSupply();\\n        if (supply > 0) {\\n            return\\n                d.mul(10**uint256(ERC20(self.lpToken).decimals())).div(supply);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate the new balances of the tokens given the indexes of the token\\n     * that is swapped from (FROM) and the token that is swapped to (TO).\\n     * This function is used as a helper function to calculate how much TO token\\n     * the user should receive on swap.\\n     *\\n     * @param self Swap struct to read from\\n     * @param tokenIndexFrom index of FROM token\\n     * @param tokenIndexTo index of TO token\\n     * @param x the new total amount of FROM token\\n     * @param xp balances of the tokens in the pool\\n     * @return the amount of TO token that should remain in the pool\\n     */\\n    function getY(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 x,\\n        uint256[] memory xp\\n    ) internal view returns (uint256) {\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(\\n            tokenIndexFrom != tokenIndexTo,\\n            \\\"Can't compare token to itself\\\"\\n        );\\n        require(\\n            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\\n            \\\"Tokens must be in pool\\\"\\n        );\\n\\n        uint256 a = _getAPrecise(self);\\n        uint256 d = getD(xp, a);\\n        uint256 c = d;\\n        uint256 s;\\n        uint256 nA = numTokens.mul(a);\\n\\n        uint256 _x;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (i == tokenIndexFrom) {\\n                _x = x;\\n            } else if (i != tokenIndexTo) {\\n                _x = xp[i];\\n            } else {\\n                continue;\\n            }\\n            s = s.add(_x);\\n            c = c.mul(d).div(_x.mul(numTokens));\\n            // If we were to protect the division loss we would have to keep the denominator separate\\n            // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n            // c = c * D * D * D * ... overflow!\\n        }\\n        c = c.mul(d).mul(A_PRECISION).div(nA.mul(numTokens));\\n        uint256 b = s.add(d.mul(A_PRECISION).div(nA));\\n        uint256 yPrev;\\n        uint256 y = d;\\n\\n        // iterative approximation\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Externally calculates a swap between two tokens.\\n     * @param self Swap struct to read from\\n     * @param tokenIndexFrom the token to sell\\n     * @param tokenIndexTo the token to buy\\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @return dy the number of tokens the user will get\\n     */\\n    function calculateSwap(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 dy) {\\n        (dy, ) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n\\n    /**\\n     * @notice Internally calculates a swap between two tokens.\\n     *\\n     * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n     * using the token contracts.\\n     *\\n     * @param self Swap struct to read from\\n     * @param tokenIndexFrom the token to sell\\n     * @param tokenIndexTo the token to buy\\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @return dy the number of tokens the user will get\\n     * @return dyFee the associated fee\\n     */\\n    function _calculateSwap(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) internal view returns (uint256 dy, uint256 dyFee) {\\n        uint256[] memory xp = _xp(self);\\n        require(\\n            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,\\n            \\\"Token index out of range\\\"\\n        );\\n        uint256 x =\\n            dx.mul(self.tokenPrecisionMultipliers[tokenIndexFrom]).add(\\n                xp[tokenIndexFrom]\\n            );\\n        uint256 y = getY(self, tokenIndexFrom, tokenIndexTo, x, xp);\\n        dy = xp[tokenIndexTo].sub(y).sub(1);\\n        dyFee = dy.mul(self.swapFee).div(FEE_DENOMINATOR);\\n        dy = dy.sub(dyFee).div(self.tokenPrecisionMultipliers[tokenIndexTo]);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of\\n     * LP tokens\\n     *\\n     * @param account the address that is removing liquidity. required for withdraw fee calculation\\n     * @param amount the amount of LP tokens that would to be burned on\\n     * withdrawal\\n     * @return array of amounts of tokens user will receive\\n     */\\n    function calculateRemoveLiquidity(\\n        Swap storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        Swap storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256 feeAdjustedAmount =\\n            amount\\n                .mul(\\n                FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, account))\\n            )\\n                .div(FEE_DENOMINATOR);\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = self.balances[i].mul(feeAdjustedAmount).div(\\n                totalSupply\\n            );\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function calculateCurrentWithdrawFee(Swap storage self, address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 endTime = self.depositTimestamp[user].add(4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime.sub(block.timestamp);\\n            return\\n                self\\n                    .defaultWithdrawFee\\n                    .mul(self.withdrawFeeMultiplier[user])\\n                    .mul(timeLeftover)\\n                    .div(4 weeks)\\n                    .div(FEE_DENOMINATOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param self Swap struct to read from\\n     * @param account address of the account depositing or withdrawing tokens\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pooledTokens. The amount should be in each\\n     * pooled token's native precision. If a token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return if deposit was true, total amount of lp token that will be minted and if\\n     * deposit was false, total amount of lp token that will be burned\\n     */\\n    function calculateTokenAmount(\\n        Swap storage self,\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 numTokens = self.pooledTokens.length;\\n        uint256 a = _getAPrecise(self);\\n        uint256 d0 = getD(_xp(self, self.balances), a);\\n        uint256[] memory balances1 = self.balances;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (deposit) {\\n                balances1[i] = balances1[i].add(amounts[i]);\\n            } else {\\n                balances1[i] = balances1[i].sub(\\n                    amounts[i],\\n                    \\\"Cannot withdraw more than available\\\"\\n                );\\n            }\\n        }\\n        uint256 d1 = getD(_xp(self, balances1), a);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (deposit) {\\n            return d1.sub(d0).mul(totalSupply).div(d0);\\n        } else {\\n            return\\n                d0.sub(d1).mul(totalSupply).div(d0).mul(FEE_DENOMINATOR).div(\\n                    FEE_DENOMINATOR.sub(\\n                        calculateCurrentWithdrawFee(self, account)\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice return accumulated amount of admin fees of the token with given index\\n     * @param self Swap struct to read from\\n     * @param index Index of the pooled token\\n     * @return admin balance in the token's precision\\n     */\\n    function getAdminBalance(Swap storage self, uint256 index)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(index < self.pooledTokens.length, \\\"Token index out of range\\\");\\n        return\\n            self.pooledTokens[index].balanceOf(address(this)).sub(\\n                self.balances[index]\\n            );\\n    }\\n\\n    /**\\n     * @notice internal helper function to calculate fee per token multiplier used in\\n     * swap fee calculations\\n     * @param self Swap struct to read from\\n     */\\n    function _feePerToken(Swap storage self) internal view returns (uint256) {\\n        return\\n            self.swapFee.mul(self.pooledTokens.length).div(\\n                self.pooledTokens.length.sub(1).mul(4)\\n            );\\n    }\\n\\n    /*** STATE MODIFYING FUNCTIONS ***/\\n\\n    /**\\n     * @notice swap two tokens in the pool\\n     * @param self Swap struct to read from and write to\\n     * @param tokenIndexFrom the token the user wants to sell\\n     * @param tokenIndexTo the token the user wants to buy\\n     * @param dx the amount of tokens the user wants to sell\\n     * @param minDy the min amount the user would like to receive, or revert.\\n     * @return amount of token user received on swap\\n     */\\n    function swap(\\n        Swap storage self,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy\\n    ) external returns (uint256) {\\n        IERC20 poolTokenFrom = self.pooledTokens[tokenIndexFrom];\\n        require(\\n            dx <= poolTokenFrom.balanceOf(msg.sender),\\n            \\\"Cannot swap more than you own\\\"\\n        );\\n\\n        // Transfer tokens first to see if a fee was charged on transfer\\n        uint256 transferredDx;\\n        {\\n            uint256 beforeBalance = poolTokenFrom.balanceOf(address(this));\\n            poolTokenFrom.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                dx\\n            );\\n\\n            // Use the actual transferred amount for AMM math\\n            transferredDx =\\n                poolTokenFrom.balanceOf(address(this)).sub(\\n                    beforeBalance\\n                );\\n        }\\n\\n        (uint256 dy, uint256 dyFee) =\\n            _calculateSwap(self, tokenIndexFrom, tokenIndexTo, transferredDx);\\n        require(dy >= minDy, \\\"Swap didn't result in min tokens\\\");\\n\\n        uint256 dyAdminFee =\\n            dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(\\n                self.tokenPrecisionMultipliers[tokenIndexTo]\\n            );\\n\\n        self.balances[tokenIndexFrom] = self.balances[tokenIndexFrom].add(\\n            transferredDx\\n        );\\n        self.balances[tokenIndexTo] = self.balances[tokenIndexTo].sub(dy).sub(\\n            dyAdminFee\\n        );\\n\\n        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\\n\\n        emit TokenSwap(\\n            msg.sender,\\n            transferredDx,\\n            dy,\\n            tokenIndexFrom,\\n            tokenIndexTo\\n        );\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool\\n     * @param self Swap struct to read from and write to\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @return amount of LP token user received\\n     */\\n    function addLiquidity(\\n        Swap storage self,\\n        uint256[] memory amounts,\\n        uint256 minToMint\\n    ) external returns (uint256) {\\n        require(\\n            amounts.length == self.pooledTokens.length,\\n            \\\"Amounts must match pooled tokens\\\"\\n        );\\n\\n        uint256[] memory fees = new uint256[](self.pooledTokens.length);\\n\\n        // current state\\n        AddLiquidityInfo memory v = AddLiquidityInfo(0, 0, 0, 0);\\n\\n        LPToken lpToken = self.lpToken;\\n        if (lpToken.totalSupply() != 0) {\\n            v.d0 = getD(self);\\n        }\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            require(\\n                lpToken.totalSupply() != 0 || amounts[i] > 0,\\n                \\\"Must supply all tokens in pool\\\"\\n            );\\n\\n            // Transfer tokens first to see if a fee was charged on transfer\\n            if (amounts[i] != 0) {\\n                uint256 beforeBalance =\\n                    self.pooledTokens[i].balanceOf(address(this));\\n                self.pooledTokens[i].safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    amounts[i]\\n                );\\n\\n                // Update the amounts[] with actual transfer amount\\n                amounts[i] = self.pooledTokens[i].balanceOf(address(this)).sub(\\n                    beforeBalance\\n                );\\n            }\\n\\n            newBalances[i] = self.balances[i].add(amounts[i]);\\n        }\\n\\n        // invariant after change\\n        v.preciseA = _getAPrecise(self);\\n        v.d1 = getD(_xp(self, newBalances), v.preciseA);\\n        require(v.d1 > v.d0, \\\"D should increase\\\");\\n\\n        // updated to reflect fees and calculate the user's LP tokens\\n        v.d2 = v.d1;\\n        if (lpToken.totalSupply() != 0) {\\n            uint256 feePerToken = _feePerToken(self);\\n            for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n                uint256 idealBalance = v.d1.mul(self.balances[i]).div(v.d0);\\n                fees[i] = feePerToken\\n                    .mul(idealBalance.difference(newBalances[i]))\\n                    .div(FEE_DENOMINATOR);\\n                self.balances[i] = newBalances[i].sub(\\n                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\\n                );\\n                newBalances[i] = newBalances[i].sub(fees[i]);\\n            }\\n            v.d2 = getD(_xp(self, newBalances), v.preciseA);\\n        } else {\\n            // the initial depositor doesn't pay fees\\n            self.balances = newBalances;\\n        }\\n\\n        uint256 toMint;\\n        if (lpToken.totalSupply() == 0) {\\n            toMint = v.d1;\\n        } else {\\n            toMint = v.d2.sub(v.d0).mul(lpToken.totalSupply()).div(v.d0);\\n        }\\n\\n        require(toMint >= minToMint, \\\"Couldn't mint min requested\\\");\\n\\n        // mint the user's LP tokens\\n        lpToken.mint(msg.sender, toMint);\\n\\n        emit AddLiquidity(\\n            msg.sender,\\n            amounts,\\n            fees,\\n            v.d1,\\n            lpToken.totalSupply()\\n        );\\n\\n        return toMint;\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        Swap storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        Swap storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            self.withdrawFeeMultiplier[user] = currentBalance\\n                .mul(currentFee)\\n                .add(toMint.mul(self.defaultWithdrawFee))\\n                .mul(FEE_DENOMINATOR)\\n                .div(toMint.add(currentBalance).mul(self.defaultWithdrawFee));\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param self Swap struct to read from and write to\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     * acceptable for this burn. Useful as a front-running mitigation\\n     * @return amounts of tokens the user received\\n     */\\n    function removeLiquidity(\\n        Swap storage self,\\n        uint256 amount,\\n        uint256[] calldata minAmounts\\n    ) external returns (uint256[] memory) {\\n        LPToken lpToken = self.lpToken;\\n        require(amount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n        require(\\n            minAmounts.length == self.pooledTokens.length,\\n            \\\"minAmounts must match poolTokens\\\"\\n        );\\n\\n        uint256[] memory amounts =\\n            _calculateRemoveLiquidity(self, msg.sender, amount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"amounts[i] < minAmounts[i]\\\");\\n            self.balances[i] = self.balances[i].sub(amounts[i]);\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        lpToken.burnFrom(msg.sender, amount);\\n\\n        emit RemoveLiquidity(msg.sender, amounts, lpToken.totalSupply());\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token.\\n     * @param self Swap struct to read from and write to\\n     * @param tokenAmount the amount of the lp tokens to burn\\n     * @param tokenIndex the index of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @return amount chosen token that user received\\n     */\\n    function removeLiquidityOneToken(\\n        Swap storage self,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        LPToken lpToken = self.lpToken;\\n        uint256 totalSupply = lpToken.totalSupply();\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(\\n            tokenAmount <= lpToken.balanceOf(msg.sender),\\n            \\\">LP.balanceOf\\\"\\n        );\\n        require(tokenIndex < numTokens, \\\"Token not found\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = calculateWithdrawOneToken(\\n            self,\\n            msg.sender,\\n            tokenAmount,\\n            tokenIndex\\n        );\\n\\n        require(dy >= minAmount, \\\"dy < minAmount\\\");\\n\\n        self.balances[tokenIndex] = self.balances[tokenIndex].sub(\\n            dy.add(dyFee.mul(self.adminFee).div(FEE_DENOMINATOR))\\n        );\\n        lpToken.burnFrom(msg.sender, tokenAmount);\\n        self.pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(\\n            msg.sender,\\n            tokenAmount,\\n            totalSupply,\\n            tokenIndex,\\n            dy\\n        );\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param amounts how much of each token to withdraw\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @return actual amount of LP tokens burned in the withdrawal\\n     */\\n    function removeLiquidityImbalance(\\n        Swap storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) public returns (uint256) {\\n        require(\\n            amounts.length == self.pooledTokens.length,\\n            \\\"Amounts should match pool tokens\\\"\\n        );\\n        require(\\n            maxBurnAmount <= self.lpToken.balanceOf(msg.sender) &&\\n                maxBurnAmount != 0,\\n            \\\">LP.balanceOf\\\"\\n        );\\n\\n        RemoveLiquidityImbalanceInfo memory v =\\n            RemoveLiquidityImbalanceInfo(0, 0, 0, 0);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 feePerToken = _feePerToken(self);\\n\\n        uint256[] memory balances1 = self.balances;\\n\\n        v.preciseA = _getAPrecise(self);\\n        v.d0 = getD(_xp(self), v.preciseA);\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            balances1[i] = balances1[i].sub(\\n                amounts[i],\\n                \\\"Cannot withdraw more than available\\\"\\n            );\\n        }\\n        v.d1 = getD(_xp(self, balances1), v.preciseA);\\n        uint256[] memory fees = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 idealBalance = v.d1.mul(self.balances[i]).div(v.d0);\\n            uint256 difference = idealBalance.difference(balances1[i]);\\n            fees[i] = feePerToken.mul(difference).div(FEE_DENOMINATOR);\\n            self.balances[i] = balances1[i].sub(\\n                fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\\n            );\\n            balances1[i] = balances1[i].sub(fees[i]);\\n        }\\n\\n        v.d2 = getD(_xp(self, balances1), v.preciseA);\\n\\n        uint256 tokenAmount = v.d0.sub(v.d2).mul(tokenSupply).div(v.d0);\\n        require(tokenAmount != 0, \\\"Burnt amount cannot be zero\\\");\\n        tokenAmount = tokenAmount.add(1).mul(FEE_DENOMINATOR).div(\\n            FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, msg.sender))\\n        );\\n\\n        require(tokenAmount <= maxBurnAmount, \\\"tokenAmount > maxBurnAmount\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        emit RemoveLiquidityImbalance(\\n            msg.sender,\\n            amounts,\\n            fees,\\n            v.d1,\\n            tokenSupply.sub(tokenAmount)\\n        );\\n\\n        return tokenAmount;\\n    }\\n\\n    /**\\n     * @notice withdraw all admin fees to a given address\\n     * @param self Swap struct to withdraw fees from\\n     * @param to Address to send the fees to\\n     */\\n    function withdrawAdminFees(Swap storage self, address to) external {\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            IERC20 token = self.pooledTokens[i];\\n            uint256 balance =\\n                token.balanceOf(address(this)).sub(self.balances[i]);\\n            if (balance != 0) {\\n                token.safeTransfer(to, balance);\\n                emit CollectProtocolFee(address(token), balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the admin fee\\n     * @dev adminFee cannot be higher than 100% of the swap fee\\n     * @param self Swap struct to update\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setAdminFee(Swap storage self, uint256 newAdminFee) external {\\n        require(newAdminFee <= MAX_ADMIN_FEE, \\\"Fee is too high\\\");\\n        self.adminFee = newAdminFee;\\n\\n        emit NewAdminFee(newAdminFee);\\n    }\\n\\n    /**\\n     * @notice update the swap fee\\n     * @dev fee cannot be higher than 1% of each swap\\n     * @param self Swap struct to update\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     */\\n    function setSwapFee(Swap storage self, uint256 newSwapFee) external {\\n        require(newSwapFee <= MAX_SWAP_FEE, \\\"Fee is too high\\\");\\n        self.swapFee = newSwapFee;\\n\\n        emit NewSwapFee(newSwapFee);\\n    }\\n\\n    /**\\n     * @notice update the default withdraw fee. This also affects deposits made in the past as well.\\n     * @param self Swap struct to update\\n     * @param newWithdrawFee new withdraw fee to be applied\\n     */\\n    function setDefaultWithdrawFee(Swap storage self, uint256 newWithdrawFee)\\n        external\\n    {\\n        require(newWithdrawFee <= MAX_WITHDRAW_FEE, \\\"Fee is too high\\\");\\n        self.defaultWithdrawFee = newWithdrawFee;\\n\\n        emit NewWithdrawFee(newWithdrawFee);\\n    }\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param self Swap struct to update\\n     * @param futureA_ the new A to ramp towards\\n     * @param futureTime_ timestamp when the new A should be reached\\n     */\\n    function rampA(\\n        Swap storage self,\\n        uint256 futureA_,\\n        uint256 futureTime_\\n    ) external {\\n        require(\\n            block.timestamp >= self.initialATime.add(1 days),\\n            \\\"Wait 1 day before starting ramp\\\"\\n        );\\n        require(\\n            futureTime_ >= block.timestamp.add(MIN_RAMP_TIME),\\n            \\\"Insufficient ramp time\\\"\\n        );\\n        require(\\n            futureA_ > 0 && futureA_ < MAX_A,\\n            \\\"futureA_ must be > 0 and < MAX_A\\\"\\n        );\\n\\n        uint256 initialAPrecise = _getAPrecise(self);\\n        uint256 futureAPrecise = futureA_.mul(A_PRECISION);\\n\\n        if (futureAPrecise < initialAPrecise) {\\n            require(\\n                futureAPrecise.mul(MAX_A_CHANGE) >= initialAPrecise,\\n                \\\"futureA_ is too small\\\"\\n            );\\n        } else {\\n            require(\\n                futureAPrecise <= initialAPrecise.mul(MAX_A_CHANGE),\\n                \\\"futureA_ is too large\\\"\\n            );\\n        }\\n\\n        self.initialA = initialAPrecise;\\n        self.futureA = futureAPrecise;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = futureTime_;\\n\\n        emit RampA(\\n            initialAPrecise,\\n            futureAPrecise,\\n            block.timestamp,\\n            futureTime_\\n        );\\n    }\\n\\n    /**\\n     * @notice Stops ramping A immediately. Once this function is called, rampA()\\n     * cannot be called for another 24 hours\\n     * @param self Swap struct to update\\n     */\\n    function stopRampA(Swap storage self) external {\\n        require(self.futureATime > block.timestamp, \\\"Ramp is already stopped\\\");\\n        uint256 currentA = _getAPrecise(self);\\n\\n        self.initialA = currentA;\\n        self.futureA = currentA;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = block.timestamp;\\n\\n        emit StopRampA(currentA, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x7d11c4c84a7ace445e7a70b4e4ed8ba559f2c259235999dbc18bd2c8afb725a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f1a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639dd3d9fd14610030575b600080fd5b610293600480360361012081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184602083028401116401000000008311171561009657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156100e657600080fd5b8201836020820111156100f857600080fd5b8035906020019184602083028401116401000000008311171561011a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101f157600080fd5b82018360208201111561020357600080fd5b8035906020019184600183028401116401000000008311171561022557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040810135906060810135906080013573ffffffffffffffffffffffffffffffffffffffff166102bc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6000806040516102cb90610578565b604051809103906000f0801580156102e7573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663df3ed68d8c8c8c8c8c8c8c8c336040518a63ffffffff1660e01b815260040180806020018060200180602001806020018a81526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185810385528e818151815260200191508051906020019060200280838360005b8381101561039e578181015183820152602001610386565b5050505090500185810384528d818151815260200191508051906020019060200280838360005b838110156103dd5781810151838201526020016103c5565b5050505090500185810383528c818151815260200191508051906020019080838360005b83811015610419578181015183820152602001610401565b50505050905090810190601f1680156104465780820380516001836020036101000a031916815260200191505b5085810382528b5181528b516020918201918d019080838360005b83811015610479578181015183820152602001610461565b50505050905090810190601f1680156104a65780820380516001836020036101000a031916815260200191505b509d5050505050505050505050505050600060405180830381600087803b1580156104d057600080fd5b505af11580156104e4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561055157600080fd5b505af1158015610565573d6000803e3d6000fd5b50929d9c50505050505050505050505050565b61595f806105868339019056fe60806040526010805460ff60a01b191690553480156200001e57600080fd5b5060006200002b6200008c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690556001805562000090565b3390565b6158bf80620000a06000396000f3fe60806040523480156200001157600080fd5b50600436106200031b5760003560e01c80638456cb5911620001ad578063c00c125c11620000f9578063da7a77be11620000a5578063ef0a712f116200007b578063ef0a712f1462000bff578063f2fde38b1462000c1f578063f9273ffb1462000c55576200031b565b8063da7a77be146200094d578063df3ed68d1462000983578063e25aa5fa1462000bf5576200031b565b8063c4db7fa011620000db578063c4db7fa0146200092f578063d41f65681462000939578063d46300fd1462000943576200031b565b8063c00c125c14620008e9578063c45a01551462000925576200031b565b806391695586116200015957806398899f40116200013b57806398899f401462000851578063a95b089f1462000896578063ac5bf26314620008c9576200031b565b80639169558614620007ef57806391ceb3eb146200082e576200031b565b806389c06568116200018f57806389c0656814620007bb5780638beb60b614620007c55780638da5cb5b14620007e5576200031b565b80638456cb59146200073557806384cdd9bc146200073f576200031b565b80634a1b0d57116200026d5780635fd65f0f1162000219578063715018a611620001fb578063715018a614620006a35780637c61e56114620006ad57806382b8660014620006e9576200031b565b80635fd65f0f14620005f657806366c0bd241462000657576200031b565b8063593d132c116200024f578063593d132c146200057c5780635bb4780814620005a25780635c975abb14620005d8576200031b565b80634a1b0d5714620004ca5780634d49e87d1462000500576200031b565b80632f71b91211620002cd57806334e1990711620002af57806334e19907146200046b5780633e3a1560146200048b5780633f4ba83a14620004c0576200031b565b80632f71b91214620003e457806331cd52b014620003ee576200031b565b80630419b45a11620003035780630419b45a14620003c45780630ba8195914620003d057806318f52ce214620003da576200031b565b8062113e081462000320578063029a326b146200037c575b600080fd5b6200032a62000cea565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015620003685781810151838201526020016200034e565b505050509050019250505060405180910390f35b620003b2600480360360208110156200039457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000d47565b60408051918252519081900360200190f35b620003ce62000d6f565b005b620003b262000ecd565b6200032a62000f55565b620003b262001080565b6200032a600480360360608110156200040657600080fd5b813591908101906040810160208201356401000000008111156200042957600080fd5b8201836020820111156200043c57600080fd5b803590602001918460208302840111640100000000831117156200045f57600080fd5b91935091503562001086565b620003ce600480360360208110156200048357600080fd5b503562001300565b620003b260048036036080811015620004a357600080fd5b5080359060ff602082013516906040810135906060013562001420565b620003ce62001641565b620003b260048036036020811015620004e257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620016fa565b620003b2600480360360608110156200051857600080fd5b8101906020810181356401000000008111156200053457600080fd5b8201836020820111156200054757600080fd5b803590602001918460208302840111640100000000831117156200056a57600080fd5b919350915080359060200135620017ba565b620003ce600480360360408110156200059457600080fd5b5080359060200135620019ae565b620003ce60048036036020811015620005ba57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001af2565b620005e262001be6565b604080519115158252519081900360200190f35b6200060062001c07565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015273ffffffffffffffffffffffffffffffffffffffff1660e083015251908190036101000190f35b6200068d600480360360208110156200066f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001c38565b6040805160ff9092168252519081900360200190f35b620003ce62001cfa565b6200032a60048036036040811015620006c557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013562001e16565b6200070c600480360360208110156200070157600080fd5b503560ff1662001f9f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b620003ce62002050565b620003b2600480360360608110156200075757600080fd5b8101906020810181356401000000008111156200077357600080fd5b8201836020820111156200078657600080fd5b80359060200191846020830284011164010000000083111715620007a957600080fd5b91935091508035906020013562002107565b6200032a620022fb565b620003ce60048036036020811015620007dd57600080fd5b50356200236e565b6200070c6200248e565b620003b2600480360360a08110156200080757600080fd5b5060ff813581169160208101359091169060408101359060608101359060800135620024aa565b620003b2600480360360208110156200084657600080fd5b503560ff16620026d4565b620003b2600480360360608110156200086957600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020810135906040013560ff166200276f565b620003b260048036036060811015620008ae57600080fd5b5060ff8135811691602081013590911690604001356200283c565b620003ce60048036036020811015620008e157600080fd5b5035620028f0565b620003ce600480360360408110156200090157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013562002a10565b6200070c62002b26565b620003ce62002b42565b6200032a62002c76565b620003b262002cd1565b620003b2600480360360208110156200096557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662002d26565b620003ce60048036036101208110156200099c57600080fd5b810190602081018135640100000000811115620009b857600080fd5b820183602082011115620009cb57600080fd5b80359060200191846020830284011164010000000083111715620009ee57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111562000a3f57600080fd5b82018360208201111562000a5257600080fd5b8035906020019184602083028401116401000000008311171562000a7557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111562000ac657600080fd5b82018360208201111562000ad957600080fd5b8035906020019184600183028401116401000000008311171562000afc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111562000b5057600080fd5b82018360208201111562000b6357600080fd5b8035906020019184600183028401116401000000008311171562000b8657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040810135906060810135906080013573ffffffffffffffffffffffffffffffffffffffff1662002db2565b620003b26200378c565b620003b26004803603602081101562000c1757600080fd5b5035620037e1565b620003ce6004803603602081101562000c3757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166200383e565b620003b26004803603606081101562000c6d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111562000ca657600080fd5b82018360208201111562000cb957600080fd5b8035906020019184602083028401116401000000008311171562000cdc57600080fd5b9193509150351515620039e6565b60606002600a0180548060200260200160405190810160405280929190818152602001828054801562000d3d57602002820191906000526020600020905b81548152602001906001019080831162000d28575b5050505050905090565b73ffffffffffffffffffffffffffffffffffffffff166000908152600e602052604090205490565b601054604080517f017e7e58000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163017e7e58916004808301926020929190829003018186803b15801562000ddb57600080fd5b505afa15801562000df0573d6000803e3d6000fd5b505050506040513d602081101562000e0757600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81161562000eca57604080517f24c5c7510000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff831660248201529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef5916324c5c751916044808301926000929190829003018186803b15801562000eb057600080fd5b505af415801562000ec5573d6000803e3d6000fd5b505050505b50565b60006002736829DFb55A4F1997B74c4E30C93040A29F4c1ef563c9b64dcb90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000f2257600080fd5b505af415801562000f37573d6000803e3d6000fd5b505050506040513d602081101562000f4e57600080fd5b5051905090565b6060600062000f6362001080565b90508067ffffffffffffffff8111801562000f7d57600080fd5b5060405190808252806020026020018201604052801562000fa8578160200160208202803683370190505b50915060005b818110156200107b57604080517f7d04816000000000000000000000000000000000000000000000000000000000815260026004820152602481018390529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef591637d048160916044808301926020929190829003018186803b1580156200102a57600080fd5b505af41580156200103f573d6000803e3d6000fd5b505050506040513d60208110156200105657600080fd5b505183518490839081106200106757fe5b602090810291909101015260010162000fae565b505090565b600a5490565b606060026001541415620010fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015581428110156200117157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b6002736829DFb55A4F1997B74c4E30C93040A29F4c1ef56373fd6b3e90918888886040518563ffffffff1660e01b815260040180858152602001848152602001806020018281038252848482818152602001925060200280828437600081840152601f19601f8201169050808301925050509550505050505060006040518083038186803b1580156200120357600080fd5b505af415801562001218573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156200126057600080fd5b81019080805160405193929190846401000000008211156200128157600080fd5b9083019060208201858111156200129757600080fd5b8251866020820283011164010000000082111715620012b557600080fd5b82525081516020918201928201910280838360005b83811015620012e4578181015183820152602001620012ca565b5050505090500160405250505091505060018055949350505050565b6200130a62003ad1565b73ffffffffffffffffffffffffffffffffffffffff166200132a6200248e565b73ffffffffffffffffffffffffffffffffffffffff1614620013ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517f467e186c00000000000000000000000000000000000000000000000000000000815260026004820152602481018390529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef59163467e186c916044808301926000929190829003018186803b15801562000eb057600080fd5b6000600260015414156200149557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155620014a462001be6565b156200151157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b81804211156200158257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b604080517fe7a4db81000000000000000000000000000000000000000000000000000000008152600260048201526024810188905260ff87166044820152606481018690529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef59163e7a4db81916084808301926020929190829003018186803b1580156200160557600080fd5b505af41580156200161a573d6000803e3d6000fd5b505050506040513d60208110156200163157600080fd5b5051600180559695505050505050565b6200164b62003ad1565b73ffffffffffffffffffffffffffffffffffffffff166200166b6200248e565b73ffffffffffffffffffffffffffffffffffffffff1614620016ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b620016f862003ad5565b565b604080517f968e55940000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff831660248201529051600091736829DFb55A4F1997B74c4E30C93040A29F4c1ef59163968e559491604480820192602092909190829003018186803b1580156200178657600080fd5b505af41580156200179b573d6000803e3d6000fd5b505050506040513d6020811015620017b257600080fd5b505192915050565b6000600260015414156200182f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556200183e62001be6565b15620018ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b81804211156200191c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b6002736829DFb55A4F1997B74c4E30C93040A29F4c1ef56340370edf90918888886040518563ffffffff1660e01b815260040180858152602001806020018381526020018281038252858582818152602001925060200280828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b1580156200160557600080fd5b620019b862003ad1565b73ffffffffffffffffffffffffffffffffffffffff16620019d86200248e565b73ffffffffffffffffffffffffffffffffffffffff161462001a5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517f58fdd79b0000000000000000000000000000000000000000000000000000000081526002600482015260248101849052604481018390529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef5916358fdd79b916064808301926000929190829003018186803b15801562001ad557600080fd5b505af415801562001aea573d6000803e3d6000fd5b505050505050565b62001afc62003ad1565b73ffffffffffffffffffffffffffffffffffffffff1662001b1c6200248e565b73ffffffffffffffffffffffffffffffffffffffff161462001b9f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b601080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005474010000000000000000000000000000000000000000900460ff1690565b60025460035460045460055460065460075460085460095473ffffffffffffffffffffffffffffffffffffffff1688565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600f6020526040812054909160ff9091169062001c718262001f9f565b73ffffffffffffffffffffffffffffffffffffffff161462001cf457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b92915050565b62001d0462003ad1565b73ffffffffffffffffffffffffffffffffffffffff1662001d246200248e565b73ffffffffffffffffffffffffffffffffffffffff161462001da757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b604080517ff967a81f0000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff84166024820152604481018390529051606091736829DFb55A4F1997B74c4E30C93040A29F4c1ef59163f967a81f91606480820192600092909190829003018186803b15801562001ea957600080fd5b505af415801562001ebe573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101562001f0657600080fd5b810190808051604051939291908464010000000082111562001f2757600080fd5b90830190602082018581111562001f3d57600080fd5b825186602082028301116401000000008211171562001f5b57600080fd5b82525081516020918201928201910280838360005b8381101562001f8a57818101518382015260200162001f70565b50505050905001604052505050905092915050565b600a5460009060ff8316106200201657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b600a805460ff84169081106200202857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b6200205a62003ad1565b73ffffffffffffffffffffffffffffffffffffffff166200207a6200248e565b73ffffffffffffffffffffffffffffffffffffffff1614620020fd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b620016f862003bc8565b6000600260015414156200217c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556200218b62001be6565b15620021f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b81804211156200226957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b6002736829DFb55A4F1997B74c4E30C93040A29F4c1ef56341b91c2690918888886040518563ffffffff1660e01b815260040180858152602001806020018381526020018281038252858582818152602001925060200280828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b1580156200160557600080fd5b6060600260080180548060200260200160405190810160405280929190818152602001828054801562000d3d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831162002339575050505050905090565b6200237862003ad1565b73ffffffffffffffffffffffffffffffffffffffff16620023986200248e565b73ffffffffffffffffffffffffffffffffffffffff16146200241b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517f7046727600000000000000000000000000000000000000000000000000000000815260026004820152602481018390529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef5916370467276916044808301926000929190829003018186803b15801562000eb057600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6000600260015414156200251f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556200252e62001be6565b156200259b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b81804211156200260c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b604080517fa5397b220000000000000000000000000000000000000000000000000000000081526002600482015260ff808a1660248301528816604482015260648101879052608481018690529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef59163a5397b229160a4808301926020929190829003018186803b1580156200269757600080fd5b505af4158015620026ac573d6000803e3d6000fd5b505050506040513d6020811015620026c357600080fd5b505160018055979650505050505050565b600a5460009060ff8316106200274b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e646578206f7574206f662072616e67650000000000000000000000000000604482015290519081900360640190fd5b600c805460ff84169081106200275d57fe5b90600052602060002001549050919050565b604080517fe4a9a0da0000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff851660248201526044810184905260ff831660648201528151600092736829DFb55A4F1997B74c4E30C93040A29F4c1ef59263e4a9a0da9260848083019392829003018186803b1580156200280657600080fd5b505af41580156200281b573d6000803e3d6000fd5b505050506040513d60408110156200283257600080fd5b5051949350505050565b604080517f4b23603c0000000000000000000000000000000000000000000000000000000081526002600482015260ff808616602483015284166044820152606481018390529051600091736829DFb55A4F1997B74c4E30C93040A29F4c1ef591634b23603c91608480820192602092909190829003018186803b158015620028c457600080fd5b505af4158015620028d9573d6000803e3d6000fd5b505050506040513d60208110156200283257600080fd5b620028fa62003ad1565b73ffffffffffffffffffffffffffffffffffffffff166200291a6200248e565b73ffffffffffffffffffffffffffffffffffffffff16146200299d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517f8ab7697e00000000000000000000000000000000000000000000000000000000815260026004820152602481018390529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef591638ab7697e916044808301926000929190829003018186803b15801562000eb057600080fd5b60095473ffffffffffffffffffffffffffffffffffffffff16331462002a9757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c792063616c6c61626c6520627920706f6f6c20746f6b656e0000000000604482015290519081900360640190fd5b604080517fe9252d460000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff84166024820152604481018390529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef59163e9252d46916064808301926000929190829003018186803b15801562001ad557600080fd5b60105473ffffffffffffffffffffffffffffffffffffffff1681565b62002b4c62003ad1565b73ffffffffffffffffffffffffffffffffffffffff1662002b6c6200248e565b73ffffffffffffffffffffffffffffffffffffffff161462002bef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517ff14e211e000000000000000000000000000000000000000000000000000000008152600260048201529051736829DFb55A4F1997B74c4E30C93040A29F4c1ef59163f14e211e916024808301926000929190829003018186803b15801562002c5b57600080fd5b505af415801562002c70573d6000803e3d6000fd5b50505050565b6060600260090180548060200260200160405190810160405280929190818152602001828054801562000d3d576020028201919060005260206000209081548152602001906001019080831162000d28575050505050905090565b60006002736829DFb55A4F1997B74c4E30C93040A29F4c1ef563b0a14cfc90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000f2257600080fd5b604080517fe8c47a540000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff831660248201529051600091736829DFb55A4F1997B74c4E30C93040A29F4c1ef59163e8c47a5491604480820192602092909190829003018186803b1580156200178657600080fd5b60105474010000000000000000000000000000000000000000900460ff161562002e3d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f537761703a20496e697469616c697a65206d7573742062652066616c73652e00604482015290519081900360640190fd5b600189511162002eae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5f706f6f6c6564546f6b656e732e6c656e677468203c3d203100000000000000604482015290519081900360640190fd5b60208951111562002f2057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5f706f6f6c6564546f6b656e732e6c656e677468203e20333200000000000000604482015290519081900360640190fd5b875189511462002f9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5f706f6f6c6564546f6b656e7320646563696d616c73206d69736d6174636800604482015290519081900360640190fd5b6060885167ffffffffffffffff8111801562002fac57600080fd5b5060405190808252806020026020018201604052801562002fd7578160200160208202803683370190505b50905060005b8a518160ff161015620033205760ff8116156200310e57600f60008c8360ff16815181106200300857fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205460ff16158015620030a257508a8160ff16815181106200305557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168b6000815181106200308157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614155b6200310e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4475706c696361746520746f6b656e7300000000000000000000000000000000604482015290519081900360640190fd5b600073ffffffffffffffffffffffffffffffffffffffff168b8260ff16815181106200313657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415620031c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f546865203020616464726573732069736e277420616e204552432d3230000000604482015290519081900360640190fd5b601260ff168a8260ff1681518110620031d757fe5b602002602001015160ff1611156200325057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546f6b656e20646563696d616c732065786365656473206d6178000000000000604482015290519081900360640190fd5b620032838a8260ff16815181106200326457fe5b602002602001015160ff16601260ff1662003ca990919063ffffffff16565b600a0a828260ff16815181106200329657fe5b60200260200101818152505080600f60008d8460ff1681518110620032b757fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff9290921691909117905560010162002fdd565b50620f424086106200339357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5f612065786365656473206d6178696d756d0000000000000000000000000000604482015290519081900360640190fd5b6305f5e1008511156200340757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5f6665652065786365656473206d6178696d756d000000000000000000000000604482015290519081900360640190fd5b6402540be4008411156200347c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5f61646d696e4665652065786365656473206d6178696d756d00000000000000604482015290519081900360640190fd5b6305f5e100831115620034f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5f77697468647261774665652065786365656473206d6178696d756d00000000604482015290519081900360640190fd5b87876012604051620035029062003da0565b60ff82166040820152606080825284519082015283518190602080830191608084019188019080838360005b83811015620035485781810151838201526020016200352e565b50505050905090810190601f168015620035765780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015620035ab57818101518382015260200162003591565b50505050905090810190601f168015620035d95780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f080158015620035fe573d6000803e3d6000fd5b50600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905589516200365990600a9060208d019062003dae565b5080516200366f90600b90602084019062003e3d565b50895167ffffffffffffffff811180156200368957600080fd5b50604051908082528060200260200182016040528015620036b4578160200160208202803683370190505b508051620036cb91600c9160209091019062003e3d565b50620036d986606462003d21565b600255620036e986606462003d21565b6003555060006004819055600555600693909355600791909155600855601080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161791909116740100000000000000000000000000000000000000001790555050505050565b60006002736829DFb55A4F1997B74c4E30C93040A29F4c1ef56371906c2c90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000f2257600080fd5b60006002736829DFb55A4F1997B74c4E30C93040A29F4c1ef5637d0481609091846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156200178657600080fd5b6200384862003ad1565b73ffffffffffffffffffffffffffffffffffffffff16620038686200248e565b73ffffffffffffffffffffffffffffffffffffffff1614620038eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811662003959576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180620058436026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006002736829DFb55A4F1997B74c4E30C93040A29F4c1ef5635e58579c9091878787876040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018060200183151581526020018281038252858582818152602001925060200280828437600081840152601f19601f820116905080830192505050965050505050505060206040518083038186803b15801562003a9a57600080fd5b505af415801562003aaf573d6000803e3d6000fd5b505050506040513d602081101562003ac657600080fd5b505195945050505050565b3390565b62003adf62001be6565b62003b4b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa62003b9e62003ad1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190a1565b62003bd262001be6565b1562003c3f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862003b9e62003ad1565b60008282111562003d1b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008262003d325750600062001cf4565b8282028284828162003d4057fe5b041462003d99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180620058696021913960400191505060405180910390fd5b9392505050565b6119698062003eda83390190565b82805482825590600052602060002090810192821562003e2b579160200282015b8281111562003e2b57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019062003dcf565b5062003e3992915062003e89565b5090565b82805482825590600052602060002090810192821562003e7b579160200282015b8281111562003e7b57825182559160200191906001019062003e5e565b5062003e3992915062003ec2565b5b8082111562003e395780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010162003e8a565b5b8082111562003e39576000815560010162003ec356fe60806040523480156200001157600080fd5b506040516200196938038062001969833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd916003918501906200029e565b508051620001d39060049060208401906200029e565b50506005805460ff19166012179055506000620001ef62000284565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620002508162000288565b6200025a62000284565b600680546001600160a01b0319166001600160a01b0392909216919091179055506200033a915050565b3390565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002e157805160ff191683800117855562000311565b8280016001018555821562000311579182015b8281111562000311578251825591602001919060010190620002f4565b506200031f92915062000323565b5090565b5b808211156200031f576000815560010162000324565b61161f806200034a6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063715018a6116100b257806395d89b4111610081578063a9059cbb11610066578063a9059cbb146103ff578063dd62ed3e14610438578063f2fde38b1461047357610136565b806395d89b41146103be578063a457c2d7146103c657610136565b8063715018a61461034457806379cc67901461034c5780638119c065146103855780638da5cb5b146103b657610136565b8063313ce5671161010957806340c10f19116100ee57806340c10f19146102b957806342966c68146102f457806370a082311461031157610136565b8063313ce56714610262578063395093511461028057610136565b806306fdde031461013b578063095ea7b3146101b857806318160ddd1461020557806323b872dd1461021f575b600080fd5b6101436104a6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017d578181015183820152602001610165565b50505050905090810190601f1680156101aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f1600480360360408110156101ce57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561055a565b604080519115158252519081900360200190f35b61020d610577565b60408051918252519081900360200190f35b6101f16004803603606081101561023557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561057d565b61026a61061e565b6040805160ff9092168252519081900360200190f35b6101f16004803603604081101561029657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610627565b6102f2600480360360408110156102cf57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610682565b005b6102f26004803603602081101561030a57600080fd5b50356107a4565b61020d6004803603602081101561032757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166107b8565b6102f26107e0565b6102f26004803603604081101561036257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356108fc565b61038d610956565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61038d610972565b610143610993565b6101f1600480360360408110156103dc57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a12565b6101f16004803603604081101561041557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a87565b61020d6004803603604081101561044e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610a9b565b6102f26004803603602081101561048957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ad3565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b5050505050905090565b600061056e610567610c7f565b8484610c83565b50600192915050565b60025490565b600061058a848484610dca565b61061484610596610c7f565b61060f8560405180606001604052806028815260200161150f6028913973ffffffffffffffffffffffffffffffffffffffff8a166000908152600160205260408120906105e1610c7f565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020549190610f9a565b610c83565b5060019392505050565b60055460ff1690565b600061056e610634610c7f565b8461060f8560016000610645610c7f565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549061104b565b61068a610c7f565b73ffffffffffffffffffffffffffffffffffffffff166106a8610972565b73ffffffffffffffffffffffffffffffffffffffff161461072a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8061079657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f616d6f756e74203d3d2030000000000000000000000000000000000000000000604482015290519081900360640190fd5b6107a082826110c6565b5050565b6107b56107af610c7f565b826111f7565b50565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6107e8610c7f565b73ffffffffffffffffffffffffffffffffffffffff16610806610972565b73ffffffffffffffffffffffffffffffffffffffff161461088857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600554604051600091610100900473ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580547fffffffffffffffffffffff0000000000000000000000000000000000000000ff169055565b6000610933826040518060600160405280602481526020016115376024913961092c86610927610c7f565b610a9b565b9190610f9a565b905061094783610941610c7f565b83610c83565b61095183836111f7565b505050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b600554610100900473ffffffffffffffffffffffffffffffffffffffff1690565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105505780601f1061052557610100808354040283529160200191610550565b600061056e610a1f610c7f565b8461060f856040518060600160405280602581526020016115c56025913960016000610a49610c7f565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d16815292529020549190610f9a565b600061056e610a94610c7f565b8484610dca565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b610adb610c7f565b73ffffffffffffffffffffffffffffffffffffffff16610af9610972565b73ffffffffffffffffffffffffffffffffffffffff1614610b7b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610be7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806114a16026913960400191505060405180910390fd5b60055460405173ffffffffffffffffffffffffffffffffffffffff80841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316610cef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806115a16024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610d5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806114c76022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061157c6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610ea2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061145c6023913960400191505060405180910390fd5b610ead838383611341565b610ef7816040518060600160405280602681526020016114e96026913973ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020549190610f9a565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082209390935590841681522054610f33908261104b565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115611043576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611008578181015183820152602001610ff0565b50505050905090810190601f1680156110355780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156110bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff821661114857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61115460008383611341565b600254611161908261104b565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611194908261104b565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff8216611263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061155b6021913960400191505060405180910390fd5b61126f82600083611341565b6112b98160405180606001604052806022815260200161147f6022913973ffffffffffffffffffffffffffffffffffffffff85166000908152602081905260409020549190610f9a565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020556002546112ec90826113e4565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b61134c838383610951565b600654604080517fc00c125c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529151919092169163c00c125c91604480830192600092919082900301818387803b1580156113c757600080fd5b505af11580156113db573d6000803e3d6000fd5b50505050505050565b60008282111561145557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220fec5a448efb70dce0a391362014c6c6f0f4d591bd9f39b0785f7762c2144f3c964736f6c634300060c00334f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122024be09d058a140221e41a852eca7ab86552e6996688a82f0c81862f13a0590ac64736f6c634300060c0033a2646970667358221220618c370452607a17600f114c75a554e65315d545314f306799e6f5ac6563833964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80639dd3d9fd14610030575b600080fd5b610293600480360361012081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184602083028401116401000000008311171561009657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156100e657600080fd5b8201836020820111156100f857600080fd5b8035906020019184602083028401116401000000008311171561011a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101f157600080fd5b82018360208201111561020357600080fd5b8035906020019184600183028401116401000000008311171561022557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040810135906060810135906080013573ffffffffffffffffffffffffffffffffffffffff166102bc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6000806040516102cb90610578565b604051809103906000f0801580156102e7573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663df3ed68d8c8c8c8c8c8c8c8c336040518a63ffffffff1660e01b815260040180806020018060200180602001806020018a81526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185810385528e818151815260200191508051906020019060200280838360005b8381101561039e578181015183820152602001610386565b5050505090500185810384528d818151815260200191508051906020019060200280838360005b838110156103dd5781810151838201526020016103c5565b5050505090500185810383528c818151815260200191508051906020019080838360005b83811015610419578181015183820152602001610401565b50505050905090810190601f1680156104465780820380516001836020036101000a031916815260200191505b5085810382528b5181528b516020918201918d019080838360005b83811015610479578181015183820152602001610461565b50505050905090810190601f1680156104a65780820380516001836020036101000a031916815260200191505b509d5050505050505050505050505050600060405180830381600087803b1580156104d057600080fd5b505af11580156104e4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561055157600080fd5b505af1158015610565573d6000803e3d6000fd5b50929d9c50505050505050505050505050565b61595f806105868339019056fe60806040526010805460ff60a01b191690553480156200001e57600080fd5b5060006200002b6200008c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690556001805562000090565b3390565b6158bf80620000a06000396000f3fe60806040523480156200001157600080fd5b50600436106200031b5760003560e01c80638456cb5911620001ad578063c00c125c11620000f9578063da7a77be11620000a5578063ef0a712f116200007b578063ef0a712f1462000bff578063f2fde38b1462000c1f578063f9273ffb1462000c55576200031b565b8063da7a77be146200094d578063df3ed68d1462000983578063e25aa5fa1462000bf5576200031b565b8063c4db7fa011620000db578063c4db7fa0146200092f578063d41f65681462000939578063d46300fd1462000943576200031b565b8063c00c125c14620008e9578063c45a01551462000925576200031b565b806391695586116200015957806398899f40116200013b57806398899f401462000851578063a95b089f1462000896578063ac5bf26314620008c9576200031b565b80639169558614620007ef57806391ceb3eb146200082e576200031b565b806389c06568116200018f57806389c0656814620007bb5780638beb60b614620007c55780638da5cb5b14620007e5576200031b565b80638456cb59146200073557806384cdd9bc146200073f576200031b565b80634a1b0d57116200026d5780635fd65f0f1162000219578063715018a611620001fb578063715018a614620006a35780637c61e56114620006ad57806382b8660014620006e9576200031b565b80635fd65f0f14620005f657806366c0bd241462000657576200031b565b8063593d132c116200024f578063593d132c146200057c5780635bb4780814620005a25780635c975abb14620005d8576200031b565b80634a1b0d5714620004ca5780634d49e87d1462000500576200031b565b80632f71b91211620002cd57806334e1990711620002af57806334e19907146200046b5780633e3a1560146200048b5780633f4ba83a14620004c0576200031b565b80632f71b91214620003e457806331cd52b014620003ee576200031b565b80630419b45a11620003035780630419b45a14620003c45780630ba8195914620003d057806318f52ce214620003da576200031b565b8062113e081462000320578063029a326b146200037c575b600080fd5b6200032a62000cea565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015620003685781810151838201526020016200034e565b505050509050019250505060405180910390f35b620003b2600480360360208110156200039457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000d47565b60408051918252519081900360200190f35b620003ce62000d6f565b005b620003b262000ecd565b6200032a62000f55565b620003b262001080565b6200032a600480360360608110156200040657600080fd5b813591908101906040810160208201356401000000008111156200042957600080fd5b8201836020820111156200043c57600080fd5b803590602001918460208302840111640100000000831117156200045f57600080fd5b91935091503562001086565b620003ce600480360360208110156200048357600080fd5b503562001300565b620003b260048036036080811015620004a357600080fd5b5080359060ff602082013516906040810135906060013562001420565b620003ce62001641565b620003b260048036036020811015620004e257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620016fa565b620003b2600480360360608110156200051857600080fd5b8101906020810181356401000000008111156200053457600080fd5b8201836020820111156200054757600080fd5b803590602001918460208302840111640100000000831117156200056a57600080fd5b919350915080359060200135620017ba565b620003ce600480360360408110156200059457600080fd5b5080359060200135620019ae565b620003ce60048036036020811015620005ba57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001af2565b620005e262001be6565b604080519115158252519081900360200190f35b6200060062001c07565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015273ffffffffffffffffffffffffffffffffffffffff1660e083015251908190036101000190f35b6200068d600480360360208110156200066f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001c38565b6040805160ff9092168252519081900360200190f35b620003ce62001cfa565b6200032a60048036036040811015620006c557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013562001e16565b6200070c600480360360208110156200070157600080fd5b503560ff1662001f9f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b620003ce62002050565b620003b2600480360360608110156200075757600080fd5b8101906020810181356401000000008111156200077357600080fd5b8201836020820111156200078657600080fd5b80359060200191846020830284011164010000000083111715620007a957600080fd5b91935091508035906020013562002107565b6200032a620022fb565b620003ce60048036036020811015620007dd57600080fd5b50356200236e565b6200070c6200248e565b620003b2600480360360a08110156200080757600080fd5b5060ff813581169160208101359091169060408101359060608101359060800135620024aa565b620003b2600480360360208110156200084657600080fd5b503560ff16620026d4565b620003b2600480360360608110156200086957600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020810135906040013560ff166200276f565b620003b260048036036060811015620008ae57600080fd5b5060ff8135811691602081013590911690604001356200283c565b620003ce60048036036020811015620008e157600080fd5b5035620028f0565b620003ce600480360360408110156200090157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013562002a10565b6200070c62002b26565b620003ce62002b42565b6200032a62002c76565b620003b262002cd1565b620003b2600480360360208110156200096557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662002d26565b620003ce60048036036101208110156200099c57600080fd5b810190602081018135640100000000811115620009b857600080fd5b820183602082011115620009cb57600080fd5b80359060200191846020830284011164010000000083111715620009ee57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111562000a3f57600080fd5b82018360208201111562000a5257600080fd5b8035906020019184602083028401116401000000008311171562000a7557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111562000ac657600080fd5b82018360208201111562000ad957600080fd5b8035906020019184600183028401116401000000008311171562000afc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111562000b5057600080fd5b82018360208201111562000b6357600080fd5b8035906020019184600183028401116401000000008311171562000b8657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040810135906060810135906080013573ffffffffffffffffffffffffffffffffffffffff1662002db2565b620003b26200378c565b620003b26004803603602081101562000c1757600080fd5b5035620037e1565b620003ce6004803603602081101562000c3757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166200383e565b620003b26004803603606081101562000c6d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111562000ca657600080fd5b82018360208201111562000cb957600080fd5b8035906020019184602083028401116401000000008311171562000cdc57600080fd5b9193509150351515620039e6565b60606002600a0180548060200260200160405190810160405280929190818152602001828054801562000d3d57602002820191906000526020600020905b81548152602001906001019080831162000d28575b5050505050905090565b73ffffffffffffffffffffffffffffffffffffffff166000908152600e602052604090205490565b601054604080517f017e7e58000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163017e7e58916004808301926020929190829003018186803b15801562000ddb57600080fd5b505afa15801562000df0573d6000803e3d6000fd5b505050506040513d602081101562000e0757600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81161562000eca57604080517f24c5c7510000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__916324c5c751916044808301926000929190829003018186803b15801562000eb057600080fd5b505af415801562000ec5573d6000803e3d6000fd5b505050505b50565b6000600273__$ba915c0b31ae0775f7b2dbb35feeac279e$__63c9b64dcb90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000f2257600080fd5b505af415801562000f37573d6000803e3d6000fd5b505050506040513d602081101562000f4e57600080fd5b5051905090565b6060600062000f6362001080565b90508067ffffffffffffffff8111801562000f7d57600080fd5b5060405190808252806020026020018201604052801562000fa8578160200160208202803683370190505b50915060005b818110156200107b57604080517f7d0481600000000000000000000000000000000000000000000000000000000081526002600482015260248101839052905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__91637d048160916044808301926020929190829003018186803b1580156200102a57600080fd5b505af41580156200103f573d6000803e3d6000fd5b505050506040513d60208110156200105657600080fd5b505183518490839081106200106757fe5b602090810291909101015260010162000fae565b505090565b600a5490565b606060026001541415620010fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015581428110156200117157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b600273__$ba915c0b31ae0775f7b2dbb35feeac279e$__6373fd6b3e90918888886040518563ffffffff1660e01b815260040180858152602001848152602001806020018281038252848482818152602001925060200280828437600081840152601f19601f8201169050808301925050509550505050505060006040518083038186803b1580156200120357600080fd5b505af415801562001218573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156200126057600080fd5b81019080805160405193929190846401000000008211156200128157600080fd5b9083019060208201858111156200129757600080fd5b8251866020820283011164010000000082111715620012b557600080fd5b82525081516020918201928201910280838360005b83811015620012e4578181015183820152602001620012ca565b5050505090500160405250505091505060018055949350505050565b6200130a62003ad1565b73ffffffffffffffffffffffffffffffffffffffff166200132a6200248e565b73ffffffffffffffffffffffffffffffffffffffff1614620013ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517f467e186c0000000000000000000000000000000000000000000000000000000081526002600482015260248101839052905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__9163467e186c916044808301926000929190829003018186803b15801562000eb057600080fd5b6000600260015414156200149557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155620014a462001be6565b156200151157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b81804211156200158257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b604080517fe7a4db81000000000000000000000000000000000000000000000000000000008152600260048201526024810188905260ff8716604482015260648101869052905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__9163e7a4db81916084808301926020929190829003018186803b1580156200160557600080fd5b505af41580156200161a573d6000803e3d6000fd5b505050506040513d60208110156200163157600080fd5b5051600180559695505050505050565b6200164b62003ad1565b73ffffffffffffffffffffffffffffffffffffffff166200166b6200248e565b73ffffffffffffffffffffffffffffffffffffffff1614620016ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b620016f862003ad5565b565b604080517f968e55940000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152905160009173__$ba915c0b31ae0775f7b2dbb35feeac279e$__9163968e559491604480820192602092909190829003018186803b1580156200178657600080fd5b505af41580156200179b573d6000803e3d6000fd5b505050506040513d6020811015620017b257600080fd5b505192915050565b6000600260015414156200182f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556200183e62001be6565b15620018ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b81804211156200191c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b600273__$ba915c0b31ae0775f7b2dbb35feeac279e$__6340370edf90918888886040518563ffffffff1660e01b815260040180858152602001806020018381526020018281038252858582818152602001925060200280828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b1580156200160557600080fd5b620019b862003ad1565b73ffffffffffffffffffffffffffffffffffffffff16620019d86200248e565b73ffffffffffffffffffffffffffffffffffffffff161462001a5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517f58fdd79b000000000000000000000000000000000000000000000000000000008152600260048201526024810184905260448101839052905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__916358fdd79b916064808301926000929190829003018186803b15801562001ad557600080fd5b505af415801562001aea573d6000803e3d6000fd5b505050505050565b62001afc62003ad1565b73ffffffffffffffffffffffffffffffffffffffff1662001b1c6200248e565b73ffffffffffffffffffffffffffffffffffffffff161462001b9f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b601080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005474010000000000000000000000000000000000000000900460ff1690565b60025460035460045460055460065460075460085460095473ffffffffffffffffffffffffffffffffffffffff1688565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600f6020526040812054909160ff9091169062001c718262001f9f565b73ffffffffffffffffffffffffffffffffffffffff161462001cf457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f74206578697374000000000000000000000000604482015290519081900360640190fd5b92915050565b62001d0462003ad1565b73ffffffffffffffffffffffffffffffffffffffff1662001d246200248e565b73ffffffffffffffffffffffffffffffffffffffff161462001da757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b604080517ff967a81f0000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015260448101839052905160609173__$ba915c0b31ae0775f7b2dbb35feeac279e$__9163f967a81f91606480820192600092909190829003018186803b15801562001ea957600080fd5b505af415801562001ebe573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101562001f0657600080fd5b810190808051604051939291908464010000000082111562001f2757600080fd5b90830190602082018581111562001f3d57600080fd5b825186602082028301116401000000008211171562001f5b57600080fd5b82525081516020918201928201910280838360005b8381101562001f8a57818101518382015260200162001f70565b50505050905001604052505050905092915050565b600a5460009060ff8316106200201657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b600a805460ff84169081106200202857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b6200205a62003ad1565b73ffffffffffffffffffffffffffffffffffffffff166200207a6200248e565b73ffffffffffffffffffffffffffffffffffffffff1614620020fd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b620016f862003bc8565b6000600260015414156200217c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556200218b62001be6565b15620021f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b81804211156200226957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b600273__$ba915c0b31ae0775f7b2dbb35feeac279e$__6341b91c2690918888886040518563ffffffff1660e01b815260040180858152602001806020018381526020018281038252858582818152602001925060200280828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b1580156200160557600080fd5b6060600260080180548060200260200160405190810160405280929190818152602001828054801562000d3d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831162002339575050505050905090565b6200237862003ad1565b73ffffffffffffffffffffffffffffffffffffffff16620023986200248e565b73ffffffffffffffffffffffffffffffffffffffff16146200241b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517f704672760000000000000000000000000000000000000000000000000000000081526002600482015260248101839052905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__916370467276916044808301926000929190829003018186803b15801562000eb057600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6000600260015414156200251f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556200252e62001be6565b156200259b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b81804211156200260c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d657400000000000000000000000000000000604482015290519081900360640190fd5b604080517fa5397b220000000000000000000000000000000000000000000000000000000081526002600482015260ff808a166024830152881660448201526064810187905260848101869052905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__9163a5397b229160a4808301926020929190829003018186803b1580156200269757600080fd5b505af4158015620026ac573d6000803e3d6000fd5b505050506040513d6020811015620026c357600080fd5b505160018055979650505050505050565b600a5460009060ff8316106200274b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e646578206f7574206f662072616e67650000000000000000000000000000604482015290519081900360640190fd5b600c805460ff84169081106200275d57fe5b90600052602060002001549050919050565b604080517fe4a9a0da0000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff851660248201526044810184905260ff83166064820152815160009273__$ba915c0b31ae0775f7b2dbb35feeac279e$__9263e4a9a0da9260848083019392829003018186803b1580156200280657600080fd5b505af41580156200281b573d6000803e3d6000fd5b505050506040513d60408110156200283257600080fd5b5051949350505050565b604080517f4b23603c0000000000000000000000000000000000000000000000000000000081526002600482015260ff80861660248301528416604482015260648101839052905160009173__$ba915c0b31ae0775f7b2dbb35feeac279e$__91634b23603c91608480820192602092909190829003018186803b158015620028c457600080fd5b505af4158015620028d9573d6000803e3d6000fd5b505050506040513d60208110156200283257600080fd5b620028fa62003ad1565b73ffffffffffffffffffffffffffffffffffffffff166200291a6200248e565b73ffffffffffffffffffffffffffffffffffffffff16146200299d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517f8ab7697e0000000000000000000000000000000000000000000000000000000081526002600482015260248101839052905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__91638ab7697e916044808301926000929190829003018186803b15801562000eb057600080fd5b60095473ffffffffffffffffffffffffffffffffffffffff16331462002a9757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c792063616c6c61626c6520627920706f6f6c20746f6b656e0000000000604482015290519081900360640190fd5b604080517fe9252d460000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015260448101839052905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__9163e9252d46916064808301926000929190829003018186803b15801562001ad557600080fd5b60105473ffffffffffffffffffffffffffffffffffffffff1681565b62002b4c62003ad1565b73ffffffffffffffffffffffffffffffffffffffff1662002b6c6200248e565b73ffffffffffffffffffffffffffffffffffffffff161462002bef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b604080517ff14e211e00000000000000000000000000000000000000000000000000000000815260026004820152905173__$ba915c0b31ae0775f7b2dbb35feeac279e$__9163f14e211e916024808301926000929190829003018186803b15801562002c5b57600080fd5b505af415801562002c70573d6000803e3d6000fd5b50505050565b6060600260090180548060200260200160405190810160405280929190818152602001828054801562000d3d576020028201919060005260206000209081548152602001906001019080831162000d28575050505050905090565b6000600273__$ba915c0b31ae0775f7b2dbb35feeac279e$__63b0a14cfc90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000f2257600080fd5b604080517fe8c47a540000000000000000000000000000000000000000000000000000000081526002600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152905160009173__$ba915c0b31ae0775f7b2dbb35feeac279e$__9163e8c47a5491604480820192602092909190829003018186803b1580156200178657600080fd5b60105474010000000000000000000000000000000000000000900460ff161562002e3d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f537761703a20496e697469616c697a65206d7573742062652066616c73652e00604482015290519081900360640190fd5b600189511162002eae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5f706f6f6c6564546f6b656e732e6c656e677468203c3d203100000000000000604482015290519081900360640190fd5b60208951111562002f2057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5f706f6f6c6564546f6b656e732e6c656e677468203e20333200000000000000604482015290519081900360640190fd5b875189511462002f9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5f706f6f6c6564546f6b656e7320646563696d616c73206d69736d6174636800604482015290519081900360640190fd5b6060885167ffffffffffffffff8111801562002fac57600080fd5b5060405190808252806020026020018201604052801562002fd7578160200160208202803683370190505b50905060005b8a518160ff161015620033205760ff8116156200310e57600f60008c8360ff16815181106200300857fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205460ff16158015620030a257508a8160ff16815181106200305557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168b6000815181106200308157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614155b6200310e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4475706c696361746520746f6b656e7300000000000000000000000000000000604482015290519081900360640190fd5b600073ffffffffffffffffffffffffffffffffffffffff168b8260ff16815181106200313657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415620031c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f546865203020616464726573732069736e277420616e204552432d3230000000604482015290519081900360640190fd5b601260ff168a8260ff1681518110620031d757fe5b602002602001015160ff1611156200325057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546f6b656e20646563696d616c732065786365656473206d6178000000000000604482015290519081900360640190fd5b620032838a8260ff16815181106200326457fe5b602002602001015160ff16601260ff1662003ca990919063ffffffff16565b600a0a828260ff16815181106200329657fe5b60200260200101818152505080600f60008d8460ff1681518110620032b757fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff9290921691909117905560010162002fdd565b50620f424086106200339357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5f612065786365656473206d6178696d756d0000000000000000000000000000604482015290519081900360640190fd5b6305f5e1008511156200340757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5f6665652065786365656473206d6178696d756d000000000000000000000000604482015290519081900360640190fd5b6402540be4008411156200347c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5f61646d696e4665652065786365656473206d6178696d756d00000000000000604482015290519081900360640190fd5b6305f5e100831115620034f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5f77697468647261774665652065786365656473206d6178696d756d00000000604482015290519081900360640190fd5b87876012604051620035029062003da0565b60ff82166040820152606080825284519082015283518190602080830191608084019188019080838360005b83811015620035485781810151838201526020016200352e565b50505050905090810190601f168015620035765780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015620035ab57818101518382015260200162003591565b50505050905090810190601f168015620035d95780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f080158015620035fe573d6000803e3d6000fd5b50600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905589516200365990600a9060208d019062003dae565b5080516200366f90600b90602084019062003e3d565b50895167ffffffffffffffff811180156200368957600080fd5b50604051908082528060200260200182016040528015620036b4578160200160208202803683370190505b508051620036cb91600c9160209091019062003e3d565b50620036d986606462003d21565b600255620036e986606462003d21565b6003555060006004819055600555600693909355600791909155600855601080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161791909116740100000000000000000000000000000000000000001790555050505050565b6000600273__$ba915c0b31ae0775f7b2dbb35feeac279e$__6371906c2c90916040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000f2257600080fd5b6000600273__$ba915c0b31ae0775f7b2dbb35feeac279e$__637d0481609091846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156200178657600080fd5b6200384862003ad1565b73ffffffffffffffffffffffffffffffffffffffff16620038686200248e565b73ffffffffffffffffffffffffffffffffffffffff1614620038eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811662003959576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180620058436026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000600273__$ba915c0b31ae0775f7b2dbb35feeac279e$__635e58579c9091878787876040518663ffffffff1660e01b8152600401808681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018060200183151581526020018281038252858582818152602001925060200280828437600081840152601f19601f820116905080830192505050965050505050505060206040518083038186803b15801562003a9a57600080fd5b505af415801562003aaf573d6000803e3d6000fd5b505050506040513d602081101562003ac657600080fd5b505195945050505050565b3390565b62003adf62001be6565b62003b4b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa62003b9e62003ad1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190a1565b62003bd262001be6565b1562003c3f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862003b9e62003ad1565b60008282111562003d1b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008262003d325750600062001cf4565b8282028284828162003d4057fe5b041462003d99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180620058696021913960400191505060405180910390fd5b9392505050565b6119698062003eda83390190565b82805482825590600052602060002090810192821562003e2b579160200282015b8281111562003e2b57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019062003dcf565b5062003e3992915062003e89565b5090565b82805482825590600052602060002090810192821562003e7b579160200282015b8281111562003e7b57825182559160200191906001019062003e5e565b5062003e3992915062003ec2565b5b8082111562003e395780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010162003e8a565b5b8082111562003e39576000815560010162003ec356fe60806040523480156200001157600080fd5b506040516200196938038062001969833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd916003918501906200029e565b508051620001d39060049060208401906200029e565b50506005805460ff19166012179055506000620001ef62000284565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620002508162000288565b6200025a62000284565b600680546001600160a01b0319166001600160a01b0392909216919091179055506200033a915050565b3390565b6005805460ff191660ff92909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002e157805160ff191683800117855562000311565b8280016001018555821562000311579182015b8281111562000311578251825591602001919060010190620002f4565b506200031f92915062000323565b5090565b5b808211156200031f576000815560010162000324565b61161f806200034a6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063715018a6116100b257806395d89b4111610081578063a9059cbb11610066578063a9059cbb146103ff578063dd62ed3e14610438578063f2fde38b1461047357610136565b806395d89b41146103be578063a457c2d7146103c657610136565b8063715018a61461034457806379cc67901461034c5780638119c065146103855780638da5cb5b146103b657610136565b8063313ce5671161010957806340c10f19116100ee57806340c10f19146102b957806342966c68146102f457806370a082311461031157610136565b8063313ce56714610262578063395093511461028057610136565b806306fdde031461013b578063095ea7b3146101b857806318160ddd1461020557806323b872dd1461021f575b600080fd5b6101436104a6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017d578181015183820152602001610165565b50505050905090810190601f1680156101aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f1600480360360408110156101ce57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561055a565b604080519115158252519081900360200190f35b61020d610577565b60408051918252519081900360200190f35b6101f16004803603606081101561023557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561057d565b61026a61061e565b6040805160ff9092168252519081900360200190f35b6101f16004803603604081101561029657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610627565b6102f2600480360360408110156102cf57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610682565b005b6102f26004803603602081101561030a57600080fd5b50356107a4565b61020d6004803603602081101561032757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166107b8565b6102f26107e0565b6102f26004803603604081101561036257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356108fc565b61038d610956565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61038d610972565b610143610993565b6101f1600480360360408110156103dc57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a12565b6101f16004803603604081101561041557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a87565b61020d6004803603604081101561044e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610a9b565b6102f26004803603602081101561048957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ad3565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b5050505050905090565b600061056e610567610c7f565b8484610c83565b50600192915050565b60025490565b600061058a848484610dca565b61061484610596610c7f565b61060f8560405180606001604052806028815260200161150f6028913973ffffffffffffffffffffffffffffffffffffffff8a166000908152600160205260408120906105e1610c7f565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020549190610f9a565b610c83565b5060019392505050565b60055460ff1690565b600061056e610634610c7f565b8461060f8560016000610645610c7f565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549061104b565b61068a610c7f565b73ffffffffffffffffffffffffffffffffffffffff166106a8610972565b73ffffffffffffffffffffffffffffffffffffffff161461072a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8061079657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f616d6f756e74203d3d2030000000000000000000000000000000000000000000604482015290519081900360640190fd5b6107a082826110c6565b5050565b6107b56107af610c7f565b826111f7565b50565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6107e8610c7f565b73ffffffffffffffffffffffffffffffffffffffff16610806610972565b73ffffffffffffffffffffffffffffffffffffffff161461088857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600554604051600091610100900473ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580547fffffffffffffffffffffff0000000000000000000000000000000000000000ff169055565b6000610933826040518060600160405280602481526020016115376024913961092c86610927610c7f565b610a9b565b9190610f9a565b905061094783610941610c7f565b83610c83565b61095183836111f7565b505050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b600554610100900473ffffffffffffffffffffffffffffffffffffffff1690565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105505780601f1061052557610100808354040283529160200191610550565b600061056e610a1f610c7f565b8461060f856040518060600160405280602581526020016115c56025913960016000610a49610c7f565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d16815292529020549190610f9a565b600061056e610a94610c7f565b8484610dca565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b610adb610c7f565b73ffffffffffffffffffffffffffffffffffffffff16610af9610972565b73ffffffffffffffffffffffffffffffffffffffff1614610b7b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610be7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806114a16026913960400191505060405180910390fd5b60055460405173ffffffffffffffffffffffffffffffffffffffff80841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316610cef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806115a16024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610d5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806114c76022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061157c6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610ea2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061145c6023913960400191505060405180910390fd5b610ead838383611341565b610ef7816040518060600160405280602681526020016114e96026913973ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020549190610f9a565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082209390935590841681522054610f33908261104b565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115611043576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611008578181015183820152602001610ff0565b50505050905090810190601f1680156110355780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156110bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff821661114857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61115460008383611341565b600254611161908261104b565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611194908261104b565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff8216611263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061155b6021913960400191505060405180910390fd5b61126f82600083611341565b6112b98160405180606001604052806022815260200161147f6022913973ffffffffffffffffffffffffffffffffffffffff85166000908152602081905260409020549190610f9a565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020556002546112ec90826113e4565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b61134c838383610951565b600654604080517fc00c125c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529151919092169163c00c125c91604480830192600092919082900301818387803b1580156113c757600080fd5b505af11580156113db573d6000803e3d6000fd5b50505050505050565b60008282111561145557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220fec5a448efb70dce0a391362014c6c6f0f4d591bd9f39b0785f7762c2144f3c964736f6c634300060c00334f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122024be09d058a140221e41a852eca7ab86552e6996688a82f0c81862f13a0590ac64736f6c634300060c0033a2646970667358221220618c370452607a17600f114c75a554e65315d545314f306799e6f5ac6563833964736f6c634300060c0033",
  "libraries": {
    "SwapUtils": "0x6829DFb55A4F1997B74c4E30C93040A29F4c1ef5"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}