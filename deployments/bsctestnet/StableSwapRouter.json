{
  "address": "0x1f8C7722C72e5A4E59A28071a6D26F2E7E7C9cda",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateConvert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "iBase",
          "type": "uint8"
        }
      ],
      "name": "calculateRemoveBaseLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "availableTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "is_deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "i",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_min_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeBaseLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_meta",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_base",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b74ea6521d89c20c8a853e92c2317e817cdb883c750693c5744aa94572d3171",
  "receipt": {
    "to": null,
    "from": "0x7a1a8Ecd640bB8399DB2c5265A45AD8a91BF63CC",
    "contractAddress": "0x1f8C7722C72e5A4E59A28071a6D26F2E7E7C9cda",
    "transactionIndex": 10,
    "gasUsed": "4575048",
    "logsBloom": "0x
    "blockHash": "0xbd861f686cd8d62afc05d762a59994e50fcc88ad20d4a825a1c983bd69e38d88",
    "transactionHash": "0x9b74ea6521d89c20c8a853e92c2317e817cdb883c750693c5744aa94572d3171",
    "logs": [],
    "blockNumber": 8925267,
    "cumulativeGasUsed": "5081674",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "62812d29f709351baf601151a10eb8e0",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"iBase\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveBaseLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"is_deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"i\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_min_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeBaseLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_meta\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_base\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableSwap/StableSwapRouter.sol\":\"StableSwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenLength() external view returns (uint);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function swapStorage() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, address);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    // withdraw fee update function\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\\n    external;\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateTokenAmount(\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n}\\n\",\"keccak256\":\"0x830f79d1e17a4fbb800902e2866bb95a18c91de7956ceada7159441fb28fded5\",\"license\":\"MIT\"},\"contracts/stableSwap/StableSwapRouter.sol\":{\"content\":\"pragma solidity =0.6.12;\\n\\nimport '../interfaces/ISwap.sol';\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract StableSwapRouter {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    function getLpToken(ISwap _pool) internal view returns (address lpToken) {\\n        (,,,,,,, lpToken) = _pool.swapStorage();\\n    }\\n\\n    function calculateConvert(ISwap fromPool, ISwap toPool, uint256 amount) external view returns (uint256){\\n        uint fromPoolLength = fromPool.getTokenLength();\\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 fromCoin = fromPool.getToken(i);\\n            uint toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n            meta_amounts[toCoinIndex] = amounts[i];\\n        }\\n        return toPool.calculateTokenAmount(address(this), meta_amounts, true);\\n    }\\n\\n    function convert(ISwap fromPool, ISwap toPool, uint256 amount, uint256 minToMint, uint256 deadline) external returns (uint256) {\\n        uint fromPoolLength = fromPool.getTokenLength();\\n        uint toPoolLength = toPool.getTokenLength();\\n        require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n        require(fromPoolLength == toPoolLength, \\\"Invalid token length\\\");\\n        IERC20 fromToken = IERC20(getLpToken(fromPool));\\n        IERC20 toToken = IERC20(getLpToken(toPool));\\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n        // validate token length\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 fromTokenCoin = fromPool.getToken(i);\\n            toPool.getTokenIndex(address(fromTokenCoin));\\n        }\\n        fromToken.transferFrom(msg.sender, address(this), amount);\\n        fromToken.approve(address(fromPool), amount);\\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n        for (uint8 i = 0; i < toPoolLength; i++) {\\n            IERC20 coin = toPool.getToken(i);\\n            uint256 addBalance = coin.balanceOf(address(this));\\n            coin.safeApprove(address(toPool), addBalance);\\n            meta_amounts[i] = addBalance;\\n        }\\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n        uint256 lpAmount = toToken.balanceOf(address(this));\\n        toToken.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function addLiquidity(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 token = IERC20(getLpToken(pool));\\n        require(base_amounts.length == basePool.getTokenLength(), \\\"Invalid base token length\\\");\\n        require(meta_amounts.length == pool.getTokenLength(), \\\"Invalid meta token length\\\");\\n        bool deposit_base = false;\\n        for (uint8 i = 0; i < base_amounts.length; i++) {\\n            uint256 amount = base_amounts[i];\\n            if (amount > 0) {\\n                deposit_base = true;\\n                IERC20 coin = basePool.getToken(i);\\n                coin.safeTransferFrom(msg.sender, address(this), amount);\\n                uint256 transferred = coin.balanceOf(address(this));\\n                coin.safeApprove(address(basePool), transferred);\\n                base_amounts[i] = transferred;\\n            }\\n        }\\n        if (deposit_base) {\\n            basePool.addLiquidity(base_amounts, 0, deadline);\\n        }\\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\\n            IERC20 coin = pool.getToken(i);\\n            if (meta_amounts[i] > 0) {\\n                coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\\n            }\\n            uint256 transferred = coin.balanceOf(address(this));\\n            coin.safeApprove(address(pool), transferred);\\n            meta_amounts[i] = transferred;\\n        }\\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\\n        uint256 lpAmount = token.balanceOf(address(this));\\n        token.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n\\n    function removeLiquidity(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint256 _amount,\\n        uint256[] calldata min_amounts_meta,\\n        uint256[] calldata min_amounts_base,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n        IERC20 token = IERC20(getLpToken(pool));\\n        IERC20 baseToken = IERC20(getLpToken(basePool));\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        token.approve(address(pool), _amount);\\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n        uint _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.approve(address(basePool), _base_amount);\\n\\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n        // Transfer all coins out\\n        amounts = new uint256[](pool.getTokenLength());\\n        for (uint8 i = 0; i < pool.getTokenLength(); i++) {\\n            IERC20 coin = pool.getToken(i);\\n            amounts[i] = coin.balanceOf(address(this));\\n            coin.safeTransfer(msg.sender, amounts[i]);\\n        }\\n        base_amounts = new uint256[](basePool.getTokenLength());\\n        for (uint8 i = 0; i < basePool.getTokenLength(); i++) {\\n            IERC20 coin = basePool.getToken(i);\\n            base_amounts[i] = coin.balanceOf(address(this));\\n            coin.safeTransfer(msg.sender, base_amounts[i]);\\n        }\\n    }\\n\\n    function removeBaseLiquidityOneToken(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint256 _token_amount,\\n        uint8 i,\\n        uint256 _min_amount,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 token = IERC20(getLpToken(pool));\\n        IERC20 baseToken = IERC20(getLpToken(basePool));\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        token.transferFrom(msg.sender, address(this), _token_amount);\\n        token.approve(address(pool), _token_amount);\\n        pool.removeLiquidityOneToken(_token_amount, baseTokenIndex, 0, deadline);\\n        uint _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.approve(address(basePool), _base_amount);\\n        basePool.removeLiquidityOneToken(_base_amount, i, _min_amount, deadline);\\n        IERC20 coin = basePool.getToken(i);\\n        uint coin_amount = coin.balanceOf(address(this));\\n        coin.safeTransfer(msg.sender, coin_amount);\\n        return coin_amount;\\n    }\\n\\n    function calculateRemoveBaseLiquidityOneToken(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint256 _token_amount,\\n        uint8 iBase\\n    ) external view returns (uint256 availableTokenAmount) {\\n        IERC20 baseToken = IERC20(getLpToken(basePool));\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint _base_tokens = pool.calculateRemoveLiquidityOneToken(address(this), _token_amount, baseTokenIndex);\\n        availableTokenAmount = basePool.calculateRemoveLiquidityOneToken(address(this), _base_tokens, iBase);\\n    }\\n\\n    function calculateTokenAmount(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        bool is_deposit\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = IERC20(getLpToken(basePool));\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 _base_tokens = basePool.calculateTokenAmount(address(this), base_amounts, is_deposit);\\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n        return pool.calculateTokenAmount(address(this), meta_amounts, is_deposit);\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint256 amount\\n    ) external view returns (\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts\\n    ) {\\n        IERC20 baseToken = IERC20(getLpToken(basePool));\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\\n        meta_amounts[baseTokenIndex] = 0;\\n        base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\\n    }\\n\\n    function swapFromBase(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256)\\n    {\\n        IERC20 baseToken = IERC20(getLpToken(basePool));\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getTokenLength());\\n        base_amounts[tokenIndexFrom] = dx;\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        coin.safeIncreaseAllowance(address(basePool), dx);\\n        uint baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n        if (baseTokenIndex != tokenIndexTo) {\\n            baseToken.approve(address(pool), baseLpAmount);\\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, deadline);\\n        }\\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\\n        uint amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapFromBase(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = IERC20(getLpToken(basePool));\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getTokenLength());\\n        base_amounts[tokenIndexFrom] = dx;\\n        uint baseLpAmount = basePool.calculateTokenAmount(address(this), base_amounts, true);\\n        if (baseTokenIndex == tokenIndexTo) {\\n            return baseLpAmount;\\n        }\\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    }\\n\\n    function swapToBase(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256)\\n    {\\n        IERC20 baseToken = IERC20(getLpToken(basePool));\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        IERC20 coin = pool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            coin.safeIncreaseAllowance(address(pool), dx);\\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0, deadline);\\n        }\\n        baseToken.approve(address(basePool), tokenLPAmount);\\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n        uint amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n\\n    }\\n\\n    function calculateSwapToBase(\\n        ISwap pool,\\n        ISwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = IERC20(getLpToken(basePool));\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n        }\\n        return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\\n    }\\n}\",\"keccak256\":\"0xcd44aa68643e071db59ffec5c2ae7b30249bf9dae8142723effb8fd73150354d\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063643abb86116100815780638a311c571161005b5780638a311c57146106ee578063998cae4714610744578063ff9693221461079c576100d4565b8063643abb861461050d57806377269e2914610550578063797018211461069f576100d4565b80633214b8c9116100b25780633214b8c91461040857806338c789731461045e57806354681c41146104c0576100d4565b80630c8b2216146100d95780630d6307eb146101b557806324a5bf2114610319575b600080fd5b61011c600480360360608110156100ef57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356107fe565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610160578181015183820152602001610148565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561019f578181015183820152602001610187565b5050505090500194505050505060405180910390f35b610307600480360360c08110156101cb57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561020c57600080fd5b82018360208201111561021e57600080fd5b8035906020019184602083028401116401000000008311171561024057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561029057600080fd5b8201836020820111156102a257600080fd5b803590602001918460208302840111640100000000831117156102c457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610ba1565b60408051918252519081900360200190f35b61011c600480360360c081101561032f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116916040820135919081019060808101606082013564010000000081111561037757600080fd5b82018360208201111561038957600080fd5b803590602001918460208302840111640100000000831117156103ab57600080fd5b9193909290916020810190356401000000008111156103c957600080fd5b8201836020820111156103db57600080fd5b803590602001918460208302840111640100000000831117156103fd57600080fd5b9193509150356113f6565b610307600480360360a081101561041e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060ff604082013581169160608101359091169060800135611f24565b610307600480360360e081101561047457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060ff604082013581169160608101359091169060808101359060a08101359060c0013561213b565b610307600480360360808110156104d657600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff908116916020810135909116906040810135906060013560ff16612728565b6103076004803603606081101561052357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135612931565b610307600480360360a081101561056657600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116918101906060810160408201356401000000008111156105a757600080fd5b8201836020820111156105b957600080fd5b803590602001918460208302840111640100000000831117156105db57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561062b57600080fd5b82018360208201111561063d57600080fd5b8035906020019184602083028401116401000000008311171561065f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050503515159050612db6565b610307600480360360a08110156106b557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040810135906060810135906080013561303a565b610307600480360360a081101561070457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060ff604082013581169160608101359091169060800135613aa2565b610307600480360360c081101561075a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060ff6060820135169060808101359060a00135613df5565b610307600480360360e08110156107b257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060ff604082013581169160608101359091169060808101359060a08101359060c00135614411565b606080600061080c85614911565b905060008673ffffffffffffffffffffffffffffffffffffffff166366c0bd24836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561087757600080fd5b505afa15801561088b573d6000803e3d6000fd5b505050506040513d60208110156108a157600080fd5b5051604080517f7c61e56100000000000000000000000000000000000000000000000000000000815230600482015260248101889052905191925073ffffffffffffffffffffffffffffffffffffffff891691637c61e56191604480820192600092909190829003018186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561097557600080fd5b810190808051604051939291908464010000000082111561099557600080fd5b9083019060208201858111156109aa57600080fd5b82518660208202830111640100000000821117156109c757600080fd5b82525081516020918201928201910280838360005b838110156109f45781810151838201526020016109dc565b5050505090500160405250505093506000848260ff1681518110610a1457fe5b602002602001015190506000858360ff1681518110610a2f57fe5b6020908102919091010152604080517f7c61e56100000000000000000000000000000000000000000000000000000000815230600482015260248101839052905173ffffffffffffffffffffffffffffffffffffffff891691637c61e561916044808301926000929190829003018186803b158015610aad57600080fd5b505afa158015610ac1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015610b0857600080fd5b8101908080516040519392919084640100000000821115610b2857600080fd5b908301906020820185811115610b3d57600080fd5b8251866020820283011164010000000082111715610b5a57600080fd5b82525081516020918201928201910280838360005b83811015610b87578181015183820152602001610b6f565b505050509050016040525050509350505050935093915050565b600080610bad88614911565b90508673ffffffffffffffffffffffffffffffffffffffff16632f71b9126040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf557600080fd5b505afa158015610c09573d6000803e3d6000fd5b505050506040513d6020811015610c1f57600080fd5b5051855114610c8f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c6964206261736520746f6b656e206c656e67746800000000000000604482015290519081900360640190fd5b8773ffffffffffffffffffffffffffffffffffffffff16632f71b9126040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd557600080fd5b505afa158015610ce9573d6000803e3d6000fd5b505050506040513d6020811015610cff57600080fd5b5051865114610d6f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c6964206d65746120746f6b656e206c656e67746800000000000000604482015290519081900360640190fd5b6000805b86518160ff161015610f2d576000878260ff1681518110610d9057fe5b602002602001015190506000811115610f24576001925060008a73ffffffffffffffffffffffffffffffffffffffff166382b86600846040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015610dfd57600080fd5b505afa158015610e11573d6000803e3d6000fd5b505050506040513d6020811015610e2757600080fd5b50519050610e4d73ffffffffffffffffffffffffffffffffffffffff8216333085614990565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d6020811015610ee057600080fd5b50519050610f0573ffffffffffffffffffffffffffffffffffffffff83168d83614a2b565b808a8560ff1681518110610f1557fe5b60200260200101818152505050505b50600101610d73565b508015611003578773ffffffffffffffffffffffffffffffffffffffff16634d49e87d876000876040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610faf578181015183820152602001610f97565b50505050905001945050505050602060405180830381600087803b158015610fd657600080fd5b505af1158015610fea573d6000803e3d6000fd5b505050506040513d602081101561100057600080fd5b50505b60005b87518160ff1610156111d95760008a73ffffffffffffffffffffffffffffffffffffffff166382b86600836040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b15801561106857600080fd5b505afa15801561107c573d6000803e3d6000fd5b505050506040513d602081101561109257600080fd5b505189519091506000908a9060ff85169081106110ab57fe5b602002602001015111156110fc576110fc33308b8560ff16815181106110cd57fe5b60200260200101518473ffffffffffffffffffffffffffffffffffffffff16614990909392919063ffffffff16565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561116557600080fd5b505afa158015611179573d6000803e3d6000fd5b505050506040513d602081101561118f57600080fd5b505190506111b473ffffffffffffffffffffffffffffffffffffffff83168d83614a2b565b808a8460ff16815181106111c457fe5b60209081029190910101525050600101611006565b508873ffffffffffffffffffffffffffffffffffffffff16634d49e87d8887876040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561125457818101518382015260200161123c565b50505050905001945050505050602060405180830381600087803b15801561127b57600080fd5b505af115801561128f573d6000803e3d6000fd5b505050506040513d60208110156112a557600080fd5b5050604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff8516916370a0823191602480820192602092909190829003018186803b15801561131757600080fd5b505afa15801561132b573d6000803e3d6000fd5b505050506040513d602081101561134157600080fd5b5051604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101839052905191925073ffffffffffffffffffffffffffffffffffffffff85169163a9059cbb916044808201926020929091908290030181600087803b1580156113bc57600080fd5b505af11580156113d0573d6000803e3d6000fd5b505050506040513d60208110156113e657600080fd5b50909a9950505050505050505050565b60608060006114048b614911565b905060006114118b614911565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018d9052905191925073ffffffffffffffffffffffffffffffffffffffff8416916323b872dd916064808201926020929091908290030181600087803b15801561149057600080fd5b505af11580156114a4573d6000803e3d6000fd5b505050506040513d60208110156114ba57600080fd5b5050604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e81166004830152602482018d905291519184169163095ea7b3916044808201926020929091908290030181600087803b15801561153557600080fd5b505af1158015611549573d6000803e3d6000fd5b505050506040513d602081101561155f57600080fd5b50506040517f31cd52b0000000000000000000000000000000000000000000000000000000008152600481018b815260448201879052606060248301908152606483018b905273ffffffffffffffffffffffffffffffffffffffff8f16926331cd52b0928e928e928e928c929091608401856020860280828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561161157600080fd5b505af1158015611625573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561166c57600080fd5b810190808051604051939291908464010000000082111561168c57600080fd5b9083019060208201858111156116a157600080fd5b82518660208202830111640100000000821117156116be57600080fd5b82525081516020918201928201910280838360005b838110156116eb5781810151838201526020016116d3565b505050509050016040525050505060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d602081101561178c57600080fd5b5051604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8f811660048301526024820184905291519293509084169163095ea7b3916044808201926020929091908290030181600087803b15801561180a57600080fd5b505af115801561181e573d6000803e3d6000fd5b505050506040513d602081101561183457600080fd5b50506040517f31cd52b00000000000000000000000000000000000000000000000000000000081526004810182815260448201889052606060248301908152606483018a905273ffffffffffffffffffffffffffffffffffffffff8f16926331cd52b09285928d928d928d929091608401856020860280828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561194157600080fd5b810190808051604051939291908464010000000082111561196157600080fd5b90830190602082018581111561197657600080fd5b825186602082028301116401000000008211171561199357600080fd5b82525081516020918201928201910280838360005b838110156119c05781810151838201526020016119a8565b50505050905001604052505050508c73ffffffffffffffffffffffffffffffffffffffff16632f71b9126040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1457600080fd5b505afa158015611a28573d6000803e3d6000fd5b505050506040513d6020811015611a3e57600080fd5b505167ffffffffffffffff81118015611a5657600080fd5b50604051908082528060200260200182016040528015611a80578160200160208202803683370190505b50945060005b8d73ffffffffffffffffffffffffffffffffffffffff16632f71b9126040518163ffffffff1660e01b815260040160206040518083038186803b158015611acc57600080fd5b505afa158015611ae0573d6000803e3d6000fd5b505050506040513d6020811015611af657600080fd5b505160ff82161015611c875760008e73ffffffffffffffffffffffffffffffffffffffff166382b86600836040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015611b5857600080fd5b505afa158015611b6c573d6000803e3d6000fd5b505050506040513d6020811015611b8257600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015611bf457600080fd5b505afa158015611c08573d6000803e3d6000fd5b505050506040513d6020811015611c1e57600080fd5b50518751889060ff8516908110611c3157fe5b602002602001018181525050611c7e33888460ff1681518110611c5057fe5b60200260200101518373ffffffffffffffffffffffffffffffffffffffff16614bbe9092919063ffffffff16565b50600101611a86565b508b73ffffffffffffffffffffffffffffffffffffffff16632f71b9126040518163ffffffff1660e01b815260040160206040518083038186803b158015611cce57600080fd5b505afa158015611ce2573d6000803e3d6000fd5b505050506040513d6020811015611cf857600080fd5b505167ffffffffffffffff81118015611d1057600080fd5b50604051908082528060200260200182016040528015611d3a578160200160208202803683370190505b50935060005b8c73ffffffffffffffffffffffffffffffffffffffff16632f71b9126040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d6020811015611db057600080fd5b505160ff82161015611f135760008d73ffffffffffffffffffffffffffffffffffffffff166382b86600836040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015611e1257600080fd5b505afa158015611e26573d6000803e3d6000fd5b505050506040513d6020811015611e3c57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015611eae57600080fd5b505afa158015611ec2573d6000803e3d6000fd5b505050506040513d6020811015611ed857600080fd5b50518651879060ff8516908110611eeb57fe5b602002602001018181525050611f0a33878460ff1681518110611c5057fe5b50600101611d40565b505050509850989650505050505050565b600080611f3086614911565b905060008773ffffffffffffffffffffffffffffffffffffffff166366c0bd24836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611f9b57600080fd5b505afa158015611faf573d6000803e3d6000fd5b505050506040513d6020811015611fc557600080fd5b505190508360ff8083169088161461208457604080517fa95b089f00000000000000000000000000000000000000000000000000000000815260ff808a1660048301528416602482015260448101879052905173ffffffffffffffffffffffffffffffffffffffff8b169163a95b089f916064808301926020929190829003018186803b15801561205557600080fd5b505afa158015612069573d6000803e3d6000fd5b505050506040513d602081101561207f57600080fd5b505190505b604080517f98899f400000000000000000000000000000000000000000000000000000000081523060048201526024810183905260ff88166044820152905173ffffffffffffffffffffffffffffffffffffffff8a16916398899f40916064808301926020929190829003018186803b15801561210057600080fd5b505afa158015612114573d6000803e3d6000fd5b505050506040513d602081101561212a57600080fd5b505193505050505b95945050505050565b60008061214788614911565b905060008973ffffffffffffffffffffffffffffffffffffffff166366c0bd24836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156121b257600080fd5b505afa1580156121c6573d6000803e3d6000fd5b505050506040513d60208110156121dc57600080fd5b5051604080517f2f71b912000000000000000000000000000000000000000000000000000000008152905191925060609173ffffffffffffffffffffffffffffffffffffffff8c1691632f71b912916004808301926020929190829003018186803b15801561224a57600080fd5b505afa15801561225e573d6000803e3d6000fd5b505050506040513d602081101561227457600080fd5b505167ffffffffffffffff8111801561228c57600080fd5b506040519080825280602002602001820160405280156122b6578160200160208202803683370190505b50905086818a60ff16815181106122c957fe5b60200260200101818152505060008a73ffffffffffffffffffffffffffffffffffffffff166382b866008b6040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b15801561232b57600080fd5b505afa15801561233f573d6000803e3d6000fd5b505050506040513d602081101561235557600080fd5b5051905061237b73ffffffffffffffffffffffffffffffffffffffff821633308b614990565b61239c73ffffffffffffffffffffffffffffffffffffffff82168c8a614c4b565b60008b73ffffffffffffffffffffffffffffffffffffffff16634d49e87d8460008a6040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612419578181015183820152602001612401565b50505050905001945050505050602060405180830381600087803b15801561244057600080fd5b505af1158015612454573d6000803e3d6000fd5b505050506040513d602081101561246a57600080fd5b5051905060ff848116908b16146125d3578473ffffffffffffffffffffffffffffffffffffffff1663095ea7b38e836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156124ec57600080fd5b505af1158015612500573d6000803e3d6000fd5b505050506040513d602081101561251657600080fd5b5050604080517f9169558600000000000000000000000000000000000000000000000000000000815260ff80871660048301528c16602482015260448101839052606481018a905260848101899052905173ffffffffffffffffffffffffffffffffffffffff8f169163916955869160a48083019260209291908290030181600087803b1580156125a657600080fd5b505af11580156125ba573d6000803e3d6000fd5b505050506040513d60208110156125d057600080fd5b50505b60008d73ffffffffffffffffffffffffffffffffffffffff166382b866008c6040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b15801561262957600080fd5b505afa15801561263d573d6000803e3d6000fd5b505050506040513d602081101561265357600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b1580156126c757600080fd5b505afa1580156126db573d6000803e3d6000fd5b505050506040513d60208110156126f157600080fd5b5051905061271673ffffffffffffffffffffffffffffffffffffffff83163383614bbe565b9e9d5050505050505050505050505050565b60008061273485614911565b905060008673ffffffffffffffffffffffffffffffffffffffff166366c0bd24836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561279f57600080fd5b505afa1580156127b3573d6000803e3d6000fd5b505050506040513d60208110156127c957600080fd5b5051604080517f98899f400000000000000000000000000000000000000000000000000000000081523060048201526024810188905260ff83166044820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8a16916398899f40916064808301926020929190829003018186803b15801561284d57600080fd5b505afa158015612861573d6000803e3d6000fd5b505050506040513d602081101561287757600080fd5b5051604080517f98899f400000000000000000000000000000000000000000000000000000000081523060048201526024810183905260ff88166044820152905191925073ffffffffffffffffffffffffffffffffffffffff8916916398899f4091606480820192602092909190829003018186803b1580156128f957600080fd5b505afa15801561290d573d6000803e3d6000fd5b505050506040513d602081101561292357600080fd5b505198975050505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff16632f71b9126040518163ffffffff1660e01b815260040160206040518083038186803b15801561297a57600080fd5b505afa15801561298e573d6000803e3d6000fd5b505050506040513d60208110156129a457600080fd5b5051604080517f7c61e56100000000000000000000000000000000000000000000000000000000815230600482015260248101869052905191925060609173ffffffffffffffffffffffffffffffffffffffff881691637c61e561916044808301926000929190829003018186803b158015612a1f57600080fd5b505afa158015612a33573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015612a7a57600080fd5b8101908080516040519392919084640100000000821115612a9a57600080fd5b908301906020820185811115612aaf57600080fd5b8251866020820283011164010000000082111715612acc57600080fd5b82525081516020918201928201910280838360005b83811015612af9578181015183820152602001612ae1565b50505050905001604052505050905060608267ffffffffffffffff81118015612b2157600080fd5b50604051908082528060200260200182016040528015612b4b578160200160208202803683370190505b50905060005b838160ff161015612cbf5760008873ffffffffffffffffffffffffffffffffffffffff166382b86600836040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015612bb257600080fd5b505afa158015612bc6573d6000803e3d6000fd5b505050506040513d6020811015612bdc57600080fd5b5051604080517f66c0bd2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301529151929350600092918b16916366c0bd2491602480820192602092909190829003018186803b158015612c5457600080fd5b505afa158015612c68573d6000803e3d6000fd5b505050506040513d6020811015612c7e57600080fd5b5051855160ff918216925086918516908110612c9657fe5b6020026020010151848281518110612caa57fe5b60209081029190910101525050600101612b51565b506040517ff9273ffb000000000000000000000000000000000000000000000000000000008152306004820181815260016044840181905260606024850190815285516064860152855173ffffffffffffffffffffffffffffffffffffffff8c169563f9273ffb959488949390929091608401906020808701910280838360005b83811015612d58578181015183820152602001612d40565b5050505090500194505050505060206040518083038186803b158015612d7d57600080fd5b505afa158015612d91573d6000803e3d6000fd5b505050506040513d6020811015612da757600080fd5b505193505050505b9392505050565b600080612dc286614911565b905060008773ffffffffffffffffffffffffffffffffffffffff166366c0bd24836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612e2d57600080fd5b505afa158015612e41573d6000803e3d6000fd5b505050506040513d6020811015612e5757600080fd5b50516040517ff9273ffb0000000000000000000000000000000000000000000000000000000081523060048201818152871515604484015260606024840190815289516064850152895194955060009473ffffffffffffffffffffffffffffffffffffffff8d169463f9273ffb94938c938c9391929091608490910190602086810191028083838d5b83811015612ef8578181015183820152602001612ee0565b5050505090500194505050505060206040518083038186803b158015612f1d57600080fd5b505afa158015612f31573d6000803e3d6000fd5b505050506040513d6020811015612f4757600080fd5b505187519091508190889060ff8516908110612f5f57fe5b602002602001015101878360ff1681518110612f7757fe5b6020026020010181815250508873ffffffffffffffffffffffffffffffffffffffff1663f9273ffb3089886040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff168152602001806020018315158152602001828103825284818151815260200191508051906020019060200280838360005b83811015613015578181015183820152602001612ffd565b5050505090500194505050505060206040518083038186803b15801561210057600080fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16632f71b9126040518163ffffffff1660e01b815260040160206040518083038186803b15801561308357600080fd5b505afa158015613097573d6000803e3d6000fd5b505050506040513d60208110156130ad57600080fd5b5051604080517f2f71b912000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff891691632f71b912916004808301926020929190829003018186803b15801561311b57600080fd5b505afa15801561312f573d6000803e3d6000fd5b505050506040513d602081101561314557600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff88811690881614156131d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f66726f6d506f6f6c203d20746f506f6f6c000000000000000000000000000000604482015290519081900360640190fd5b80821461323f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420746f6b656e206c656e677468000000000000000000000000604482015290519081900360640190fd5b600061324a89614911565b9050600061325789614911565b905060608467ffffffffffffffff8111801561327257600080fd5b5060405190808252806020026020018201604052801561329c578160200160208202803683370190505b50905060005b858160ff1610156133d75760008c73ffffffffffffffffffffffffffffffffffffffff166382b86600836040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b15801561330357600080fd5b505afa158015613317573d6000803e3d6000fd5b505050506040513d602081101561332d57600080fd5b5051604080517f66c0bd2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301529151929350908e16916366c0bd2491602480820192602092909190829003018186803b1580156133a257600080fd5b505afa1580156133b6573d6000803e3d6000fd5b505050506040513d60208110156133cc57600080fd5b5050506001016132a2565b50604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018b9052905173ffffffffffffffffffffffffffffffffffffffff8516916323b872dd9160648083019260209291908290030181600087803b15801561345357600080fd5b505af1158015613467573d6000803e3d6000fd5b505050506040513d602081101561347d57600080fd5b5050604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d81166004830152602482018c905291519185169163095ea7b3916044808201926020929091908290030181600087803b1580156134f857600080fd5b505af115801561350c573d6000803e3d6000fd5b505050506040513d602081101561352257600080fd5b50506040517f31cd52b0000000000000000000000000000000000000000000000000000000008152600481018a81526044820189905260606024830190815283516064840152835173ffffffffffffffffffffffffffffffffffffffff8f16936331cd52b0938e9387938e93608401906020868101910280838360005b838110156135b757818101518382015260200161359f565b50505050905001945050505050600060405180830381600087803b1580156135de57600080fd5b505af11580156135f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561363957600080fd5b810190808051604051939291908464010000000082111561365957600080fd5b90830190602082018581111561366e57600080fd5b825186602082028301116401000000008211171561368b57600080fd5b82525081516020918201928201910280838360005b838110156136b85781810151838201526020016136a0565b505050509050016040525050505060608467ffffffffffffffff811180156136df57600080fd5b50604051908082528060200260200182016040528015613709578160200160208202803683370190505b50905060005b858160ff1610156138825760008c73ffffffffffffffffffffffffffffffffffffffff166382b86600836040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b15801561377057600080fd5b505afa158015613784573d6000803e3d6000fd5b505050506040513d602081101561379a57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b15801561380e57600080fd5b505afa158015613822573d6000803e3d6000fd5b505050506040513d602081101561383857600080fd5b5051905061385d73ffffffffffffffffffffffffffffffffffffffff83168f83614a2b565b80848460ff168151811061386d57fe5b6020908102919091010152505060010161370f565b508a73ffffffffffffffffffffffffffffffffffffffff16634d49e87d828b8b6040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156138fd5781810151838201526020016138e5565b50505050905001945050505050602060405180830381600087803b15801561392457600080fd5b505af1158015613938573d6000803e3d6000fd5b505050506040513d602081101561394e57600080fd5b5050604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b1580156139c057600080fd5b505afa1580156139d4573d6000803e3d6000fd5b505050506040513d60208110156139ea57600080fd5b5051604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101839052905191925073ffffffffffffffffffffffffffffffffffffffff86169163a9059cbb916044808201926020929091908290030181600087803b158015613a6557600080fd5b505af1158015613a79573d6000803e3d6000fd5b505050506040513d6020811015613a8f57600080fd5b50909d9c50505050505050505050505050565b600080613aae86614911565b905060008773ffffffffffffffffffffffffffffffffffffffff166366c0bd24836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613b1957600080fd5b505afa158015613b2d573d6000803e3d6000fd5b505050506040513d6020811015613b4357600080fd5b5051604080517f2f71b912000000000000000000000000000000000000000000000000000000008152905191925060609173ffffffffffffffffffffffffffffffffffffffff8a1691632f71b912916004808301926020929190829003018186803b158015613bb157600080fd5b505afa158015613bc5573d6000803e3d6000fd5b505050506040513d6020811015613bdb57600080fd5b505167ffffffffffffffff81118015613bf357600080fd5b50604051908082528060200260200182016040528015613c1d578160200160208202803683370190505b50905084818860ff1681518110613c3057fe5b60200260200101818152505060008873ffffffffffffffffffffffffffffffffffffffff1663f9273ffb308460016040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff168152602001806020018315158152602001828103825284818151815260200191508051906020019060200280838360005b83811015613cd1578181015183820152602001613cb9565b5050505090500194505050505060206040518083038186803b158015613cf657600080fd5b505afa158015613d0a573d6000803e3d6000fd5b505050506040513d6020811015613d2057600080fd5b5051905060ff8381169088161415613d3d57935061213292505050565b604080517fa95b089f00000000000000000000000000000000000000000000000000000000815260ff80861660048301528916602482015260448101839052905173ffffffffffffffffffffffffffffffffffffffff8c169163a95b089f916064808301926020929190829003018186803b158015613dbb57600080fd5b505afa158015613dcf573d6000803e3d6000fd5b505050506040513d6020811015613de557600080fd5b50519a9950505050505050505050565b600080613e0188614911565b90506000613e0e88614911565b905060008973ffffffffffffffffffffffffffffffffffffffff166366c0bd24836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613e7957600080fd5b505afa158015613e8d573d6000803e3d6000fd5b505050506040513d6020811015613ea357600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018b9052905191925073ffffffffffffffffffffffffffffffffffffffff8516916323b872dd916064808201926020929091908290030181600087803b158015613f2457600080fd5b505af1158015613f38573d6000803e3d6000fd5b505050506040513d6020811015613f4e57600080fd5b5050604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152602482018b905291519185169163095ea7b3916044808201926020929091908290030181600087803b158015613fc957600080fd5b505af1158015613fdd573d6000803e3d6000fd5b505050506040513d6020811015613ff357600080fd5b5050604080517f3e3a1560000000000000000000000000000000000000000000000000000000008152600481018a905260ff8316602482015260006044820181905260648201889052915173ffffffffffffffffffffffffffffffffffffffff8d1692633e3a156092608480820193602093909283900390910190829087803b15801561407f57600080fd5b505af1158015614093573d6000803e3d6000fd5b505050506040513d60208110156140a957600080fd5b5050604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff8516916370a0823191602480820192602092909190829003018186803b15801561411b57600080fd5b505afa15801561412f573d6000803e3d6000fd5b505050506040513d602081101561414557600080fd5b5051604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d811660048301526024820184905291519293509085169163095ea7b3916044808201926020929091908290030181600087803b1580156141c357600080fd5b505af11580156141d7573d6000803e3d6000fd5b505050506040513d60208110156141ed57600080fd5b5050604080517f3e3a15600000000000000000000000000000000000000000000000000000000081526004810183905260ff8a1660248201526044810189905260648101889052905173ffffffffffffffffffffffffffffffffffffffff8c1691633e3a15609160848083019260209291908290030181600087803b15801561427557600080fd5b505af1158015614289573d6000803e3d6000fd5b505050506040513d602081101561429f57600080fd5b5050604080517f82b8660000000000000000000000000000000000000000000000000000000000815260ff8a166004820152905160009173ffffffffffffffffffffffffffffffffffffffff8d16916382b8660091602480820192602092909190829003018186803b15801561431457600080fd5b505afa158015614328573d6000803e3d6000fd5b505050506040513d602081101561433e57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b1580156143b257600080fd5b505afa1580156143c6573d6000803e3d6000fd5b505050506040513d60208110156143dc57600080fd5b5051905061440173ffffffffffffffffffffffffffffffffffffffff83163383614bbe565b9c9b505050505050505050505050565b60008061441d88614911565b905060008973ffffffffffffffffffffffffffffffffffffffff166366c0bd24836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561448857600080fd5b505afa15801561449c573d6000803e3d6000fd5b505050506040513d60208110156144b257600080fd5b5051604080517f82b8660000000000000000000000000000000000000000000000000000000000815260ff8b166004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8d16916382b86600916024808301926020929190829003018186803b15801561452957600080fd5b505afa15801561453d573d6000803e3d6000fd5b505050506040513d602081101561455357600080fd5b5051905061457973ffffffffffffffffffffffffffffffffffffffff821633308a614990565b8660ff838116908b1614614651576145a873ffffffffffffffffffffffffffffffffffffffff83168d8a614c4b565b8b73ffffffffffffffffffffffffffffffffffffffff1663916955868b858b60008b6040518663ffffffff1660e01b8152600401808660ff1681526020018560ff16815260200184815260200183815260200182815260200195505050505050602060405180830381600087803b15801561462257600080fd5b505af1158015614636573d6000803e3d6000fd5b505050506040513d602081101561464c57600080fd5b505190505b8373ffffffffffffffffffffffffffffffffffffffff1663095ea7b38c836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156146c257600080fd5b505af11580156146d6573d6000803e3d6000fd5b505050506040513d60208110156146ec57600080fd5b5050604080517f3e3a15600000000000000000000000000000000000000000000000000000000081526004810183905260ff8b1660248201526044810189905260648101889052905173ffffffffffffffffffffffffffffffffffffffff8d1691633e3a15609160848083019260209291908290030181600087803b15801561477457600080fd5b505af1158015614788573d6000803e3d6000fd5b505050506040513d602081101561479e57600080fd5b5050604080517f82b8660000000000000000000000000000000000000000000000000000000000815260ff8b166004820152905160009173ffffffffffffffffffffffffffffffffffffffff8e16916382b8660091602480820192602092909190829003018186803b15801561481357600080fd5b505afa158015614827573d6000803e3d6000fd5b505050506040513d602081101561483d57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b1580156148b157600080fd5b505afa1580156148c5573d6000803e3d6000fd5b505050506040513d60208110156148db57600080fd5b5051905061490073ffffffffffffffffffffffffffffffffffffffff83163383614bbe565b9d9c50505050505050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff16635fd65f0f6040518163ffffffff1660e01b81526004016101006040518083038186803b15801561495a57600080fd5b505afa15801561496e573d6000803e3d6000fd5b505050506040513d61010081101561498557600080fd5b5060e0015192915050565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052614a25908590614d94565b50505050565b801580614ad75750604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015614aa957600080fd5b505afa158015614abd573d6000803e3d6000fd5b505050506040513d6020811015614ad357600080fd5b5051155b614b2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806151c76036913960400191505060405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052614bb9908490614d94565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052614bb9908490614d94565b6000614d08828573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015614cd657600080fd5b505afa158015614cea573d6000803e3d6000fd5b505050506040513d6020811015614d0057600080fd5b505190614e6c565b6040805173ffffffffffffffffffffffffffffffffffffffff8616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052909150614a259085905b6060614df6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16614ee09092919063ffffffff16565b805190915015614bb957808060200190516020811015614e1557600080fd5b5051614bb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061519d602a913960400191505060405180910390fd5b600082820183811015612daf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6060614eef8484600085614ef7565b949350505050565b606082471015614f52576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806151776026913960400191505060405180910390fd5b614f5b856150b2565b614fc657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061503057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614ff3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615092576040519150601f19603f3d011682016040523d82523d6000602084013e615097565b606091505b50915091506150a78282866150b8565b979650505050505050565b3b151590565b606083156150c7575081612daf565b8251156150d75782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561513b578181015183820152602001615123565b50505050905090810190601f1680156151685780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220e713059556275680e616c3367eff7a8cf7645bdc5d1d304a1504c7055457bb0464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}