{
  "address": "0xa3DD483d6955Ca2f3A8172be5a1bF64eA414d6Bf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "_uniRouter",
          "type": "address"
        },
        {
          "internalType": "contract IFireBirdRouter",
          "name": "_fireBirdRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtLp",
          "type": "uint256"
        }
      ],
      "name": "ZapIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtLp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtTo",
          "type": "uint256"
        }
      ],
      "name": "ZapOut",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addTokensResidual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireBirdFactory",
      "outputs": [
        {
          "internalType": "contract IFireBirdFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireBirdFormula",
      "outputs": [
        {
          "internalType": "contract IFireBirdFormula",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fireBirdPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireBirdRouter",
      "outputs": [
        {
          "internalType": "contract IFireBirdRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "getAmountBToZapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountBConverted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountASell",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        }
      ],
      "name": "getAmountToZapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOtherSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToConverted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToOrigin",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxResidual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_input",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_pair",
          "type": "address[]"
        }
      ],
      "name": "setFireBirdPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxResidual",
          "type": "uint256"
        }
      ],
      "name": "setMaxResidual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensResidual",
          "type": "address[]"
        }
      ],
      "name": "setTokensResidual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensResidual",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTokenB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minLp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transferResidual",
          "type": "bool"
        }
      ],
      "name": "zapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "transferResidual",
          "type": "bool"
        }
      ],
      "name": "zapInToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensRec",
          "type": "uint256"
        }
      ],
      "name": "zapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "zapOutToPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "zapOutToPairWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensRec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "zapOutWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb866e10a960c376434dd5afed9ac3526ac9a5da134306105ea716ade7a5938c7",
  "receipt": {
    "to": null,
    "from": "0x0FFaD0c8b6acB224999e41e8229D0De90f914832",
    "contractAddress": "0x43659Cd896e93620aEcC5e74A4e3b76F98ff3Dfc",
    "transactionIndex": 22,
    "gasUsed": "5488309",
    "logsBloom": "0x
    "blockHash": "0x66576a94dd9515891e51c797accf2e113eb29616a77e02f2461d8e38c7e82a34",
    "transactionHash": "0xb866e10a960c376434dd5afed9ac3526ac9a5da134306105ea716ade7a5938c7",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 15139521,
        "transactionHash": "0xb866e10a960c376434dd5afed9ac3526ac9a5da134306105ea716ade7a5938c7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000ffad0c8b6acb224999e41e8229d0de90f914832",
          "0x000000000000000000000000bdbd4347b082d9d6bdf2da4555a37ce52a2e2120"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000137f96845cd2000000000000000000000000000000000000000000000000000b44cf382c301a000000000000000000000000000000000000000000000000790d46db9b195071780000000000000000000000000000000000000000000000000b314fa1a7d348000000000000000000000000000000000000000000000000790d5a5b319dad4378",
        "logIndex": 75,
        "blockHash": "0x66576a94dd9515891e51c797accf2e113eb29616a77e02f2461d8e38c7e82a34"
      }
    ],
    "blockNumber": 15139521,
    "cumulativeGasUsed": "8345135",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff",
    "0x4BFBf7fCC9776CE8285B059fB77e7Bb2A5c5E365"
  ],
  "solcInputHash": "de4b5c98aaefeaf0642d1549f17f4799",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"contract IFireBirdRouter\",\"name\":\"_fireBirdRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtLp\",\"type\":\"uint256\"}],\"name\":\"ZapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtTo\",\"type\":\"uint256\"}],\"name\":\"ZapOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addTokensResidual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdFactory\",\"outputs\":[{\"internalType\":\"contract IFireBirdFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdFormula\",\"outputs\":[{\"internalType\":\"contract IFireBirdFormula\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fireBirdPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdRouter\",\"outputs\":[{\"internalType\":\"contract IFireBirdRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getAmountBToZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountASell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"getAmountToZapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOtherSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToOrigin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxResidual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pair\",\"type\":\"address[]\"}],\"name\":\"setFireBirdPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxResidual\",\"type\":\"uint256\"}],\"name\":\"setMaxResidual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensResidual\",\"type\":\"address[]\"}],\"name\":\"setTokensResidual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensResidual\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"}],\"name\":\"zapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"}],\"name\":\"zapInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zapOutToPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"zapOutToPairWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"zapOutWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FireBirdZap.sol\":\"FireBirdZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/FireBirdZap.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IFireBirdRouterLite.sol\\\";\\nimport \\\"./interfaces/IFireBirdFactory.sol\\\";\\nimport \\\"./interfaces/IFireBirdPair.sol\\\";\\nimport \\\"./interfaces/IFireBirdFormula.sol\\\";\\nimport './libraries/TransferHelper.sol';\\nimport \\\"./libraries/Babylonian.sol\\\";\\n\\ncontract FireBirdZap is ReentrancyGuard {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public governance;\\n    address public WBNB;\\n    address private constant BNB_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    IUniswapV2Router public uniRouter;\\n    IFireBirdRouter public fireBirdRouter;\\n    IFireBirdFactory public fireBirdFactory;\\n    IFireBirdFormula public fireBirdFormula;\\n\\n    mapping(address => mapping(address => address[])) public fireBirdPairs; // [input -> output] => fireBird pair\\n    uint public maxResidual = 100; // 1%, set 10000 to disable\\n    address[] public tokensResidual;\\n\\n    event ZapIn(address indexed sender, address from, uint256 amtFrom, address pool, uint256 amtLp);\\n    event ZapOut(address indexed sender, address pool, uint256 amtLp, address to, uint256 amtTo);\\n    event Withdraw(address indexed token, uint256 amount, address to);\\n\\n    receive() external payable {\\n        require(msg.sender != tx.origin, \\\"Zap: Do not send ETH directly\\\");\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"Zap: !governance\\\");\\n        _;\\n    }\\n\\n    constructor(IUniswapV2Router _uniRouter, IFireBirdRouter _fireBirdRouter) public {\\n        governance = msg.sender;\\n        uniRouter = _uniRouter;\\n        fireBirdRouter = _fireBirdRouter;\\n        fireBirdFactory = IFireBirdFactory(_fireBirdRouter.factory());\\n        fireBirdFormula = IFireBirdFormula(_fireBirdRouter.formula());\\n        WBNB = _fireBirdRouter.WETH();\\n    }\\n\\n    /* ========== External Functions ========== */\\n\\n    // _to: must be a pair lp\\n    // _from: must be in lp\\n    // _amounts: amount_from, _minTokenB, _minLp\\n    function zapInToken(address _from, uint[] calldata amounts, address _to, bool transferResidual) external nonReentrant returns (uint256 lpAmt) {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amounts[0]);\\n        _approveTokenIfNeeded(_from);\\n\\n        if (_from == IFireBirdPair(_to).token0() || _from == IFireBirdPair(_to).token1()) {\\n            // swap half amount for other\\n            address other;\\n            uint256 sellAmount;\\n            {\\n                address token0 = IFireBirdPair(_to).token0();\\n                address token1 = IFireBirdPair(_to).token1();\\n                other = _from == token0 ? token1 : token0;\\n                sellAmount = calculateSwapInAmount(_to, _from, amounts[0], token0);\\n            }\\n            uint otherAmount = _swap(_from, sellAmount, other, address(this), _to);\\n            require(otherAmount >= amounts[1], \\\"Zap: Insufficient Receive Amount\\\");\\n\\n            lpAmt = _pairDeposit(_to, _from, other, amounts[0].sub(sellAmount), otherAmount, msg.sender, fireBirdFactory.isPair(_to), transferResidual);\\n        } else {\\n            uint bnbAmount = _swapTokenForBNB(_from, amounts[0], address(this), address(0));\\n            lpAmt = _swapBNBToLp(IFireBirdPair(_to), bnbAmount, msg.sender, 0, transferResidual);\\n        }\\n\\n        require(lpAmt >= amounts[2], \\\"Zap: High Slippage In\\\");\\n        emit ZapIn(msg.sender, _from, amounts[0], _to, lpAmt);\\n        return lpAmt;\\n    }\\n\\n    // _to: must be a pair lp\\n    function zapIn(address _to, uint _minTokenB, uint _minLp, bool transferResidual) external payable nonReentrant returns (uint256) {\\n        uint256 lpAmt = _swapBNBToLp(IFireBirdPair(_to), msg.value, msg.sender, _minTokenB, transferResidual);\\n        require(lpAmt >= _minLp, \\\"Zap: High Slippage In\\\");\\n        emit ZapIn(msg.sender, WBNB, msg.value, _to, lpAmt);\\n        return lpAmt;\\n    }\\n\\n    // _from: must be a pair lp\\n    function zapOutToPair(address _from, uint amount) public nonReentrant returns (uint256 amountA, uint256 amountB) {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from);\\n\\n        IFireBirdPair pair = IFireBirdPair(_from);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n        bool isfireBirdPair = fireBirdFactory.isPair(_from);\\n\\n        if (token0 == WBNB || token1 == WBNB) {\\n            if (isfireBirdPair) {\\n                (amountA, amountB) = fireBirdRouter.removeLiquidityETH(_from, token0 != WBNB ? token0 : token1, amount, 1, 1, msg.sender, block.timestamp);\\n            } else {\\n                (amountA, amountB) = uniRouter.removeLiquidityETH(token0 != WBNB ? token0 : token1, amount, 1, 1, msg.sender, block.timestamp);\\n            }\\n        } else {\\n            if (isfireBirdPair) {\\n                (amountA, amountB) = fireBirdRouter.removeLiquidity(_from, token0, token1, amount, 1, 1, msg.sender, block.timestamp);\\n            } else {\\n                (amountA, amountB) = uniRouter.removeLiquidity(token0, token1, amount, 1, 1, msg.sender, block.timestamp);\\n            }\\n        }\\n    }\\n\\n    // _from: must be a pair lp\\n    // _toToken: must be in lp\\n    function zapOut(address _from, uint amount, address _toToken, uint256 _minTokensRec) public nonReentrant returns (uint256) {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from);\\n\\n        address token0;\\n        address token1;\\n        uint256 amountA;\\n        uint256 amountB;\\n        {\\n            IFireBirdPair pair = IFireBirdPair(_from);\\n            token0 = pair.token0();\\n            token1 = pair.token1();\\n            bool isfireBirdPair = fireBirdFactory.isPair(_from);\\n            if (isfireBirdPair) {\\n                (amountA, amountB) = fireBirdRouter.removeLiquidity(_from, token0, token1, amount, 1, 1, address(this), block.timestamp);\\n            } else {\\n                (amountA, amountB) = uniRouter.removeLiquidity(token0, token1, amount, 1, 1, address(this), block.timestamp);\\n            }\\n        }\\n\\n        uint256 tokenBought;\\n        _approveTokenIfNeeded(token0);\\n        _approveTokenIfNeeded(token1);\\n        if (_toToken == BNB_ADDRESS) {\\n            address _lpOfFromAndTo = WBNB == token0 || WBNB == token1 ? _from : address(0);\\n            tokenBought = _swapTokenForBNB(token0, amountA, address(this), _lpOfFromAndTo);\\n            tokenBought = tokenBought.add(_swapTokenForBNB(token1, amountB, address(this), _lpOfFromAndTo));\\n        } else {\\n            address _lpOfFromAndTo = _toToken == token0 || _toToken == token1 ? _from : address(0);\\n            tokenBought = _swap(token0, amountA, _toToken, address(this), _lpOfFromAndTo);\\n            tokenBought = tokenBought.add(_swap(token1, amountB, _toToken, address(this), _lpOfFromAndTo));\\n        }\\n\\n        require(tokenBought >= _minTokensRec, \\\"Zap: High Slippage Out\\\");\\n        if (_toToken == BNB_ADDRESS) {\\n            TransferHelper.safeTransferETH(msg.sender, tokenBought);\\n        } else {\\n            IERC20(_toToken).safeTransfer(msg.sender, tokenBought);\\n        }\\n\\n        emit ZapOut(msg.sender, _from, amount, _toToken, tokenBought);\\n        return tokenBought;\\n    }\\n\\n    function zapOutToPairWithPermit(\\n        address _from,\\n        uint256 _amount,\\n        uint256 _approvalAmount,\\n        uint256 _deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB) {\\n        // permit\\n        IFireBirdPair(_from).permit(\\n            msg.sender,\\n            address(this),\\n            _approvalAmount,\\n            _deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        (amountA, amountB) = zapOutToPair(_from, _amount);\\n    }\\n\\n    function zapOutWithPermit(\\n        address _from,\\n        uint256 amount,\\n        address _toToken,\\n        uint256 _minTokensRec,\\n        uint256 _approvalAmount,\\n        uint256 _deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256) {\\n        // permit\\n        IFireBirdPair(_from).permit(\\n            msg.sender,\\n            address(this),\\n            _approvalAmount,\\n            _deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return zapOut(_from, amount, _toToken, _minTokensRec);\\n    }\\n\\n    /* ========== View Functions ===========*/\\n    // _from: token A\\n    // return amount B that will be convert from A to perform zap in\\n    // return amount A that will be convert to B to perform zap in\\n    function getAmountBToZapIn(address _from, uint _fromAmount, address lp) external view returns (uint256 amountBConverted, uint256 amountASell) {\\n        address other;\\n        uint sellAmount;\\n        {\\n            IFireBirdPair pair = IFireBirdPair(lp);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            other = _from == token0 ? token1 : token0;\\n            sellAmount = calculateSwapInAmount(lp, _from, _fromAmount, token0);\\n        }\\n\\n        address[] memory path = new address[](1);\\n        path[0] = lp;\\n        uint[] memory amounts = fireBirdFormula.getFactoryAmountsOut(address(fireBirdFactory), _from, other, sellAmount, path);\\n        return (amounts[amounts.length - 1], sellAmount);\\n    }\\n\\n    // _from: lp pair\\n    // return amountOtherSell _otherToken that will be removed from pair\\n    // return amountToConverted _toToken that will be converted from other\\n    // return amountToOrigin _toToken that will be removed from pair\\n    function getAmountToZapOut(address _from, uint amount, address _toToken) external view\\n    returns (uint256 amountOtherSell, uint256 amountToConverted, uint256 amountToOrigin) {\\n        address other;\\n        {\\n            IFireBirdPair pair = IFireBirdPair(_from);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            other = _toToken == token0 ? token1 : token0;\\n        }\\n        uint sellAmount;\\n        uint amountToRemoved;\\n        {\\n            uint _totalSupply = IERC20(_from).totalSupply();\\n            sellAmount = amount.mul(IERC20(other).balanceOf(_from)) / _totalSupply;\\n            amountToRemoved = amount.mul(IERC20(_toToken).balanceOf(_from)) / _totalSupply;\\n        }\\n\\n        uint _amountOut = _getRemovedReserveAmountOut(_from, other, sellAmount, amountToRemoved);\\n        return (sellAmount, _amountOut, amountToRemoved);\\n    }\\n\\n    function calculateSwapInAmount(address pair, address tokenIn, uint256 userIn, address pairToken0) internal view returns (uint256) {\\n        (uint32 tokenWeight0, uint32 tokenWeight1,) = fireBirdFactory.getWeightsAndSwapFee(pair);\\n\\n        if (tokenWeight0 == 50) {\\n            (uint256 res0, uint256 res1,) = IFireBirdPair(pair).getReserves();\\n            uint reserveIn = tokenIn == pairToken0 ? res0 : res1;\\n            return Babylonian\\n            .sqrt(reserveIn.mul(userIn.mul(3988000) + reserveIn.mul(3988009)))\\n            .sub(reserveIn.mul(1997)) / 1994;\\n        } else {\\n            uint256 otherWeight = tokenIn == pairToken0 ? uint(tokenWeight1) : uint(tokenWeight0);\\n            return userIn.mul(otherWeight).div(100);\\n        }\\n    }\\n\\n    /* ========== Private Functions ========== */\\n    function _getRemovedReserveAmountOut(address pair, address tokenIn, uint sellAmount, uint amountToRemoved) internal view returns (uint) {\\n        (, uint reserveIn, uint reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) =\\n        fireBirdFormula.getFactoryReserveAndWeights(address(fireBirdFactory), pair, tokenIn);\\n        return fireBirdFormula.getAmountOut(sellAmount, reserveIn.sub(sellAmount), reserveOut.sub(amountToRemoved), tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    function _approveTokenIfNeeded(address token) private {\\n        if (IERC20(token).allowance(address(this), address(uniRouter)) == 0) {\\n            IERC20(token).safeApprove(address(uniRouter), uint(~0));\\n        }\\n        if (IERC20(token).allowance(address(this), address(fireBirdRouter)) == 0) {\\n            IERC20(token).safeApprove(address(fireBirdRouter), uint(~0));\\n        }\\n    }\\n\\n    function _pairDeposit(\\n        address _pair,\\n        address _poolToken0,\\n        address _poolToken1,\\n        uint256 token0Bought,\\n        uint256 token1Bought,\\n        address receiver,\\n        bool isfireBirdPair,\\n        bool transferResidual\\n    ) internal returns (uint256 lpAmt) {\\n        _approveTokenIfNeeded(_poolToken0);\\n        _approveTokenIfNeeded(_poolToken1);\\n\\n        uint256 amountA;\\n        uint256 amountB;\\n        if (isfireBirdPair) {\\n            (amountA, amountB, lpAmt) = fireBirdRouter.addLiquidity(_pair, _poolToken0, _poolToken1, token0Bought, token1Bought, 1, 1, receiver, block.timestamp);\\n        } else {\\n            (amountA, amountB, lpAmt) = uniRouter.addLiquidity(_poolToken0, _poolToken1, token0Bought, token1Bought, 1, 1, receiver, block.timestamp);\\n        }\\n\\n        uint amountAResidual = token0Bought.sub(amountA);\\n        if (transferResidual || amountAResidual > token0Bought.mul(maxResidual).div(10000)) {\\n            if (amountAResidual > 0) {\\n                //Returning Residue in token0, if any.\\n                _transferToken(_poolToken0, msg.sender, amountAResidual);\\n            }\\n        }\\n\\n        uint amountBRedisual = token1Bought.sub(amountB);\\n        if (transferResidual || amountBRedisual > token1Bought.mul(maxResidual).div(10000)) {\\n            if (amountBRedisual > 0) {\\n                //Returning Residue in token1, if any\\n                _transferToken(_poolToken1, msg.sender, amountBRedisual);\\n            }\\n        }\\n\\n        return lpAmt;\\n    }\\n\\n    function _swapBNBToLp(IFireBirdPair pair, uint amount, address receiver, uint _minTokenB, bool transferResidual) private returns (uint256 lpAmt) {\\n        address lp = address(pair);\\n\\n        // Lp\\n        if (pair.token0() == WBNB || pair.token1() == WBNB) {\\n            address token = pair.token0() == WBNB ? pair.token1() : pair.token0();\\n            uint swapValue;\\n            {\\n                (uint32 tokenWeight0, uint32 tokenWeight1,) = fireBirdFactory.getWeightsAndSwapFee(address(pair));\\n                uint tokenWeight = pair.token0() == WBNB ? uint(tokenWeight1) : uint(tokenWeight0);\\n                swapValue = amount.mul(tokenWeight).div(100);\\n            }\\n            uint tokenAmount = _swapBNBForToken(token, swapValue, address(this), lp);\\n            require(tokenAmount >= _minTokenB, \\\"Zap: Insufficient Receive Amount\\\");\\n\\n            uint256 wbnbAmount = amount.sub(swapValue);\\n            IWETH(WBNB).deposit{value : wbnbAmount}();\\n            lpAmt = _pairDeposit(lp, WBNB, token, wbnbAmount, tokenAmount, receiver, fireBirdFactory.isPair(lp), transferResidual);\\n        } else {\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            uint token0Amount;\\n            uint token1Amount;\\n            {\\n                (uint32 tokenWeight0,,) = fireBirdFactory.getWeightsAndSwapFee(lp);\\n                uint swap0Value = amount.mul(uint(tokenWeight0)).div(100);\\n                token0Amount = _swapBNBForToken(token0, swap0Value, address(this), address(0));\\n                token1Amount = _swapBNBForToken(token1, amount.sub(swap0Value), address(this), address(0));\\n            }\\n\\n            lpAmt = _pairDeposit(lp, token0, token1, token0Amount, token1Amount, receiver, fireBirdFactory.isPair(lp), transferResidual);\\n        }\\n    }\\n\\n    function _swapBNBForToken(address token, uint value, address _receiver, address lpBNBToken) private returns (uint) {\\n        if (token == WBNB) {\\n            IWETH(WBNB).deposit{value : value}();\\n            if (_receiver != address(this)) {\\n                IERC20(WBNB).safeTransfer(_receiver, value);\\n            }\\n            return value;\\n        }\\n        address[] memory path = fireBirdPairs[WBNB][token];\\n        uint[] memory amounts;\\n        if (path.length > 0) {\\n            amounts = fireBirdRouter.swapExactETHForTokens{value : value}(token, 1, path, _receiver, block.timestamp);\\n        } else if (lpBNBToken != address(0)) {\\n            path = new address[](1);\\n            path[0] = lpBNBToken;\\n            amounts = fireBirdRouter.swapExactETHForTokens{value : value}(token, 1, path, _receiver, block.timestamp);\\n        } else {\\n            revert(\\\"FireBirdZap: !path BNBToken\\\");\\n        }\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _swapTokenForBNB(address token, uint amount, address _receiver, address lpTokenBNB) private returns (uint) {\\n        if (token == WBNB) {\\n            _transferToken(WBNB, _receiver, amount);\\n            return amount;\\n        }\\n        address[] memory path = fireBirdPairs[token][WBNB];\\n        uint[] memory amounts;\\n        if (path.length > 0) {\\n            amounts = fireBirdRouter.swapExactTokensForETH(token, amount, 1, path, _receiver, block.timestamp);\\n        } else if (lpTokenBNB != address(0)) {\\n            path = new address[](1);\\n            path[0] = lpTokenBNB;\\n            amounts = fireBirdRouter.swapExactTokensForETH(token, amount, 1, path, _receiver, block.timestamp);\\n        } else {\\n            revert(\\\"FireBirdZap: !path TokenBNB\\\");\\n        }\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _swap(address _from, uint _amount, address _to, address _receiver, address _lpOfFromTo) internal returns (uint) {\\n        if (_from == _to) {\\n            if (_receiver != address(this)) {\\n                IERC20(_from).safeTransfer(_receiver, _amount);\\n            }\\n            return _amount;\\n        }\\n        address[] memory path = fireBirdPairs[_from][_to];\\n        uint[] memory amounts;\\n        if (path.length > 0) {// use fireBird\\n            amounts = fireBirdRouter.swapExactTokensForTokens(_from, _to, _amount, 1, path, _receiver, block.timestamp);\\n        } else if (_lpOfFromTo != address(0)) {\\n            path = new address[](1);\\n            path[0] = _lpOfFromTo;\\n            amounts = fireBirdRouter.swapExactTokensForTokens(_from, _to, _amount, 1, path, _receiver, block.timestamp);\\n        } else {\\n            revert(\\\"FireBirdZap: !path swap\\\");\\n        }\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _transferToken(address token, address to, uint amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (token == WBNB) {\\n            IWETH(WBNB).withdraw(amount);\\n            if (to != address(this)) {\\n                TransferHelper.safeTransferETH(to, amount);\\n            }\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n        return;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n    function withdraw(address to) external onlyGovernance {\\n        address[] memory _tokens = tokensResidual;\\n        withdrawToken(_tokens, to);\\n    }\\n\\n    function withdrawToken(address[] memory tokens, address to) public onlyGovernance {\\n        require(to != address(0), \\\"Zap: Invalid Receiver Address\\\");\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _withdraw(tokens[i], to);\\n        }\\n    }\\n\\n    function withdrawTokenAmount(address token, address to, uint256 amount) external onlyGovernance {\\n        require(to != address(0), \\\"Zap: Invalid Receiver Address\\\");\\n        IERC20(token).transfer(to, amount);\\n        emit Withdraw(token, amount, to);\\n    }\\n\\n    function _withdraw(address _token, address _to) internal {\\n        if (_token == address(0)) {\\n            TransferHelper.safeTransferETH(_to, address(this).balance);\\n            emit Withdraw(_token, address(this).balance, _to);\\n            return;\\n        }\\n\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).transfer(_to, _balance);\\n        emit Withdraw(_token, _balance, _to);\\n    }\\n\\n    function setTokensResidual(address[] memory _tokensResidual) external onlyGovernance {\\n        tokensResidual = _tokensResidual;\\n    }\\n\\n    function addTokensResidual(address _token) external onlyGovernance {\\n        tokensResidual.push(_token);\\n    }\\n\\n    function setGovernance(address _governance) external onlyGovernance {\\n        governance = _governance;\\n    }\\n\\n    function setFireBirdPairs(address _input, address _output, address [] memory _pair) external onlyGovernance {\\n        fireBirdPairs[_input][_output] = _pair;\\n    }\\n\\n    function setMaxResidual(uint _maxResidual) external onlyGovernance {\\n        maxResidual = _maxResidual;\\n    }\\n}\\n\",\"keccak256\":\"0x1334404719b6c19436b99590a51a59ef2eca92c9ded5fae02659356616b64c01\"},\"contracts/interfaces/IFireBirdFactory.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IFireBirdFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0xf877564655d8d582ea8cb43c2f1adbfa99175b60a0198ded0faffbe22fcd613f\"},\"contracts/interfaces/IFireBirdFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IFireBirdFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0xb25e0b384bada4a58243703a3d38e738dd58ea121c8cdc6b3e3fc6bd56a73b55\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IFireBirdPair.sol\":{\"content\":\"pragma solidity >=0.5.16;\\ninterface IFireBirdPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n    function getSwapFee() external view returns (uint32);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address, uint32, uint32) external;\\n}\\n\",\"keccak256\":\"0x770c213bb2620ee99eb32eb1140304457ca65653f5c4ce3b90d203a22f661015\"},\"contracts/interfaces/IFireBirdRouterLite.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\ninterface IFireBirdRouter {\\n    event Exchange(\\n        address pair,\\n        uint amountOut,\\n        address output\\n    );\\n    function factory() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(address tokenOut, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(address tokenIn, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(address tokenIn, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(address tokenOut, uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function createPair( address tokenA, address tokenB,uint amountA,uint amountB, uint32 tokenWeightA, uint32 swapFee, address to) external returns (uint liquidity);\\n    function createPairETH( address token, uint amountToken, uint32 tokenWeight, uint32 swapFee, address to) external payable returns (uint liquidity);\\n\\n    function removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n}\\n\",\"keccak256\":\"0xf9500d80a909d63c928977f819d1e696cc6f65f6eca2637d6cab91613dcbf980\"},\"contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x58e2fe2a56d9f254edd0980afc14b2430d0456b6dbbc5ef3efc802900d9fd23a\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee68d59a1c385a940a9e4fa1dc1e46fa3dd695168d0035cb8c879329cd13dd4e\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0xc47f6dffdb3d9b81be05c4ec7dec4a590677f255eaf2def29f1ec2c5144a7b44\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x771a09cfe236d26cfbfd1b048a0d68bd37710260efddfc9b175db51d8cd96b4f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061019a5760003560e01c8063521f2e09116100e15780638dd950021161008a578063ab033ea911610064578063ab033ea914610900578063b73a16f614610940578063e0243baa146109a7578063e5bc2920146109bc57610210565b80638dd9500214610882578063a0e47bf614610897578063a863ff2f146108ac57610210565b8063761c262e116100bb578063761c262e1461075e5780637b191ff2146107a55780637e2150fd1461086d57610210565b8063521f2e091461066a5780635aa6e6751461073457806360a13c521461074957610210565b80631ee11cde116101435780633c01ae6e1161011d5780633c01ae6e1461057c57806340564958146105bc57806351cff8d91461062a57610210565b80631ee11cde1461042c57806328e802ac1461050257806334d2365b1461055257610210565b806309342d951161017457806309342d951461039d57806312e22568146103ed57806314896f951461040257610210565b806303e2d7ff1461021557806304d21f061461028e578063082c6ed31461033e57610210565b36610210573332141561020e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5a61703a20446f206e6f742073656e6420455448206469726563746c79000000604482015290519081900360640190fd5b005b600080fd5b34801561022157600080fd5b506102656004803603606081101561023857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610a33565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561029a57600080fd5b5061020e600480360360208110156102b157600080fd5b8101906020810181356401000000008111156102cc57600080fd5b8201836020820111156102de57600080fd5b8035906020019184602083028401116401000000008311171561030057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610a82945050505050565b34801561034a57600080fd5b506103846004803603604081101561036157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610b1f565b6040805192835260208301919091528051918290030190f35b3480156103a957600080fd5b50610384600480360360608110156103c057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359160409091013516611166565b3480156103f957600080fd5b50610265611571565b34801561040e57600080fd5b506102656004803603602081101561042557600080fd5b503561158d565b34801561043857600080fd5b5061020e6004803603606081101561044f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561049057600080fd5b8201836020820111156104a257600080fd5b803590602001918460208302840111640100000000831117156104c457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506115c1945050505050565b34801561050e57600080fd5b5061020e6004803603606081101561052557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561168f565b34801561055e57600080fd5b5061020e6004803603602081101561057557600080fd5b503561188b565b34801561058857600080fd5b5061020e6004803603602081101561059f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611916565b3480156105c857600080fd5b5061060c600480360360608110156105df57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359160409091013516611a13565b60408051938452602084019290925282820152519081900360600190f35b34801561063657600080fd5b5061020e6004803603602081101561064d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611d1a565b34801561067657600080fd5b506107226004803603608081101561068d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156106c557600080fd5b8201836020820111156106d757600080fd5b803590602001918460208302840111640100000000831117156106f957600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611e16565b60408051918252519081900360200190f35b34801561074057600080fd5b50610265612421565b34801561075557600080fd5b5061026561243d565b6107226004803603608081101561077457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013590604081013590606001351515612459565b3480156107b157600080fd5b5061020e600480360360408110156107c857600080fd5b8101906020810181356401000000008111156107e357600080fd5b8201836020820111156107f557600080fd5b8035906020019184602083028401116401000000008311171561081757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050903573ffffffffffffffffffffffffffffffffffffffff1691506125c39050565b34801561087957600080fd5b50610265612701565b34801561088e57600080fd5b5061026561271d565b3480156108a357600080fd5b50610265612739565b3480156108b857600080fd5b50610722600480360360808110156108cf57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135169060600135612755565b34801561090c57600080fd5b5061020e6004803603602081101561092357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612e16565b34801561094c57600080fd5b50610384600480360360e081101561096357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060208101359060408101359060608101359060ff6080820135169060a08101359060c00135612ee3565b3480156109b357600080fd5b50610722612fb1565b3480156109c857600080fd5b5061072260048036036101208110156109e057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135169060608101359060808101359060a08101359060ff60c0820135169060e0810135906101000135612fb7565b60076020528260005260406000206020528160005260406000208181548110610a5857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b0857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604482015290519081900360640190fd5b8051610b1b906009906020840190615d92565b5050565b60008060026000541415610b9457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055610bbb73ffffffffffffffffffffffffffffffffffffffff8516333086613084565b610bc484613119565b600084905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1157600080fd5b505afa158015610c25573d6000803e3d6000fd5b505050506040513d6020811015610c3b57600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff85169163d21220a7916004808301926020929190829003018186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d6020811015610cd357600080fd5b5051600554604080517fe5e31b1300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301529151939450600093919092169163e5e31b13916024808301926020929190829003018186803b158015610d4e57600080fd5b505afa158015610d62573d6000803e3d6000fd5b505050506040513d6020811015610d7857600080fd5b505160025490915073ffffffffffffffffffffffffffffffffffffffff84811691161480610dc0575060025473ffffffffffffffffffffffffffffffffffffffff8381169116145b15610fd4578015610ed55760045460025473ffffffffffffffffffffffffffffffffffffffff9182169163b56b681d918b9187811691161415610e035784610e05565b855b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152919092166024820152604481018b905260016064820181905260848201523360a48201524260c4820152815160e480830193928290030181600087803b158015610e9857600080fd5b505af1158015610eac573d6000803e3d6000fd5b505050506040513d6040811015610ec257600080fd5b5080516020909101519096509450610fcf565b60035460025473ffffffffffffffffffffffffffffffffffffffff918216916302751cec9186821691161415610f0b5783610f0d565b845b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482018b905260016044830181905260648301523360848301524260a4830152805160c4808401938290030181600087803b158015610f9657600080fd5b505af1158015610faa573d6000803e3d6000fd5b505050506040513d6040811015610fc057600080fd5b50805160209091015190965094505b611154565b80156110815760048054604080517fe1f4a78400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81169482019490945286841660248201528584166044820152606481018b905260016084820181905260a48201523360c48201524260e48201528151939092169263e1f4a784926101048082019392918290030181600087803b158015610f9657600080fd5b600354604080517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528581166024830152604482018b905260016064830181905260848301523360a48301524260c4830152825193169263baa2abde9260e4808401939192918290030181600087803b15801561111b57600080fd5b505af115801561112f573d6000803e3d6000fd5b505050506040513d604081101561114557600080fd5b50805160209091015190965094505b50506001600055509194909350915050565b600080600080600085905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d60208110156111e357600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff85169163d21220a7916004808301926020929190829003018186803b15801561125157600080fd5b505afa158015611265573d6000803e3d6000fd5b505050506040513d602081101561127b57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8a8116908316146112a557816112a7565b805b94506112b5888b8b856132fd565b6040805160018082528183019092529195506060945090925090506020808301908036833701905050905085816000815181106112ee57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506060600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663119220a5600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b8787876040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611438578181015183820152602001611420565b50505050905001965050505050505060006040518083038186803b15801561145f57600080fd5b505afa158015611473573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156114ba57600080fd5b81019080805160405193929190846401000000008211156114da57600080fd5b9083019060208201858111156114ef57600080fd5b825186602082028301116401000000008211171561150c57600080fd5b82525081516020918201928201910280838360005b83811015611539578181015183820152602001611521565b5050505090500160405250505090508060018251038151811061155857fe5b6020026020010151839550955050505050935093915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b6009818154811061159a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff16331461164757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff80841660009081526007602090815260408083209386168352928152919020825161168992840190615d92565b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461171557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821661179757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5a61703a20496e76616c69642052656365697665722041646472657373000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561180857600080fd5b505af115801561181c573d6000803e3d6000fd5b505050506040513d602081101561183257600080fd5b50506040805182815273ffffffffffffffffffffffffffffffffffffffff84811660208301528251908616927f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b2928290030190a2505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461191157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604482015290519081900360640190fd5b600855565b60015473ffffffffffffffffffffffffffffffffffffffff16331461199c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604482015290519081900360640190fd5b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600080600080600087905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6657600080fd5b505afa158015611a7a573d6000803e3d6000fd5b505050506040513d6020811015611a9057600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff85169163d21220a7916004808301926020929190829003018186803b158015611afe57600080fd5b505afa158015611b12573d6000803e3d6000fd5b505050506040513d6020811015611b2857600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff88811690831614611b525781611b54565b805b935050505060008060008973ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ba457600080fd5b505afa158015611bb8573d6000803e3d6000fd5b505050506040513d6020811015611bce57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d8116600483015291519293508392611c7a928816916370a08231916024808301926020929190829003018186803b158015611c4757600080fd5b505afa158015611c5b573d6000803e3d6000fd5b505050506040513d6020811015611c7157600080fd5b50518b90613543565b81611c8157fe5b04925080611cef8973ffffffffffffffffffffffffffffffffffffffff166370a082318d6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611c4757600080fd5b81611cf657fe5b049150506000611d088a8585856135bf565b929a9299509097509095505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611da057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604482015290519081900360640190fd5b60606009805480602002602001604051908101604052809291908181526020018280548015611e0557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611dda575b50505050509050610b1b81836125c3565b600060026000541415611e8a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600081905550611ed2333087876000818110611ea457fe5b905060200201358973ffffffffffffffffffffffffffffffffffffffff16613084909392919063ffffffff16565b611edb86613119565b8273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2157600080fd5b505afa158015611f35573d6000803e3d6000fd5b505050506040513d6020811015611f4b57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff87811691161480611ffc57508273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d6020811015611fde57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff8781169116145b156122ce5760008060008573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561204c57600080fd5b505afa158015612060573d6000803e3d6000fd5b505050506040513d602081101561207657600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff89169163d21220a7916004808301926020929190829003018186803b1580156120e457600080fd5b505afa1580156120f8573d6000803e3d6000fd5b505050506040513d602081101561210e57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8a811690831614612138578161213a565b805b935061215b878b8b8b600081811061214e57fe5b90506020020135856132fd565b92505050600061216e898385308a61378d565b90508787600181811061217d57fe5b905060200201358110156121f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5a61703a20496e73756666696369656e74205265636569766520416d6f756e74604482015290519081900360640190fd5b6122c4868a8561221e868d8d600081811061220957fe5b90506020020135613cca90919063ffffffff16565b600554604080517fe5e31b1300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e81166004830152915189933393169163e5e31b13916024808301926020929190829003018186803b15801561229257600080fd5b505afa1580156122a6573d6000803e3d6000fd5b505050506040513d60208110156122bc57600080fd5b50518c613d41565b9350505050612304565b60006122f087878760008181106122e157fe5b90506020020135306000613fdf565b90506123008482336000876144b8565b9150505b8484600281811061231157fe5b9050602002013581101561238657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5a61703a204869676820536c69707061676520496e0000000000000000000000604482015290519081900360640190fd5b337f6c9d1839e8465b42ebfd3c687420dbcdf116253fd431545be184fb051c38f0c28787876000816123b457fe5b905060200201358685604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a2600160005595945050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260005414156124cd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260009081556124e186343388876144b8565b90508381101561255257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5a61703a204869676820536c69707061676520496e0000000000000000000000604482015290519081900360640190fd5b6002546040805173ffffffffffffffffffffffffffffffffffffffff928316815234602082015291881682820152606082018390525133917f6c9d1839e8465b42ebfd3c687420dbcdf116253fd431545be184fb051c38f0c2919081900360800190a2600160005595945050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461264957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166126cb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5a61703a20496e76616c69642052656365697665722041646472657373000000604482015290519081900360640190fd5b60005b82518110156126fc576126f48382815181106126e657fe5b602002602001015183614e4b565b6001016126ce565b505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260005414156127c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556127f073ffffffffffffffffffffffffffffffffffffffff8616333087613084565b6127f985613119565b60008060008060008990508073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561284a57600080fd5b505afa15801561285e573d6000803e3d6000fd5b505050506040513d602081101561287457600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905191965073ffffffffffffffffffffffffffffffffffffffff83169163d21220a791600480820192602092909190829003018186803b1580156128e057600080fd5b505afa1580156128f4573d6000803e3d6000fd5b505050506040513d602081101561290a57600080fd5b5051600554604080517fe5e31b1300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e811660048301529151939750600093919092169163e5e31b13916024808301926020929190829003018186803b15801561298557600080fd5b505afa158015612999573d6000803e3d6000fd5b505050506040513d60208110156129af57600080fd5b505190508015612a9d5760048054604080517fe1f4a78400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8f81169482019490945289841660248201528884166044820152606481018e905260016084820181905260a48201523060c48201524260e48201528151939092169263e1f4a784926101048082019392918290030181600087803b158015612a6057600080fd5b505af1158015612a74573d6000803e3d6000fd5b505050506040513d6040811015612a8a57600080fd5b5080516020909101519094509250612b70565b600354604080517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301528881166024830152604482018e905260016064830181905260848301523060a48301524260c4830152825193169263baa2abde9260e4808401939192918290030181600087803b158015612b3757600080fd5b505af1158015612b4b573d6000803e3d6000fd5b505050506040513d6040811015612b6157600080fd5b50805160209091015190945092505b50506000612b7d85613119565b612b8684613119565b73ffffffffffffffffffffffffffffffffffffffff881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612c395760025460009073ffffffffffffffffffffffffffffffffffffffff87811691161480612bfe575060025473ffffffffffffffffffffffffffffffffffffffff8681169116145b612c09576000612c0b565b8a5b9050612c1986853084613fdf565b9150612c31612c2a86853085613fdf565b8390614fd8565b915050612cd2565b60008573ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161480612ca057508473ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16145b612cab576000612cad565b8a5b9050612cbc86858b308561378d565b9150612cce612c2a86858c308661378d565b9150505b86811015612d4157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5a61703a204869676820536c697070616765204f757400000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612d8257612d7d338261504c565b612da3565b612da373ffffffffffffffffffffffffffffffffffffffff89163383615184565b6040805173ffffffffffffffffffffffffffffffffffffffff8c81168252602082018c90528a168183015260608101839052905133917f04a863d47eb1f82dce727c38e0b2294b96dea01f7d8c060216edb8ef473ea839919081900360800190a260016000559998505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612e9c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5a61703a2021676f7665726e616e636500000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390529051600091829173ffffffffffffffffffffffffffffffffffffffff8b169163d505accf9160e4808301928692919082900301818387803b158015612f7f57600080fd5b505af1158015612f93573d6000803e3d6000fd5b50505050612fa18989610b1f565b909a909950975050505050505050565b60085481565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c48101839052905160009173ffffffffffffffffffffffffffffffffffffffff8c169163d505accf9160e480820192869290919082900301818387803b15801561305257600080fd5b505af1158015613066573d6000803e3d6000fd5b505050506130768a8a8a8a612755565b9a9950505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261168990859061520d565b600354604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff928316602482015290519183169163dd62ed3e91604480820192602092909190829003018186803b15801561319257600080fd5b505afa1580156131a6573d6000803e3d6000fd5b505050506040513d60208110156131bc57600080fd5b5051613209576003546132099073ffffffffffffffffffffffffffffffffffffffff83811691167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6152e5565b60048054604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152309381019390935273ffffffffffffffffffffffffffffffffffffffff9182166024840152519083169163dd62ed3e916044808301926020929190829003018186803b15801561328357600080fd5b505afa158015613297573d6000803e3d6000fd5b505050506040513d60208110156132ad57600080fd5b50516132fa576004546132fa9073ffffffffffffffffffffffffffffffffffffffff83811691167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6152e5565b50565b600554604080517fca22297900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291516000938493849391169163ca22297991602480820192606092909190829003018186803b15801561337657600080fd5b505afa15801561338a573d6000803e3d6000fd5b505050506040513d60608110156133a057600080fd5b5080516020909101519092509050603263ffffffff831614156134d5576000808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561340657600080fd5b505afa15801561341a573d6000803e3d6000fd5b505050506040513d606081101561343057600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169350169050600073ffffffffffffffffffffffffffffffffffffffff89811690881614613478578161347a565b825b90506107ca6134c161348e836107cd613543565b6134bb6134b66134a186623cda29613543565b6134ae8e623cda20613543565b879101613543565b615473565b90613cca565b816134c857fe5b049550505050505061353b565b60008473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614613516578263ffffffff1661351e565b8163ffffffff165b9050613535606461352f8884613543565b906154c5565b93505050505b949350505050565b600082613552575060006135b9565b8282028284828161355f57fe5b04146135b6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180615e7a6021913960400191505060405180910390fd5b90505b92915050565b600654600554604080517fb33d96b000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015287831660248201528683166044820152905160009384938493849384938493169163b33d96b09160648083019260c0929190829003018186803b15801561364f57600080fd5b505afa158015613663573d6000803e3d6000fd5b505050506040513d60c081101561367957600080fd5b50602081015160408201516060830151608084015160a090940151600654939950919750955091935090915073ffffffffffffffffffffffffffffffffffffffff1663671a11b5896136cb8882613cca565b6136d5888c613cca565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260048101949094526024840192909252604483015263ffffffff80881660648401528087166084840152851660a48301525160c4808301926020929190829003018186803b15801561375357600080fd5b505afa158015613767573d6000803e3d6000fd5b505050506040513d602081101561377d57600080fd5b50519a9950505050505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156138085773ffffffffffffffffffffffffffffffffffffffff831630146138015761380173ffffffffffffffffffffffffffffffffffffffff87168487615184565b5083613cc1565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260076020908152604080832093881683529281529082902080548351818402810184019094528084526060939283018282801561389857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161386d575b505050505090506060600082511115613abf57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bff51d7189888a6001878b426040518863ffffffff1660e01b8152600401808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156139a657818101518382015260200161398e565b5050505090500198505050505050505050600060405180830381600087803b1580156139d157600080fd5b505af11580156139e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015613a2c57600080fd5b8101908080516040519392919084640100000000821115613a4c57600080fd5b908301906020820185811115613a6157600080fd5b8251866020820283011164010000000082111715613a7e57600080fd5b82525081516020918201928201910280838360005b83811015613aab578181015183820152602001613a93565b505050509050016040525050509050613ca4565b73ffffffffffffffffffffffffffffffffffffffff841615613c3d5760408051600180825281830190925290602080830190803683370190505091508382600081518110613b0957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bff51d7189888a6001878b426040518863ffffffff1660e01b8152600401808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182810382528581815181526020019150805190602001906020028083836000838110156139a657818101518382015260200161398e565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f46697265426972645a61703a2021706174682073776170000000000000000000604482015290519081900360640190fd5b80600182510381518110613cb457fe5b6020026020010151925050505b95945050505050565b600082821115613d3b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000613d4c88613119565b613d5587613119565b6000808415613e565760048054604080517ffbf4513500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8f8116948201949094528d841660248201528c84166044820152606481018c9052608481018b9052600160a4820181905260c482015289841660e4820152426101048201529051929091169163fbf4513591610124808201926060929091908290030181600087803b158015613e1357600080fd5b505af1158015613e27573d6000803e3d6000fd5b505050506040513d6060811015613e3d57600080fd5b5080516020820151604090920151945092509050613f3d565b600354604080517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d811660048301528c81166024830152604482018c9052606482018b905260016084830181905260a483015289811660c48301524260e48301529151919092169163e8e33700916101048083019260609291908290030181600087803b158015613efe57600080fd5b505af1158015613f12573d6000803e3d6000fd5b505050506040513d6060811015613f2857600080fd5b50805160208201516040909201519450925090505b6000613f498984613cca565b90508480613f705750613f6d61271061352f6008548c61354390919063ffffffff16565b81115b15613f86578015613f8657613f868b3383615546565b6000613f928984613cca565b90508580613fb95750613fb661271061352f6008548c61354390919063ffffffff16565b81115b15613fcf578015613fcf57613fcf8b3383615546565b5050505098975050505050505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff86811691161415614030576002546140299073ffffffffffffffffffffffffffffffffffffffff168486615546565b508261353b565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526007602090815260408083206002549094168352928152908290208054835181840281018401909452808452606093928301828280156140c357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311614098575b5050505050905060606000825111156142cc57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c91fcb588886001868a426040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156141b457818101518382015260200161419c565b50505050905001975050505050505050600060405180830381600087803b1580156141de57600080fd5b505af11580156141f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561423957600080fd5b810190808051604051939291908464010000000082111561425957600080fd5b90830190602082018581111561426e57600080fd5b825186602082028301116401000000008211171561428b57600080fd5b82525081516020918201928201910280838360005b838110156142b85781810151838201526020016142a0565b505050509050016040525050509050614494565b73ffffffffffffffffffffffffffffffffffffffff84161561442d576040805160018082528183019092529060208083019080368337019050509150838260008151811061431657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c91fcb588886001868a426040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182810382528581815181526020019150805190602001906020028083836000838110156141b457818101518382015260200161419c565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f46697265426972645a61703a20217061746820546f6b656e424e420000000000604482015290519081900360640190fd5b806001825103815181106144a457fe5b602002602001015192505050949350505050565b600080869050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561453d57600080fd5b505afa158015614551573d6000803e3d6000fd5b505050506040513d602081101561456757600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806146375750600254604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff928316928a169163d21220a7916004808301926020929190829003018186803b1580156145f357600080fd5b505afa158015614607573d6000803e3d6000fd5b505050506040513d602081101561461d57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16145b15614baf576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156146bd57600080fd5b505afa1580156146d1573d6000803e3d6000fd5b505050506040513d60208110156146e757600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161461477b578773ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561474a57600080fd5b505afa15801561475e573d6000803e3d6000fd5b505050506040513d602081101561477457600080fd5b50516147ee565b8773ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156147c157600080fd5b505afa1580156147d5573d6000803e3d6000fd5b505050506040513d60208110156147eb57600080fd5b50515b600554604080517fca22297900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152915193945060009384938493169163ca222979916024808301926060929190829003018186803b15801561486857600080fd5b505afa15801561487c573d6000803e3d6000fd5b505050506040513d606081101561489257600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505050915091506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561493d57600080fd5b505afa158015614951573d6000803e3d6000fd5b505050506040513d602081101561496757600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614614990578263ffffffff16614998565b8163ffffffff165b90506149a9606461352f8d84613543565b935050505060006149bc8383308761564b565b905086811015614a2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5a61703a20496e73756666696369656e74205265636569766520416d6f756e74604482015290519081900360640190fd5b6000614a398a84613cca565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015614aa557600080fd5b505af1158015614ab9573d6000803e3d6000fd5b5050505050614ba485600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168684868e600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e5e31b138d6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614b7257600080fd5b505afa158015614b86573d6000803e3d6000fd5b505050506040513d6020811015614b9c57600080fd5b50518e613d41565b955050505050614e41565b60008773ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015614bf757600080fd5b505afa158015614c0b573d6000803e3d6000fd5b505050506040513d6020811015614c2157600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff8b169163d21220a7916004808301926020929190829003018186803b158015614c8f57600080fd5b505afa158015614ca3573d6000803e3d6000fd5b505050506040513d6020811015614cb957600080fd5b5051600554604080517fca22297900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152915193945060009384938493169163ca222979916024808301926060929190829003018186803b158015614d3557600080fd5b505afa158015614d49573d6000803e3d6000fd5b505050506040513d6060811015614d5f57600080fd5b505190506000614d7d606461352f8e63ffffffff8087169061354316565b9050614d8c868230600061564b565b9350614da485614d9c8e84613cca565b30600061564b565b92505050614e3a85858585858e600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e5e31b138d6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614b7257600080fd5b9550505050505b5095945050505050565b73ffffffffffffffffffffffffffffffffffffffff8216614ec757614e70814761504c565b6040805147815273ffffffffffffffffffffffffffffffffffffffff83811660208301528251908516927f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b2928290030190a2610b1b565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614f3057600080fd5b505afa158015614f44573d6000803e3d6000fd5b505050506040513d6020811015614f5a57600080fd5b5051604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820184905291519293509085169163a9059cbb916044808201926020929091908290030181600087803b15801561180857600080fd5b6000828201838110156135b657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b602083106150c357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101615086565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615125576040519150601f19603f3d011682016040523d82523d6000602084013e61512a565b606091505b50509050806126fc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180615e9b6023913960400191505060405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526126fc9084905b606061526f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16615afa9092919063ffffffff16565b8051909150156126fc5780806020019051602081101561528e57600080fd5b50516126fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615ebe602a913960400191505060405180910390fd5b8015806153915750604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561536357600080fd5b505afa158015615377573d6000803e3d6000fd5b505050506040513d602081101561538d57600080fd5b5051155b6153e6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180615ee86036913960400191505060405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526126fc90849061520d565b600060038211156154b6575080600160028204015b818110156154b05780915060028182858161549f57fe5b0401816154a857fe5b049050615488565b506154c0565b81156154c0575060015b919050565b600080821161553557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161553e57fe5b049392505050565b80615550576126fc565b60025473ffffffffffffffffffffffffffffffffffffffff8481169116141561562a57600254604080517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101849052905173ffffffffffffffffffffffffffffffffffffffff90921691632e1a7d4d9160248082019260009290919082900301818387803b1580156155e657600080fd5b505af11580156155fa573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8216301461562557615625828261504c565b6126fc565b6126fc73ffffffffffffffffffffffffffffffffffffffff84168383615184565b60025460009073ffffffffffffffffffffffffffffffffffffffff8681169116141561573657600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156156db57600080fd5b505af11580156156ef573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff841630149050614029576002546140299073ffffffffffffffffffffffffffffffffffffffff168486615184565b60025473ffffffffffffffffffffffffffffffffffffffff90811660009081526007602090815260408083209389168352928152908290208054835181840281018401909452808452606093928301828280156157c957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161579e575b50505050509050606060008251111561593857600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fde1adda87896001868a426040518763ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156158b457818101518382015260200161589c565b5050505090500196505050505050506000604051808303818588803b1580156158dc57600080fd5b505af11580156158f0573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561423957600080fd5b73ffffffffffffffffffffffffffffffffffffffff841615615a93576040805160018082528183019092529060208083019080368337019050509150838260008151811061598257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fde1adda87896001868a426040518763ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182810382528581815181526020019150805190602001906020028083836000838110156158b457818101518382015260200161589c565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f46697265426972645a61703a20217061746820424e42546f6b656e0000000000604482015290519081900360640190fd5b6060615b098484600085615b13565b90505b9392505050565b606082471015615b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180615e546026913960400191505060405180910390fd5b615b7785615cce565b615be257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310615c4c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101615c0f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615cae576040519150601f19603f3d011682016040523d82523d6000602084013e615cb3565b606091505b5091509150615cc3828286615cd4565b979650505050505050565b3b151590565b60608315615ce3575081615b0c565b825115615cf35782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615d57578181015183820152602001615d3f565b50505050905090810190601f168015615d845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215615e0c579160200282015b82811115615e0c57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190615db2565b50615e18929150615e1c565b5090565b5b80821115615e185780547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101615e1d56fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212206f5b0ddb16b172c3909af9e10d0ffb274aaab125b4a5cbafa924e10601794e9064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1739,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1790,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1792,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "WBNB",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1800,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "uniRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IUniswapV2Router)6463"
      },
      {
        "astId": 1802,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IFireBirdRouter)5746"
      },
      {
        "astId": 1804,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IFireBirdFactory)4817"
      },
      {
        "astId": 1806,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdFormula",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IFireBirdFormula)5058"
      },
      {
        "astId": 1813,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdPairs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 1816,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "maxResidual",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1819,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "tokensResidual",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IFireBirdFactory)4817": {
        "encoding": "inplace",
        "label": "contract IFireBirdFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IFireBirdFormula)5058": {
        "encoding": "inplace",
        "label": "contract IFireBirdFormula",
        "numberOfBytes": "20"
      },
      "t_contract(IFireBirdRouter)5746": {
        "encoding": "inplace",
        "label": "contract IFireBirdRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router)6463": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}