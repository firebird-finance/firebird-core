{
  "address": "0x55388d337734DBdd1faCC7dbf9F2873efFae4545",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x956b8ddd5ff0695e49ea95f54407f17b41e7207c9e3a399a9fa1e11660f666f1",
  "receipt": {
    "to": null,
    "from": "0x7a1a8Ecd640bB8399DB2c5265A45AD8a91BF63CC",
    "contractAddress": "0x55388d337734DBdd1faCC7dbf9F2873efFae4545",
    "transactionIndex": 315,
    "gasUsed": "4164180",
    "logsBloom": "0x
    "blockHash": "0x21168f0cc5221526300f7ddd5379986c78892c5c56dd926adbff3dcc4cec6ff0",
    "transactionHash": "0x956b8ddd5ff0695e49ea95f54407f17b41e7207c9e3a399a9fa1e11660f666f1",
    "logs": [],
    "blockNumber": 7492443,
    "cumulativeGasUsed": "39348335",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a1a8Ecd640bB8399DB2c5265A45AD8a91BF63CC",
    "0xb537e3BF6Fb0f05e0098286DDB0C17ff2CA7dc48"
  ],
  "solcInputHash": "b31d4111725df4d63ffe330d3dbf39db",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/FireBirdFactory.sol\":\"FireBirdFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/FireBirdERC20.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IFireBirdERC20.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract FireBirdERC20 is IFireBirdERC20 {\\n    using SafeMath for uint;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n    uint  public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    constructor() public {\\n    }\\n\\n    function initialize(string memory _name, string memory _symbol) internal {\\n        name = _name;\\n        symbol = _symbol;\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(_name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'FBP: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'FBP: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xc55329cb5f238b0ec4ab92cdc536208455892112596408464f8d4cd9124eb636\"},\"contracts/FireBirdFactory.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IFireBirdFactory.sol';\\nimport './FireBirdPair.sol';\\n\\ncontract FireBirdFactory is IFireBirdFactory {\\n    address public feeTo;\\n    address public formula;\\n    uint public protocolFee;\\n    address public feeToSetter;\\n\\n    mapping(bytes32 => address) private _pairSalts;\\n    address[] public allPairs;\\n    mapping(address => uint64) private _pairs;\\n\\n\\n    constructor(address _feeToSetter, address _formula) public {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n    }\\n    function isPair(address b) external view returns (bool){\\n        return _pairs[b] > 0;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair){\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        pair = _pairSalts[salt];\\n    }\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair) {\\n        require(tokenA != tokenB, 'FBP: IDENTICAL_ADDRESSES');\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, 'FBP: INVALID_TOKEN_WEIGHT');\\n        // swap fee from [0.05% - 10%] step = 0.05%\\n        require(swapFee >= 5 && swapFee <= 1000 && swapFee % 5 == 0, 'FBP: INVALID_SWAP_FEE');\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), 'FBP: ZERO_ADDRESS');\\n        // single check is sufficient\\n        bytes memory bytecode = type(FireBirdPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        require(_pairSalts[salt] == address(0), 'FBP: PAIR_EXISTS');\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IFireBirdPair(pair).initialize(token0, token1, tokenWeight0, swapFee);\\n        _pairSalts[salt] = address(pair);\\n        allPairs.push(pair);\\n        uint64 weightAndFee = uint64(swapFee);\\n        weightAndFee |= uint64(tokenWeight0)<<32;\\n        _pairs[address(pair)] = weightAndFee;\\n        emit PairCreated(token0, token1, pair, tokenWeight0, swapFee, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, 'FBP: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, 'FBP: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setProtocolFee(uint _protocolFee) external {\\n        require(msg.sender == feeToSetter, 'FBP: FORBIDDEN');\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), 'FBP: Invalid Protocol fee');\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getWeightsAndSwapFee(address pair) public view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee) {\\n        uint64 weightAndFee = _pairs[pair];\\n        if (weightAndFee > 0) {\\n            swapFee = uint32(weightAndFee);\\n            tokenWeight0 = uint32(weightAndFee>>32);\\n            tokenWeight1 = 100 - tokenWeight0;\\n        } else {\\n            // Default is pancake swap v2 0.25%\\n            return (50, 50, 25);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e3946dfa24952aa2fcf7879dc26525bdc3c75234b82414e9ed9a98d97738f8f\"},\"contracts/FireBirdPair.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IFireBirdPair.sol';\\nimport './interfaces/IFireBirdFormula.sol';\\nimport './FireBirdERC20.sol';\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IFireBirdFactory.sol';\\nimport './interfaces/IUniswapV2Callee.sol';\\n\\ncontract FireBirdPair is IFireBirdPair, FireBirdERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint private unlocked = 1;\\n    address public formula;\\n\\n    uint112 private collectedFee0;           // uses single storage slot, accessible via getReserves\\n    uint112 private collectedFee1;           // uses single storage slot, accessible via getReserves\\n    uint32 private tokenWeight0;\\n\\n    uint32 private swapFee;\\n\\n    modifier lock() {\\n        require(unlocked == 1, 'FBP: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    function getTokenWeights() public view returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n        _tokenWeight0 = tokenWeight0;\\n        _tokenWeight1 = 100 - tokenWeight0;\\n    }\\n\\n    function getSwapFee() public view returns (uint32 _swapFee) {\\n        _swapFee = swapFee;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'FBP: TRANSFER_FAILED');\\n    }\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1, uint32 _tokenWeight0, uint32 _swapFee) external {\\n        require(msg.sender == factory, 'FBP: FORBIDDEN');\\n        string memory _symbol0 = IERC20(_token0).symbol();\\n        string memory _symbol1 = IERC20(_token1).symbol();\\n        initialize(\\n            string(abi.encodePacked(_symbol0, \\\"/\\\", _symbol1, \\\" Value LP\\\")),\\n            string(abi.encodePacked(_symbol0, _symbol1))\\n        );\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        tokenWeight0 = _tokenWeight0;\\n        swapFee = _swapFee;\\n        formula = IFireBirdFactory(factory).formula();\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        uint32 _tokenWeight0 = tokenWeight0;\\n        require(balance0 * (100 - _tokenWeight0) <= uint112(- 1) && balance1 * _tokenWeight0 <= uint112(- 1), 'FBP: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n            uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n            price0CumulativeLast += uint(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IFireBirdFactory(factory).feeTo();\\n        uint112 protocolFee = uint112(IFireBirdFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint32 _tokenWeight0 = tokenWeight0;\\n            uint liquidity = IFireBirdFormula(formula).mintLiquidityFee(\\n                totalSupply, _reserve0, _reserve1,\\n                _tokenWeight0, 100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee, _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'FBP: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply;// using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply;// using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'FBP: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'FBP: INSUFFICIENT_OUTPUT_AMOUNT');\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'FBP: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'FBP: INVALID_TO');\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'FBP: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint balance0Adjusted = balance0.mul(10000);\\n            uint balance1Adjusted = balance1.mul(10000);\\n            { // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0;// gas savings\\n                if (_tokenWeight0 == 50) { // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'FBP: K');\\n                } else {\\n                    require(IFireBirdFormula(formula).ensureConstantValue(uint(_reserve0).mul(10000), uint(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), 'FBP: K');\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0x346363c29e7a0d80a536d28139359c50d14472470e6b766677396e5f3bd4d3e2\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdc30fa248655dc9936342ff8f8d2c4669143123013acdea9fa04b234540a0763\"},\"contracts/interfaces/IFireBirdERC20.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IFireBirdERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xf12bb0e9935d0f244c40d897e49d135e9270c5915862d000e9e0a544141e5cfb\"},\"contracts/interfaces/IFireBirdFactory.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IFireBirdFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0xf877564655d8d582ea8cb43c2f1adbfa99175b60a0198ded0faffbe22fcd613f\"},\"contracts/interfaces/IFireBirdFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IFireBirdFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0xb25e0b384bada4a58243703a3d38e738dd58ea121c8cdc6b3e3fc6bd56a73b55\"},\"contracts/interfaces/IFireBirdPair.sol\":{\"content\":\"pragma solidity >=0.5.16;\\ninterface IFireBirdPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n    function getSwapFee() external view returns (uint32);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address, uint32, uint32) external;\\n}\\n\",\"keccak256\":\"0x770c213bb2620ee99eb32eb1140304457ca65653f5c4ce3b90d203a22f661015\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xec374f9a56106d72c4dd1513806e468c3023c47b63503592d296b84bc73361f0\"},\"contracts/libraries/Math.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9057591ba330f33e8af1ec9e618c30f6819c99f0660fdb2373b7c104c182315b\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    function div(uint a, uint b) internal pure returns (uint c) {\\n        require(b > 0, 'ds-math-division-by-zero');\\n        c = a / b;\\n    }\\n}\\n\",\"keccak256\":\"0x5b9da9eeab62132e6a4355aa12528d51133fcc542210ff3c08a0aff4999b36fc\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xcb95f28dce1327158af80a3ffcfacaa608617afbffd4c7991f236117124698bf\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051614a89380380614a898339818101604052604081101561003357600080fd5b508051602090910151600380546001600160a01b039384166001600160a01b03199182161790915560018054939092169216919091179055614a0f8061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d14610207578063ca22297914610258578063e5e31b13146102b3578063f46901ed146102fa576100df565b8063787dce3d146101ad578063a2e74af6146101cc578063b0e21e8a146101ff576100df565b80631e3dd18b116100bd5780631e3dd18b1461016e5780634b75f54f1461018b578063574f2ba314610193576100df565b8063017e7e58146100e4578063094b74151461011557806314572adb1461011d575b600080fd5b6100ec61032d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100ec610349565b6100ec6004803603608081101561013357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516610365565b6100ec6004803603602081101561018457600080fd5b5035610a3a565b6100ec610a6e565b61019b610a8a565b60408051918252519081900360200190f35b6101ca600480360360208110156101c357600080fd5b5035610a90565b005b6101ca600480360360208110156101e257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ba3565b61019b610c70565b6100ec6004803603608081101561021d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516610c76565b61028b6004803603602081101561026e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d82565b6040805163ffffffff9485168152928416602084015292168183015290519081900360600190f35b6102e6600480360360208110156102c957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610df5565b604080519115158252519081900360200190f35b6101ca6004803603602081101561031057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e29565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561040257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4642503a204944454e544943414c5f4144445245535345530000000000000000604482015290519081900360640190fd5b60028363ffffffff1610158015610420575060628363ffffffff1611155b801561042d575060018316155b61049857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4642503a20494e56414c49445f544f4b454e5f57454947485400000000000000604482015290519081900360640190fd5b60058263ffffffff16101580156104b757506103e88263ffffffff1611155b80156104d25750600563ffffffff83160663ffffffff166000145b61053d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4642503a20494e56414c49445f535741505f4645450000000000000000000000604482015290519081900360640190fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161061058057868887606403610584565b8787875b9194509250905073ffffffffffffffffffffffffffffffffffffffff831661060d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4642503a205a45524f5f41444452455353000000000000000000000000000000604482015290519081900360640190fd5b60606040518060200161061f90610ef6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408181527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606088811b82166020858101919091529088901b90911660348401527fffffffff0000000000000000000000000000000000000000000000000000000060e087811b821660488601528b901b16604c8401528151603081850301815260509093018252825192810192909220600081815260049093529120549192509073ffffffffffffffffffffffffffffffffffffffff161561077257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4642503a20504149525f45584953545300000000000000000000000000000000604482015290519081900360640190fd5b808251602084016000f5604080517fd0f6957900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015263ffffffff80881660448401528b16606483015291519298509088169163d0f695799160848082019260009290919082900301818387803b15801561080c57600080fd5b505af1158015610820573d6000803e3d6000fd5b50505050856004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060058690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008763ffffffff16905060208463ffffffff1667ffffffffffffffff16901b8117905080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc42889878c600580549050604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff16815260200182815260200194505050505060405180910390a3505050505050949350505050565b60058181548110610a4757fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60055490565b60035473ffffffffffffffffffffffffffffffffffffffff163314610b1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4642503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b801580610b3357506127108110158015610b335750620186a08111155b610b9e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4642503a20496e76616c69642050726f746f636f6c2066656500000000000000604482015290519081900360640190fd5b600255565b60035473ffffffffffffffffffffffffffffffffffffffff163314610c2957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4642503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025481565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610610cba57868887606403610cbe565b8787875b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b81166020808401919091529490951b90941660348501527fffffffff0000000000000000000000000000000000000000000000000000000060e092831b811660488601529890911b909716604c830152865160308184030181526050909201875281519181019190912060009081526004909152949094205473ffffffffffffffffffffffffffffffffffffffff16979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120548190819067ffffffffffffffff168015610ddb5780915060208167ffffffffffffffff16901c9350836064039250610dec565b506032925082915060199050610dee565b505b9193909250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205467ffffffffffffffff16151590565b60035473ffffffffffffffffffffffffffffffffffffffff163314610eaf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4642503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b613ad780610f048339019056fe60806040526001600d5534801561001557600080fd5b50600780546001600160a01b03191633179055613aa0806100376000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063c45a0155116100a2578063d505accf11610071578063d505accf14610665578063d54a8d18146106c3578063dd62ed3e146106f8578063fff6cae914610733576101da565b8063c45a0155146105e3578063d0f69579146105eb578063d21220a71461063c578063d4cadf6814610644576101da565b806395d89b41116100de57806395d89b4114610567578063a9059cbb1461056f578063ba9a7a56146105a8578063bc25cf77146105b0576101da565b806370a08231146104b55780637ecebe00146104e857806389afcb441461051b576101da565b806330adf81f1161017c5780634b75f54f1161014b5780634b75f54f1461046a5780635909c0d5146104725780635a3d54931461047a5780636a62784214610482576101da565b806330adf81f14610411578063313ce5671461041957806332bfe469146104375780633644e51514610462576101da565b8063095ea7b3116101b8578063095ea7b3146103365780630dfe16811461038357806318160ddd146103b457806323b872dd146103ce576101da565b8063022c0d9f146101df57806306fdde031461027a5780630902f1ac146102f7575b600080fd5b610278600480360360808110156101f557600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561023957600080fd5b82018360208201111561024b57600080fd5b8035906020019184600183028401116401000000008311171561026d57600080fd5b50909250905061073b565b005b6102826110fe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102bc5781810151838201526020016102a4565b50505050905090810190601f1680156102e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ff6111aa565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b61036f6004803603604081101561034c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356111ff565b604080519115158252519081900360200190f35b61038b611216565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103bc611232565b60408051918252519081900360200190f35b61036f600480360360608110156103e457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611238565b6103bc611317565b61042161133b565b6040805160ff9092168252519081900360200190f35b61043f611340565b6040805163ffffffff938416815291909216602082015281519081900390910190f35b6103bc611372565b61038b611378565b6103bc611394565b6103bc61139a565b6103bc6004803603602081101561049857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166113a0565b6103bc600480360360208110156104cb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661171f565b6103bc600480360360208110156104fe57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611731565b61054e6004803603602081101561053157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611743565b6040805192835260208301919091528051918290030190f35b610282611b9b565b61036f6004803603604081101561058557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611c13565b6103bc611c20565b610278600480360360208110156105c657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611c26565b61038b611e1c565b6102786004803603608081101561060157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516611e38565b61038b612561565b61064c61257d565b6040805163ffffffff9092168252519081900360200190f35b610278600480360360e081101561067b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612589565b6106cb612855565b604080516dffffffffffffffffffffffffffff938416815291909216602082015281519081900390910190f35b6103bc6004803603604081101561070e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612882565b61027861289f565b600d546001146107ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55841515806107bf5750600084115b61082a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4642503a20494e53554646494349454e545f4f55545055545f414d4f554e5400604482015290519081900360640190fd5b600a546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041681871080156108715750806dffffffffffffffffffffffffffff1686105b6108dc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4642503a20494e53554646494349454e545f4c49515549444954590000000000604482015290519081900360640190fd5b600854600954600091829173ffffffffffffffffffffffffffffffffffffffff91821691908116908916821480159061094157508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b6109ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4642503a20494e56414c49445f544f0000000000000000000000000000000000604482015290519081900360640190fd5b8a156109bd576109bd828a8d612a85565b89156109ce576109ce818a8c612a85565b8615610ab0578873ffffffffffffffffffffffffffffffffffffffff166310d1e85c338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506040513d6020811015610b4657600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d6020811015610be257600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610c0c576000610c22565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610c46576000610c5c565b89856dffffffffffffffffffffffffffff160383035b90506000821180610c6d5750600081115b610cd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4642503a20494e53554646494349454e545f494e5055545f414d4f554e540000604482015290519081900360640190fd5b6000610cec8561271063ffffffff612c9216565b90506000610d028561271063ffffffff612c9216565b90508315610d9e57601054600090610d2590869063ffffffff90811690612c9216565b9050610d37838263ffffffff612d1816565b600f54909350610d5d906dffffffffffffffffffffffffffff168263ffffffff612d8a16565b600f80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b8215610e3957601054600090610dbf90859063ffffffff90811690612c9216565b9050610dd1828263ffffffff612d1816565b600f54909250610e03906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1682612d8a565b600f600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600f547c0100000000000000000000000000000000000000000000000000000000900463ffffffff166032811415610f2457610ea26305f5e100610e966dffffffffffffffffffffffffffff8c8116908c1663ffffffff612c9216565b9063ffffffff612c9216565b610eb2848463ffffffff612c9216565b1015610f1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4642503a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61107c565b600e5473ffffffffffffffffffffffffffffffffffffffff166379c91b37610f646dffffffffffffffffffffffffffff8c1661271063ffffffff612c9216565b610f866dffffffffffffffffffffffffffff8c1661271063ffffffff612c9216565b8686866040518663ffffffff1660e01b8152600401808681526020018581526020018481526020018381526020018263ffffffff1663ffffffff1681526020019550505050505060206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d602081101561100f57600080fd5b505161107c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4642503a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50505061108b84848888612dfc565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b6000805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156111a25780601f10611177576101008083540402835291602001916111a2565b820191906000526020600020905b81548152906001019060200180831161118557829003601f168201915b505050505081565b600a546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b600061120c338484613108565b5060015b92915050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146113025773ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020546112d0908363ffffffff612d1816565b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602090815260408083203384529091529020555b61130d848484613177565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600f547c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690606482900390565b60055481565b600e5473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b600c5481565b6000600d5460011461141357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d819055806114236111aa565b50600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561149d57600080fd5b505afa1580156114b1573d6000803e3d6000fd5b505050506040513d60208110156114c757600080fd5b5051600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561154057600080fd5b505afa158015611554573d6000803e3d6000fd5b505050506040513d602081101561156a57600080fd5b505190506000611590836dffffffffffffffffffffffffffff871663ffffffff612d1816565b905060006115b4836dffffffffffffffffffffffffffff871663ffffffff612d1816565b90506115c08686613258565b5060025480611607576115f36103e86115e76115e2868663ffffffff612c9216565b613612565b9063ffffffff612d1816565b975061160260006103e8613664565b611664565b6116616dffffffffffffffffffffffffffff881661162b858463ffffffff612c9216565b8161163257fe5b046dffffffffffffffffffffffffffff8816611654858563ffffffff612c9216565b8161165b57fe5b04613715565b97505b600088116116bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613a4a6022913960400191505060405180910390fd5b6116c78989613664565b6116d385858989612dfc565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d55509395945050505050565b60036020526000908152604090205481565b60066020526000908152604090205481565b600080600d546001146117b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d819055806117c76111aa565b50600854600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b15801561184957600080fd5b505afa15801561185d573d6000803e3d6000fd5b505050506040513d602081101561187357600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b1580156118e757600080fd5b505afa1580156118fb573d6000803e3d6000fd5b505050506040513d602081101561191157600080fd5b5051306000908152600360205260409020549091506119308787613258565b5060025480611945838663ffffffff612c9216565b8161194c57fe5b04995080611960838563ffffffff612c9216565b8161196757fe5b04985060008a11801561197a5750600089115b6119cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613a286022913960400191505060405180910390fd5b6119d9308361372d565b6119e4868c8c612a85565b6119ef858c8b612a85565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8816916370a08231916024808301926020929190829003018186803b158015611a5b57600080fd5b505afa158015611a6f573d6000803e3d6000fd5b505050506040513d6020811015611a8557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8716916370a0823191602480820192602092909190829003018186803b158015611af757600080fd5b505afa158015611b0b573d6000803e3d6000fd5b505050506040513d6020811015611b2157600080fd5b50519250611b3184848a8a612dfc565b604080518b8152602081018b9052815173ffffffffffffffffffffffffffffffffffffffff8e169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050506001600d81905550915091565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156111a25780601f10611177576101008083540402835291602001916111a2565b600061120c338484613177565b6103e881565b600d54600114611c9757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600854600954600a54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9485169490931692611d739285928792611d6e926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b158015611d3657600080fd5b505afa158015611d4a573d6000803e3d6000fd5b505050506040513d6020811015611d6057600080fd5b50519063ffffffff612d1816565b612a85565b600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611e129284928792611d6e926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b158015611d3657600080fd5b50506001600d5550565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff163314611ebe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4642503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b60608473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611f0657600080fd5b505afa158015611f1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015611f6157600080fd5b8101908080516040519392919084640100000000821115611f8157600080fd5b908301906020820185811115611f9657600080fd5b8251640100000000811182820188101715611fb057600080fd5b82525081516020918201929091019080838360005b83811015611fdd578181015183820152602001611fc5565b50505050905090810190601f16801561200a5780820380516001836020036101000a031916815260200191505b50604052505050905060608473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561205b57600080fd5b505afa15801561206f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156120b657600080fd5b81019080805160405193929190846401000000008211156120d657600080fd5b9083019060208201858111156120eb57600080fd5b825164010000000081118282018810171561210557600080fd5b82525081516020918201929091019080838360005b8381101561213257818101518382015260200161211a565b50505050905090810190601f16801561215f5780820380516001836020036101000a031916815260200191505b5060405250505090506123bd82826040516020018083805190602001908083835b602083106121bd57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612180565b6001836020036101000a038019825116818451168082178552505050505050905001807f2f0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b6020831061225057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612213565b6001836020036101000a038019825116818451168082178552505050505050905001807f2056616c7565204c5000000000000000000000000000000000000000000000008152506009019250505060405160208183030381529060405283836040516020018083805190602001908083835b602083106122ff57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016122c2565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905285519190930192850191508083835b6020831061238357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612346565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526137f1565b6008805473ffffffffffffffffffffffffffffffffffffffff8089167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600980548884169216919091179055600f805463ffffffff8088167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90921691909117909155601080549186167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909216919091179055600754604080517f4b75f54f00000000000000000000000000000000000000000000000000000000815290519190921691634b75f54f916004808301926020929190829003018186803b1580156124e957600080fd5b505afa1580156124fd573d6000803e3d6000fd5b505050506040513d602081101561251357600080fd5b5051600e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055505050505050565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b60105463ffffffff1690565b428410156125f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4642503a20455850495245440000000000000000000000000000000000000000604482015290519081900360640190fd5b60055473ffffffffffffffffffffffffffffffffffffffff80891660008181526006602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015612759573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906127d457508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61283f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4642503a20494e56414c49445f5349474e415455524500000000000000000000604482015290519081900360640190fd5b61284a898989613108565b505050505050505050565b600f546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b600460209081526000928352604080842090915290825290205481565b600d5460011461291057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600854604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051612a7e9273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b15801561298757600080fd5b505afa15801561299b573d6000803e3d6000fd5b505050506040513d60208110156129b157600080fd5b5051600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612a2457600080fd5b505afa158015612a38573d6000803e3d6000fd5b505050506040513d6020811015612a4e57600080fd5b5051600a546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612dfc565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310612b8b57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612b4e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612bed576040519150601f19603f3d011682016040523d82523d6000602084013e612bf2565b606091505b5091509150818015612c20575080511580612c205750808060200190516020811015612c1d57600080fd5b50515b612c8b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4642503a205452414e534645525f4641494c4544000000000000000000000000604482015290519081900360640190fd5b5050505050565b6000811580612cad57505080820282828281612caa57fe5b04145b61121057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b8082038281111561121057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b8082018281101561121057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b600f5463ffffffff7c01000000000000000000000000000000000000000000000000000000009091048116906dffffffffffffffffffffffffffff6064839003909116860211801590612e6557506dffffffffffffffffffffffffffff63ffffffff8216850211155b612ed057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4642503a204f564552464c4f5700000000000000000000000000000000000000604482015290519081900360640190fd5b600a5463ffffffff428116917c010000000000000000000000000000000000000000000000000000000090048116820390811615801590612f2057506dffffffffffffffffffffffffffff851615155b8015612f3b57506dffffffffffffffffffffffffffff841615155b15612ffd5763ffffffff606484900381168602908085168602908316612f8e83612f64846138d5565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff6138f916565b600b80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8316612fce82612f64856138d5565b600c80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905550505b600a80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff898116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008983168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a150505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020546131ad908263ffffffff612d1816565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526003602052604080822093909355908416815220546131ef908263ffffffff612d8a16565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c357600080fd5b505afa1580156132d7573d6000803e3d6000fd5b505050506040513d60208110156132ed57600080fd5b5051600754604080517fb0e21e8a000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163b0e21e8a91600480820192602092909190829003018186803b15801561336057600080fd5b505afa158015613374573d6000803e3d6000fd5b505050506040513d602081101561338a57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff83161515935090506000806133b4612855565b915091506000836dffffffffffffffffffffffffffff161180156133d55750845b801561340b57506000826dffffffffffffffffffffffffffff16118061340b57506000816dffffffffffffffffffffffffffff16115b1561358a57600f54600e546002547c010000000000000000000000000000000000000000000000000000000090920463ffffffff169160009173ffffffffffffffffffffffffffffffffffffffff16906392aec23c908b8b8660648190036dffffffffffffffffffffffffffff8c8116908c168161348557fe5b048c6dffffffffffffffffffffffffffff168b6dffffffffffffffffffffffffffff16816134af57fe5b6040805160e08b901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101999099526dffffffffffffffffffffffffffff97881660248a0152958716604489015263ffffffff9485166064890152929093166084870152841660a48601520490911660c48301525160e4808301926020929190829003018186803b15801561354957600080fd5b505afa15801561355d573d6000803e3d6000fd5b505050506040513d602081101561357357600080fd5b505190508015613587576135878682613664565b50505b6dffffffffffffffffffffffffffff8216156135c957600f80547fffffffffffffffffffffffffffffffffffff00000000000000000000000000001690555b6dffffffffffffffffffffffffffff81161561360857600f80547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff1690555b5050505092915050565b60006003821115613655575080600160028204015b8181101561364f5780915060028182858161363e57fe5b04018161364757fe5b049050613627565b5061365f565b811561365f575060015b919050565b600254613677908263ffffffff612d8a16565b60025573ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020546136b0908263ffffffff612d8a16565b73ffffffffffffffffffffffffffffffffffffffff831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106137245781613726565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054613763908263ffffffff612d1816565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604090205560025461379c908263ffffffff612d1816565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b815161380490600090602085019061393a565b50805161381890600190602084019061393a565b5060405146908060526139d682396040805191829003605201822086516020978801208383018352600184527f310000000000000000000000000000000000000000000000000000000000000093880193909352815180880191909152808201929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606083015260808201939093523060a0808301919091528351808303909101815260c090910190925250805192019190912060055550565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff84168161393257fe5b049392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061397b57805160ff19168380011785556139a8565b828001600101855582156139a8579182015b828111156139a857825182559160200191906001019061398d565b506139b49291506139b8565b5090565b6139d291905b808211156139b457600081556001016139be565b9056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374294642503a20494e53554646494349454e545f4c49515549444954595f4255524e45444642503a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a72315820ae8673140adda280e556feb7be99c874b0432dcf716ddd6b652ffe91c05efecf64736f6c63430005100032a265627a7a7231582034be6a9f3f770a48a2edef26dfb459f25d5cb0a0831e7d139a5bded11433211364736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d14610207578063ca22297914610258578063e5e31b13146102b3578063f46901ed146102fa576100df565b8063787dce3d146101ad578063a2e74af6146101cc578063b0e21e8a146101ff576100df565b80631e3dd18b116100bd5780631e3dd18b1461016e5780634b75f54f1461018b578063574f2ba314610193576100df565b8063017e7e58146100e4578063094b74151461011557806314572adb1461011d575b600080fd5b6100ec61032d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100ec610349565b6100ec6004803603608081101561013357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516610365565b6100ec6004803603602081101561018457600080fd5b5035610a3a565b6100ec610a6e565b61019b610a8a565b60408051918252519081900360200190f35b6101ca600480360360208110156101c357600080fd5b5035610a90565b005b6101ca600480360360208110156101e257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ba3565b61019b610c70565b6100ec6004803603608081101561021d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516610c76565b61028b6004803603602081101561026e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d82565b6040805163ffffffff9485168152928416602084015292168183015290519081900360600190f35b6102e6600480360360208110156102c957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610df5565b604080519115158252519081900360200190f35b6101ca6004803603602081101561031057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e29565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561040257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4642503a204944454e544943414c5f4144445245535345530000000000000000604482015290519081900360640190fd5b60028363ffffffff1610158015610420575060628363ffffffff1611155b801561042d575060018316155b61049857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4642503a20494e56414c49445f544f4b454e5f57454947485400000000000000604482015290519081900360640190fd5b60058263ffffffff16101580156104b757506103e88263ffffffff1611155b80156104d25750600563ffffffff83160663ffffffff166000145b61053d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4642503a20494e56414c49445f535741505f4645450000000000000000000000604482015290519081900360640190fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161061058057868887606403610584565b8787875b9194509250905073ffffffffffffffffffffffffffffffffffffffff831661060d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4642503a205a45524f5f41444452455353000000000000000000000000000000604482015290519081900360640190fd5b60606040518060200161061f90610ef6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408181527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606088811b82166020858101919091529088901b90911660348401527fffffffff0000000000000000000000000000000000000000000000000000000060e087811b821660488601528b901b16604c8401528151603081850301815260509093018252825192810192909220600081815260049093529120549192509073ffffffffffffffffffffffffffffffffffffffff161561077257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4642503a20504149525f45584953545300000000000000000000000000000000604482015290519081900360640190fd5b808251602084016000f5604080517fd0f6957900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015263ffffffff80881660448401528b16606483015291519298509088169163d0f695799160848082019260009290919082900301818387803b15801561080c57600080fd5b505af1158015610820573d6000803e3d6000fd5b50505050856004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060058690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008763ffffffff16905060208463ffffffff1667ffffffffffffffff16901b8117905080600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc42889878c600580549050604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff16815260200182815260200194505050505060405180910390a3505050505050949350505050565b60058181548110610a4757fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60055490565b60035473ffffffffffffffffffffffffffffffffffffffff163314610b1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4642503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b801580610b3357506127108110158015610b335750620186a08111155b610b9e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4642503a20496e76616c69642050726f746f636f6c2066656500000000000000604482015290519081900360640190fd5b600255565b60035473ffffffffffffffffffffffffffffffffffffffff163314610c2957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4642503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025481565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610610cba57868887606403610cbe565b8787875b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b81166020808401919091529490951b90941660348501527fffffffff0000000000000000000000000000000000000000000000000000000060e092831b811660488601529890911b909716604c830152865160308184030181526050909201875281519181019190912060009081526004909152949094205473ffffffffffffffffffffffffffffffffffffffff16979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120548190819067ffffffffffffffff168015610ddb5780915060208167ffffffffffffffff16901c9350836064039250610dec565b506032925082915060199050610dee565b505b9193909250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205467ffffffffffffffff16151590565b60035473ffffffffffffffffffffffffffffffffffffffff163314610eaf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4642503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b613ad780610f048339019056fe60806040526001600d5534801561001557600080fd5b50600780546001600160a01b03191633179055613aa0806100376000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063c45a0155116100a2578063d505accf11610071578063d505accf14610665578063d54a8d18146106c3578063dd62ed3e146106f8578063fff6cae914610733576101da565b8063c45a0155146105e3578063d0f69579146105eb578063d21220a71461063c578063d4cadf6814610644576101da565b806395d89b41116100de57806395d89b4114610567578063a9059cbb1461056f578063ba9a7a56146105a8578063bc25cf77146105b0576101da565b806370a08231146104b55780637ecebe00146104e857806389afcb441461051b576101da565b806330adf81f1161017c5780634b75f54f1161014b5780634b75f54f1461046a5780635909c0d5146104725780635a3d54931461047a5780636a62784214610482576101da565b806330adf81f14610411578063313ce5671461041957806332bfe469146104375780633644e51514610462576101da565b8063095ea7b3116101b8578063095ea7b3146103365780630dfe16811461038357806318160ddd146103b457806323b872dd146103ce576101da565b8063022c0d9f146101df57806306fdde031461027a5780630902f1ac146102f7575b600080fd5b610278600480360360808110156101f557600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561023957600080fd5b82018360208201111561024b57600080fd5b8035906020019184600183028401116401000000008311171561026d57600080fd5b50909250905061073b565b005b6102826110fe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102bc5781810151838201526020016102a4565b50505050905090810190601f1680156102e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ff6111aa565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b61036f6004803603604081101561034c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356111ff565b604080519115158252519081900360200190f35b61038b611216565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103bc611232565b60408051918252519081900360200190f35b61036f600480360360608110156103e457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611238565b6103bc611317565b61042161133b565b6040805160ff9092168252519081900360200190f35b61043f611340565b6040805163ffffffff938416815291909216602082015281519081900390910190f35b6103bc611372565b61038b611378565b6103bc611394565b6103bc61139a565b6103bc6004803603602081101561049857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166113a0565b6103bc600480360360208110156104cb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661171f565b6103bc600480360360208110156104fe57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611731565b61054e6004803603602081101561053157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611743565b6040805192835260208301919091528051918290030190f35b610282611b9b565b61036f6004803603604081101561058557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611c13565b6103bc611c20565b610278600480360360208110156105c657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611c26565b61038b611e1c565b6102786004803603608081101561060157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169063ffffffff60408201358116916060013516611e38565b61038b612561565b61064c61257d565b6040805163ffffffff9092168252519081900360200190f35b610278600480360360e081101561067b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612589565b6106cb612855565b604080516dffffffffffffffffffffffffffff938416815291909216602082015281519081900390910190f35b6103bc6004803603604081101561070e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612882565b61027861289f565b600d546001146107ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55841515806107bf5750600084115b61082a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4642503a20494e53554646494349454e545f4f55545055545f414d4f554e5400604482015290519081900360640190fd5b600a546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041681871080156108715750806dffffffffffffffffffffffffffff1686105b6108dc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4642503a20494e53554646494349454e545f4c49515549444954590000000000604482015290519081900360640190fd5b600854600954600091829173ffffffffffffffffffffffffffffffffffffffff91821691908116908916821480159061094157508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b6109ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4642503a20494e56414c49445f544f0000000000000000000000000000000000604482015290519081900360640190fd5b8a156109bd576109bd828a8d612a85565b89156109ce576109ce818a8c612a85565b8615610ab0578873ffffffffffffffffffffffffffffffffffffffff166310d1e85c338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506040513d6020811015610b4657600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d6020811015610be257600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610c0c576000610c22565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610c46576000610c5c565b89856dffffffffffffffffffffffffffff160383035b90506000821180610c6d5750600081115b610cd857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4642503a20494e53554646494349454e545f494e5055545f414d4f554e540000604482015290519081900360640190fd5b6000610cec8561271063ffffffff612c9216565b90506000610d028561271063ffffffff612c9216565b90508315610d9e57601054600090610d2590869063ffffffff90811690612c9216565b9050610d37838263ffffffff612d1816565b600f54909350610d5d906dffffffffffffffffffffffffffff168263ffffffff612d8a16565b600f80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b8215610e3957601054600090610dbf90859063ffffffff90811690612c9216565b9050610dd1828263ffffffff612d1816565b600f54909250610e03906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1682612d8a565b600f600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600f547c0100000000000000000000000000000000000000000000000000000000900463ffffffff166032811415610f2457610ea26305f5e100610e966dffffffffffffffffffffffffffff8c8116908c1663ffffffff612c9216565b9063ffffffff612c9216565b610eb2848463ffffffff612c9216565b1015610f1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4642503a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61107c565b600e5473ffffffffffffffffffffffffffffffffffffffff166379c91b37610f646dffffffffffffffffffffffffffff8c1661271063ffffffff612c9216565b610f866dffffffffffffffffffffffffffff8c1661271063ffffffff612c9216565b8686866040518663ffffffff1660e01b8152600401808681526020018581526020018481526020018381526020018263ffffffff1663ffffffff1681526020019550505050505060206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d602081101561100f57600080fd5b505161107c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4642503a204b0000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50505061108b84848888612dfc565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b6000805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156111a25780601f10611177576101008083540402835291602001916111a2565b820191906000526020600020905b81548152906001019060200180831161118557829003601f168201915b505050505081565b600a546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b600061120c338484613108565b5060015b92915050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146113025773ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020546112d0908363ffffffff612d1816565b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602090815260408083203384529091529020555b61130d848484613177565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600f547c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690606482900390565b60055481565b600e5473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b600c5481565b6000600d5460011461141357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d819055806114236111aa565b50600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561149d57600080fd5b505afa1580156114b1573d6000803e3d6000fd5b505050506040513d60208110156114c757600080fd5b5051600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561154057600080fd5b505afa158015611554573d6000803e3d6000fd5b505050506040513d602081101561156a57600080fd5b505190506000611590836dffffffffffffffffffffffffffff871663ffffffff612d1816565b905060006115b4836dffffffffffffffffffffffffffff871663ffffffff612d1816565b90506115c08686613258565b5060025480611607576115f36103e86115e76115e2868663ffffffff612c9216565b613612565b9063ffffffff612d1816565b975061160260006103e8613664565b611664565b6116616dffffffffffffffffffffffffffff881661162b858463ffffffff612c9216565b8161163257fe5b046dffffffffffffffffffffffffffff8816611654858563ffffffff612c9216565b8161165b57fe5b04613715565b97505b600088116116bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613a4a6022913960400191505060405180910390fd5b6116c78989613664565b6116d385858989612dfc565b6040805184815260208101849052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d55509395945050505050565b60036020526000908152604090205481565b60066020526000908152604090205481565b600080600d546001146117b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d819055806117c76111aa565b50600854600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b15801561184957600080fd5b505afa15801561185d573d6000803e3d6000fd5b505050506040513d602081101561187357600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b1580156118e757600080fd5b505afa1580156118fb573d6000803e3d6000fd5b505050506040513d602081101561191157600080fd5b5051306000908152600360205260409020549091506119308787613258565b5060025480611945838663ffffffff612c9216565b8161194c57fe5b04995080611960838563ffffffff612c9216565b8161196757fe5b04985060008a11801561197a5750600089115b6119cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613a286022913960400191505060405180910390fd5b6119d9308361372d565b6119e4868c8c612a85565b6119ef858c8b612a85565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8816916370a08231916024808301926020929190829003018186803b158015611a5b57600080fd5b505afa158015611a6f573d6000803e3d6000fd5b505050506040513d6020811015611a8557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8716916370a0823191602480820192602092909190829003018186803b158015611af757600080fd5b505afa158015611b0b573d6000803e3d6000fd5b505050506040513d6020811015611b2157600080fd5b50519250611b3184848a8a612dfc565b604080518b8152602081018b9052815173ffffffffffffffffffffffffffffffffffffffff8e169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a350505050505050506001600d81905550915091565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156111a25780601f10611177576101008083540402835291602001916111a2565b600061120c338484613177565b6103e881565b600d54600114611c9757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600854600954600a54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9485169490931692611d739285928792611d6e926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b158015611d3657600080fd5b505afa158015611d4a573d6000803e3d6000fd5b505050506040513d6020811015611d6057600080fd5b50519063ffffffff612d1816565b612a85565b600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611e129284928792611d6e926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b158015611d3657600080fd5b50506001600d5550565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff163314611ebe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4642503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b60608473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611f0657600080fd5b505afa158015611f1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015611f6157600080fd5b8101908080516040519392919084640100000000821115611f8157600080fd5b908301906020820185811115611f9657600080fd5b8251640100000000811182820188101715611fb057600080fd5b82525081516020918201929091019080838360005b83811015611fdd578181015183820152602001611fc5565b50505050905090810190601f16801561200a5780820380516001836020036101000a031916815260200191505b50604052505050905060608473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561205b57600080fd5b505afa15801561206f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156120b657600080fd5b81019080805160405193929190846401000000008211156120d657600080fd5b9083019060208201858111156120eb57600080fd5b825164010000000081118282018810171561210557600080fd5b82525081516020918201929091019080838360005b8381101561213257818101518382015260200161211a565b50505050905090810190601f16801561215f5780820380516001836020036101000a031916815260200191505b5060405250505090506123bd82826040516020018083805190602001908083835b602083106121bd57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612180565b6001836020036101000a038019825116818451168082178552505050505050905001807f2f0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b6020831061225057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612213565b6001836020036101000a038019825116818451168082178552505050505050905001807f2056616c7565204c5000000000000000000000000000000000000000000000008152506009019250505060405160208183030381529060405283836040516020018083805190602001908083835b602083106122ff57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016122c2565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905285519190930192850191508083835b6020831061238357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612346565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526137f1565b6008805473ffffffffffffffffffffffffffffffffffffffff8089167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600980548884169216919091179055600f805463ffffffff8088167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90921691909117909155601080549186167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909216919091179055600754604080517f4b75f54f00000000000000000000000000000000000000000000000000000000815290519190921691634b75f54f916004808301926020929190829003018186803b1580156124e957600080fd5b505afa1580156124fd573d6000803e3d6000fd5b505050506040513d602081101561251357600080fd5b5051600e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055505050505050565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b60105463ffffffff1690565b428410156125f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4642503a20455850495245440000000000000000000000000000000000000000604482015290519081900360640190fd5b60055473ffffffffffffffffffffffffffffffffffffffff80891660008181526006602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015612759573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906127d457508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61283f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4642503a20494e56414c49445f5349474e415455524500000000000000000000604482015290519081900360640190fd5b61284a898989613108565b505050505050505050565b600f546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b600460209081526000928352604080842090915290825290205481565b600d5460011461291057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4642503a204c4f434b4544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600854604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051612a7e9273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b15801561298757600080fd5b505afa15801561299b573d6000803e3d6000fd5b505050506040513d60208110156129b157600080fd5b5051600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612a2457600080fd5b505afa158015612a38573d6000803e3d6000fd5b505050506040513d6020811015612a4e57600080fd5b5051600a546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612dfc565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310612b8b57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612b4e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612bed576040519150601f19603f3d011682016040523d82523d6000602084013e612bf2565b606091505b5091509150818015612c20575080511580612c205750808060200190516020811015612c1d57600080fd5b50515b612c8b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4642503a205452414e534645525f4641494c4544000000000000000000000000604482015290519081900360640190fd5b5050505050565b6000811580612cad57505080820282828281612caa57fe5b04145b61121057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b8082038281111561121057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b8082018281101561121057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b600f5463ffffffff7c01000000000000000000000000000000000000000000000000000000009091048116906dffffffffffffffffffffffffffff6064839003909116860211801590612e6557506dffffffffffffffffffffffffffff63ffffffff8216850211155b612ed057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4642503a204f564552464c4f5700000000000000000000000000000000000000604482015290519081900360640190fd5b600a5463ffffffff428116917c010000000000000000000000000000000000000000000000000000000090048116820390811615801590612f2057506dffffffffffffffffffffffffffff851615155b8015612f3b57506dffffffffffffffffffffffffffff841615155b15612ffd5763ffffffff606484900381168602908085168602908316612f8e83612f64846138d5565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff6138f916565b600b80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8316612fce82612f64856138d5565b600c80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905550505b600a80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff898116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008983168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a150505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020546131ad908263ffffffff612d1816565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526003602052604080822093909355908416815220546131ef908263ffffffff612d8a16565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c357600080fd5b505afa1580156132d7573d6000803e3d6000fd5b505050506040513d60208110156132ed57600080fd5b5051600754604080517fb0e21e8a000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163b0e21e8a91600480820192602092909190829003018186803b15801561336057600080fd5b505afa158015613374573d6000803e3d6000fd5b505050506040513d602081101561338a57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff83161515935090506000806133b4612855565b915091506000836dffffffffffffffffffffffffffff161180156133d55750845b801561340b57506000826dffffffffffffffffffffffffffff16118061340b57506000816dffffffffffffffffffffffffffff16115b1561358a57600f54600e546002547c010000000000000000000000000000000000000000000000000000000090920463ffffffff169160009173ffffffffffffffffffffffffffffffffffffffff16906392aec23c908b8b8660648190036dffffffffffffffffffffffffffff8c8116908c168161348557fe5b048c6dffffffffffffffffffffffffffff168b6dffffffffffffffffffffffffffff16816134af57fe5b6040805160e08b901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101999099526dffffffffffffffffffffffffffff97881660248a0152958716604489015263ffffffff9485166064890152929093166084870152841660a48601520490911660c48301525160e4808301926020929190829003018186803b15801561354957600080fd5b505afa15801561355d573d6000803e3d6000fd5b505050506040513d602081101561357357600080fd5b505190508015613587576135878682613664565b50505b6dffffffffffffffffffffffffffff8216156135c957600f80547fffffffffffffffffffffffffffffffffffff00000000000000000000000000001690555b6dffffffffffffffffffffffffffff81161561360857600f80547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff1690555b5050505092915050565b60006003821115613655575080600160028204015b8181101561364f5780915060028182858161363e57fe5b04018161364757fe5b049050613627565b5061365f565b811561365f575060015b919050565b600254613677908263ffffffff612d8a16565b60025573ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020546136b0908263ffffffff612d8a16565b73ffffffffffffffffffffffffffffffffffffffff831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106137245781613726565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054613763908263ffffffff612d1816565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604090205560025461379c908263ffffffff612d1816565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b815161380490600090602085019061393a565b50805161381890600190602084019061393a565b5060405146908060526139d682396040805191829003605201822086516020978801208383018352600184527f310000000000000000000000000000000000000000000000000000000000000093880193909352815180880191909152808201929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606083015260808201939093523060a0808301919091528351808303909101815260c090910190925250805192019190912060055550565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff84168161393257fe5b049392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061397b57805160ff19168380011785556139a8565b828001600101855582156139a8579182015b828111156139a857825182559160200191906001019061398d565b506139b49291506139b8565b5090565b6139d291905b808211156139b457600081556001016139be565b9056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374294642503a20494e53554646494349454e545f4c49515549444954595f4255524e45444642503a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a72315820ae8673140adda280e556feb7be99c874b0432dcf716ddd6b652ffe91c05efecf64736f6c63430005100032a265627a7a7231582034be6a9f3f770a48a2edef26dfb459f25d5cb0a0831e7d139a5bded11433211364736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 390,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 392,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 394,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 396,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 400,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 403,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 407,
        "contract": "contracts/FireBirdFactory.sol:FireBirdFactory",
        "label": "_pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}