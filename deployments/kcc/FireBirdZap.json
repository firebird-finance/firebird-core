{
  "address": "0x43659Cd896e93620aEcC5e74A4e3b76F98ff3Dfc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "_uniRouter",
          "type": "address"
        },
        {
          "internalType": "contract IFireBirdRouter",
          "name": "_fireBirdRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "LogGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtLp",
          "type": "uint256"
        }
      ],
      "name": "ZapIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtLp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtTo",
          "type": "uint256"
        }
      ],
      "name": "ZapOut",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addTokensResidual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireBirdFactory",
      "outputs": [
        {
          "internalType": "contract IFireBirdFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireBirdFormula",
      "outputs": [
        {
          "internalType": "contract IFireBirdFormula",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fireBirdPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fireBirdRouter",
      "outputs": [
        {
          "internalType": "contract IFireBirdRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "getAmountBToZapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountBConverted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountASell",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        }
      ],
      "name": "getAmountToZapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOtherSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToConverted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToOrigin",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxResidual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_input",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_pair",
          "type": "address[]"
        }
      ],
      "name": "setFireBirdPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxResidual",
          "type": "uint256"
        }
      ],
      "name": "setMaxResidual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensResidual",
          "type": "address[]"
        }
      ],
      "name": "setTokensResidual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensResidual",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTokenB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minLp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transferResidual",
          "type": "bool"
        }
      ],
      "name": "zapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "transferResidual",
          "type": "bool"
        }
      ],
      "name": "zapInToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensRec",
          "type": "uint256"
        }
      ],
      "name": "zapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensRec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "zapOutWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e5b7cec2ae2656234fe60f9f2b81c380810d72caceadd285e12014b787a2802",
  "receipt": {
    "to": null,
    "from": "0x0FFaD0c8b6acB224999e41e8229D0De90f914832",
    "contractAddress": "0x43659Cd896e93620aEcC5e74A4e3b76F98ff3Dfc",
    "transactionIndex": 0,
    "gasUsed": "4968745",
    "logsBloom": "0x
    "blockHash": "0x17eaa5aeee733a13a3676d38c1544257e2c1cc92275391d6aa9391ebaf790f5e",
    "transactionHash": "0x0e5b7cec2ae2656234fe60f9f2b81c380810d72caceadd285e12014b787a2802",
    "logs": [],
    "blockNumber": 1173209,
    "cumulativeGasUsed": "4968745",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc0fFee0000C824D24E0F280f1e4D21152625742b",
    "0x4BFBf7fCC9776CE8285B059fB77e7Bb2A5c5E365"
  ],
  "solcInputHash": "e39826d3f1b3e76af59c601f16223594",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"contract IFireBirdRouter\",\"name\":\"_fireBirdRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"LogGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtLp\",\"type\":\"uint256\"}],\"name\":\"ZapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtTo\",\"type\":\"uint256\"}],\"name\":\"ZapOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addTokensResidual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdFactory\",\"outputs\":[{\"internalType\":\"contract IFireBirdFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdFormula\",\"outputs\":[{\"internalType\":\"contract IFireBirdFormula\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fireBirdPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fireBirdRouter\",\"outputs\":[{\"internalType\":\"contract IFireBirdRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getAmountBToZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountASell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"getAmountToZapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOtherSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToOrigin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxResidual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pair\",\"type\":\"address[]\"}],\"name\":\"setFireBirdPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxResidual\",\"type\":\"uint256\"}],\"name\":\"setMaxResidual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensResidual\",\"type\":\"address[]\"}],\"name\":\"setTokensResidual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensResidual\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"}],\"name\":\"zapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"}],\"name\":\"zapInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"zapOutWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FireBirdZap.sol\":\"FireBirdZap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/FireBirdZap.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IFireBirdRouterLite.sol\\\";\\nimport \\\"./interfaces/IFireBirdFactory.sol\\\";\\nimport \\\"./interfaces/IFireBirdPair.sol\\\";\\nimport \\\"./interfaces/IFireBirdFormula.sol\\\";\\nimport './libraries/TransferHelper.sol';\\nimport \\\"./libraries/Babylonian.sol\\\";\\n\\ncontract FireBirdZap is ReentrancyGuard {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public governance;\\n    address public WBNB;\\n    address private constant BNB_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    IUniswapV2Router public uniRouter;\\n    IFireBirdRouter public fireBirdRouter;\\n    IFireBirdFactory public fireBirdFactory;\\n    IFireBirdFormula public fireBirdFormula;\\n\\n    mapping(address => mapping(address => address[])) public fireBirdPairs; // [input -> output] => fireBird pair\\n    uint public maxResidual = 100; // 1%, set 10000 to disable\\n    address[] public tokensResidual;\\n\\n    event ZapIn(address indexed sender, address from, uint256 amtFrom, address pool, uint256 amtLp);\\n    event ZapOut(address indexed sender, address pool, uint256 amtLp, address to, uint256 amtTo);\\n    event Withdraw(address indexed token, uint256 amount, address to);\\n    event LogGovernance(address governance);\\n\\n    receive() external payable {\\n        require(msg.sender != tx.origin, \\\"Zap: Do not send ETH directly\\\");\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"Zap: !governance\\\");\\n        _;\\n    }\\n\\n    constructor(IUniswapV2Router _uniRouter, IFireBirdRouter _fireBirdRouter) public {\\n        governance = msg.sender;\\n        uniRouter = _uniRouter;\\n        fireBirdRouter = _fireBirdRouter;\\n        fireBirdFactory = IFireBirdFactory(_fireBirdRouter.factory());\\n        fireBirdFormula = IFireBirdFormula(_fireBirdRouter.formula());\\n        WBNB = _fireBirdRouter.WETH();\\n    }\\n\\n    /* ========== External Functions ========== */\\n\\n    // _to: must be a pair lp\\n    // _from: must be in lp\\n    // _amounts: amount_from, _minTokenB, _minLp\\n    function zapInToken(address _from, uint[] calldata amounts, address _to, bool transferResidual) external nonReentrant returns (uint256 lpAmt) {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amounts[0]);\\n        _approveTokenIfNeeded(_from);\\n\\n        if (_from == IFireBirdPair(_to).token0() || _from == IFireBirdPair(_to).token1()) {\\n            // swap half amount for other\\n            address other;\\n            uint256 sellAmount;\\n            {\\n                address token0 = IFireBirdPair(_to).token0();\\n                address token1 = IFireBirdPair(_to).token1();\\n                other = _from == token0 ? token1 : token0;\\n                sellAmount = calculateSwapInAmount(_to, _from, amounts[0], token0);\\n            }\\n            uint otherAmount = _swap(_from, sellAmount, other, address(this), _to);\\n            require(otherAmount >= amounts[1], \\\"Zap: Insufficient Receive Amount\\\");\\n\\n            lpAmt = _pairDeposit(_to, _from, other, amounts[0].sub(sellAmount), otherAmount, msg.sender, fireBirdFactory.isPair(_to), transferResidual);\\n        } else {\\n            uint bnbAmount = _swapTokenForBNB(_from, amounts[0], address(this), address(0));\\n            lpAmt = _swapBNBToLp(IFireBirdPair(_to), bnbAmount, msg.sender, 0, transferResidual);\\n        }\\n\\n        require(lpAmt >= amounts[2], \\\"Zap: High Slippage In\\\");\\n        emit ZapIn(msg.sender, _from, amounts[0], _to, lpAmt);\\n        return lpAmt;\\n    }\\n\\n    // _to: must be a pair lp\\n    function zapIn(address _to, uint _minTokenB, uint _minLp, bool transferResidual) external payable nonReentrant returns (uint256) {\\n        uint256 lpAmt = _swapBNBToLp(IFireBirdPair(_to), msg.value, msg.sender, _minTokenB, transferResidual);\\n        require(lpAmt >= _minLp, \\\"Zap: High Slippage In\\\");\\n        emit ZapIn(msg.sender, WBNB, msg.value, _to, lpAmt);\\n        return lpAmt;\\n    }\\n\\n    // _from: must be a pair lp\\n    // _toToken: must be in lp\\n    function zapOut(address _from, uint amount, address _toToken, uint256 _minTokensRec) public nonReentrant returns (uint256) {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from);\\n\\n        address token0;\\n        address token1;\\n        uint256 amountA;\\n        uint256 amountB;\\n        {\\n            IFireBirdPair pair = IFireBirdPair(_from);\\n            token0 = pair.token0();\\n            token1 = pair.token1();\\n            bool isfireBirdPair = fireBirdFactory.isPair(_from);\\n            if (isfireBirdPair) {\\n                (amountA, amountB) = fireBirdRouter.removeLiquidity(_from, token0, token1, amount, 1, 1, address(this), block.timestamp);\\n            } else {\\n                (amountA, amountB) = uniRouter.removeLiquidity(token0, token1, amount, 1, 1, address(this), block.timestamp);\\n            }\\n        }\\n\\n        uint256 tokenBought;\\n        _approveTokenIfNeeded(token0);\\n        _approveTokenIfNeeded(token1);\\n        if (_toToken == BNB_ADDRESS) {\\n            address _lpOfFromAndTo = WBNB == token0 || WBNB == token1 ? _from : address(0);\\n            tokenBought = _swapTokenForBNB(token0, amountA, address(this), _lpOfFromAndTo);\\n            tokenBought = tokenBought.add(_swapTokenForBNB(token1, amountB, address(this), _lpOfFromAndTo));\\n        } else {\\n            address _lpOfFromAndTo = _toToken == token0 || _toToken == token1 ? _from : address(0);\\n            tokenBought = _swap(token0, amountA, _toToken, address(this), _lpOfFromAndTo);\\n            tokenBought = tokenBought.add(_swap(token1, amountB, _toToken, address(this), _lpOfFromAndTo));\\n        }\\n\\n        require(tokenBought >= _minTokensRec, \\\"Zap: High Slippage Out\\\");\\n        if (_toToken == BNB_ADDRESS) {\\n            TransferHelper.safeTransferETH(msg.sender, tokenBought);\\n        } else {\\n            IERC20(_toToken).safeTransfer(msg.sender, tokenBought);\\n        }\\n\\n        emit ZapOut(msg.sender, _from, amount, _toToken, tokenBought);\\n        return tokenBought;\\n    }\\n\\n    function zapOutWithPermit(\\n        address _from,\\n        uint256 amount,\\n        address _toToken,\\n        uint256 _minTokensRec,\\n        uint256 _approvalAmount,\\n        uint256 _deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256) {\\n        // permit\\n        IFireBirdPair(_from).permit(\\n            msg.sender,\\n            address(this),\\n            _approvalAmount,\\n            _deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return zapOut(_from, amount, _toToken, _minTokensRec);\\n    }\\n\\n    /* ========== View Functions ===========*/\\n    // _from: token A\\n    // return amount B that will be convert from A to perform zap in\\n    // return amount A that will be convert to B to perform zap in\\n    function getAmountBToZapIn(address _from, uint _fromAmount, address lp) external view returns (uint256 amountBConverted, uint256 amountASell) {\\n        address other;\\n        uint sellAmount;\\n        {\\n            IFireBirdPair pair = IFireBirdPair(lp);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            other = _from == token0 ? token1 : token0;\\n            sellAmount = calculateSwapInAmount(lp, _from, _fromAmount, token0);\\n        }\\n\\n        address[] memory path = new address[](1);\\n        path[0] = lp;\\n        uint[] memory amounts = fireBirdFormula.getFactoryAmountsOut(address(fireBirdFactory), _from, other, sellAmount, path);\\n        return (amounts[amounts.length - 1], sellAmount);\\n    }\\n\\n    // _from: lp pair\\n    // return amountOtherSell _otherToken that will be removed from pair\\n    // return amountToConverted _toToken that will be converted from other\\n    // return amountToOrigin _toToken that will be removed from pair\\n    function getAmountToZapOut(address _from, uint amount, address _toToken) external view\\n    returns (uint256 amountOtherSell, uint256 amountToConverted, uint256 amountToOrigin) {\\n        address other;\\n        {\\n            IFireBirdPair pair = IFireBirdPair(_from);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            other = _toToken == token0 ? token1 : token0;\\n        }\\n        uint sellAmount;\\n        uint amountToRemoved;\\n        {\\n            uint _totalSupply = IERC20(_from).totalSupply();\\n            sellAmount = amount.mul(IERC20(other).balanceOf(_from)) / _totalSupply;\\n            amountToRemoved = amount.mul(IERC20(_toToken).balanceOf(_from)) / _totalSupply;\\n        }\\n\\n        uint _amountOut = _getRemovedReserveAmountOut(_from, other, sellAmount, amountToRemoved);\\n        return (sellAmount, _amountOut, amountToRemoved);\\n    }\\n\\n    function calculateSwapInAmount(address pair, address tokenIn, uint256 userIn, address pairToken0) internal view returns (uint256) {\\n        (uint32 tokenWeight0, uint32 tokenWeight1,) = fireBirdFactory.getWeightsAndSwapFee(pair);\\n\\n        if (tokenWeight0 == 50) {\\n            (uint256 res0, uint256 res1,) = IFireBirdPair(pair).getReserves();\\n            uint reserveIn = tokenIn == pairToken0 ? res0 : res1;\\n            return Babylonian\\n                .sqrt(reserveIn.mul(userIn.mul(3988000) + reserveIn.mul(3988009)))\\n                .sub(reserveIn.mul(1997)) / 1994;\\n        } else {\\n            uint256 otherWeight = tokenIn == pairToken0 ? uint(tokenWeight1) : uint(tokenWeight0);\\n            return userIn.mul(otherWeight).div(100);\\n        }\\n    }\\n\\n    /* ========== Private Functions ========== */\\n    function _getRemovedReserveAmountOut(address pair, address tokenIn, uint sellAmount, uint amountToRemoved) internal view returns (uint) {\\n        (, uint reserveIn, uint reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) =\\n        fireBirdFormula.getFactoryReserveAndWeights(address(fireBirdFactory), pair, tokenIn);\\n        return fireBirdFormula.getAmountOut(sellAmount, reserveIn.sub(sellAmount), reserveOut.sub(amountToRemoved), tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    function _approveTokenIfNeeded(address token) private {\\n        if (IERC20(token).allowance(address(this), address(uniRouter)) == 0) {\\n            IERC20(token).safeApprove(address(uniRouter), uint(~0));\\n        }\\n        if (IERC20(token).allowance(address(this), address(fireBirdRouter)) == 0) {\\n            IERC20(token).safeApprove(address(fireBirdRouter), uint(~0));\\n        }\\n    }\\n\\n    function _pairDeposit(\\n        address _pair,\\n        address _poolToken0,\\n        address _poolToken1,\\n        uint256 token0Bought,\\n        uint256 token1Bought,\\n        address receiver,\\n        bool isfireBirdPair,\\n        bool transferResidual\\n    ) internal returns (uint256 lpAmt) {\\n        _approveTokenIfNeeded(_poolToken0);\\n        _approveTokenIfNeeded(_poolToken1);\\n\\n        uint256 amountA;\\n        uint256 amountB;\\n        if (isfireBirdPair) {\\n            (amountA, amountB, lpAmt) = fireBirdRouter.addLiquidity(_pair, _poolToken0, _poolToken1, token0Bought, token1Bought, 1, 1, receiver, block.timestamp);\\n        } else {\\n            (amountA, amountB, lpAmt) = uniRouter.addLiquidity(_poolToken0, _poolToken1, token0Bought, token1Bought, 1, 1, receiver, block.timestamp);\\n        }\\n\\n        uint amountAResidual = token0Bought.sub(amountA);\\n        if (transferResidual || amountAResidual > token0Bought.mul(maxResidual).div(10000)) {\\n            if (amountAResidual > 0) {\\n                //Returning Residue in token0, if any.\\n                _transferToken(_poolToken0, msg.sender, amountAResidual);\\n            }\\n        }\\n\\n        uint amountBRedisual = token1Bought.sub(amountB);\\n        if (transferResidual || amountBRedisual > token1Bought.mul(maxResidual).div(10000)) {\\n            if (amountBRedisual > 0) {\\n                //Returning Residue in token1, if any\\n                _transferToken(_poolToken1, msg.sender, amountBRedisual);\\n            }\\n        }\\n\\n        return lpAmt;\\n    }\\n\\n    function _swapBNBToLp(IFireBirdPair pair, uint amount, address receiver, uint _minTokenB, bool transferResidual) private returns (uint256 lpAmt) {\\n        address lp = address(pair);\\n\\n        // Lp\\n        if (pair.token0() == WBNB || pair.token1() == WBNB) {\\n            address token = pair.token0() == WBNB ? pair.token1() : pair.token0();\\n            uint swapValue = calculateSwapInAmount(lp, WBNB, amount, pair.token0());\\n            uint tokenAmount = _swapBNBForToken(token, swapValue, address(this), lp);\\n            require(tokenAmount >= _minTokenB, \\\"Zap: Insufficient Receive Amount\\\");\\n\\n            uint256 wbnbAmount = amount.sub(swapValue);\\n            IWETH(WBNB).deposit{value : wbnbAmount}();\\n            lpAmt = _pairDeposit(lp, WBNB, token, wbnbAmount, tokenAmount, receiver, fireBirdFactory.isPair(lp), transferResidual);\\n        } else {\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            uint token0Amount;\\n            uint token1Amount;\\n            {\\n                (uint32 tokenWeight0,,) = fireBirdFactory.getWeightsAndSwapFee(lp);\\n                uint swap0Value = amount.mul(uint(tokenWeight0)).div(100);\\n                token0Amount = _swapBNBForToken(token0, swap0Value, address(this), address(0));\\n                token1Amount = _swapBNBForToken(token1, amount.sub(swap0Value), address(this), address(0));\\n            }\\n\\n            lpAmt = _pairDeposit(lp, token0, token1, token0Amount, token1Amount, receiver, fireBirdFactory.isPair(lp), transferResidual);\\n        }\\n    }\\n\\n    function _swapBNBForToken(address token, uint value, address _receiver, address lpBNBToken) private returns (uint) {\\n        if (token == WBNB) {\\n            IWETH(WBNB).deposit{value : value}();\\n            if (_receiver != address(this)) {\\n                IERC20(WBNB).safeTransfer(_receiver, value);\\n            }\\n            return value;\\n        }\\n        address[] memory path = fireBirdPairs[WBNB][token];\\n        uint[] memory amounts;\\n        if (path.length > 0) {\\n            amounts = fireBirdRouter.swapExactETHForTokens{value : value}(token, 1, path, _receiver, block.timestamp);\\n        } else if (lpBNBToken != address(0)) {\\n            path = new address[](1);\\n            path[0] = lpBNBToken;\\n            amounts = fireBirdRouter.swapExactETHForTokens{value : value}(token, 1, path, _receiver, block.timestamp);\\n        } else {\\n            revert(\\\"FireBirdZap: !path BNBToken\\\");\\n        }\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _swapTokenForBNB(address token, uint amount, address _receiver, address lpTokenBNB) private returns (uint) {\\n        if (token == WBNB) {\\n            _transferToken(WBNB, _receiver, amount);\\n            return amount;\\n        }\\n        address[] memory path = fireBirdPairs[token][WBNB];\\n        uint[] memory amounts;\\n        if (path.length > 0) {\\n            amounts = fireBirdRouter.swapExactTokensForETH(token, amount, 1, path, _receiver, block.timestamp);\\n        } else if (lpTokenBNB != address(0)) {\\n            path = new address[](1);\\n            path[0] = lpTokenBNB;\\n            amounts = fireBirdRouter.swapExactTokensForETH(token, amount, 1, path, _receiver, block.timestamp);\\n        } else {\\n            revert(\\\"FireBirdZap: !path TokenBNB\\\");\\n        }\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _swap(address _from, uint _amount, address _to, address _receiver, address _lpOfFromTo) internal returns (uint) {\\n        if (_from == _to) {\\n            if (_receiver != address(this)) {\\n                IERC20(_from).safeTransfer(_receiver, _amount);\\n            }\\n            return _amount;\\n        }\\n        address[] memory path = fireBirdPairs[_from][_to];\\n        uint[] memory amounts;\\n        if (path.length > 0) {// use fireBird\\n            amounts = fireBirdRouter.swapExactTokensForTokens(_from, _to, _amount, 1, path, _receiver, block.timestamp);\\n        } else if (_lpOfFromTo != address(0)) {\\n            path = new address[](1);\\n            path[0] = _lpOfFromTo;\\n            amounts = fireBirdRouter.swapExactTokensForTokens(_from, _to, _amount, 1, path, _receiver, block.timestamp);\\n        } else {\\n            revert(\\\"FireBirdZap: !path swap\\\");\\n        }\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _transferToken(address token, address to, uint amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (token == WBNB) {\\n            IWETH(WBNB).withdraw(amount);\\n            if (to != address(this)) {\\n                TransferHelper.safeTransferETH(to, amount);\\n            }\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n        return;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n    function withdraw(address to) external onlyGovernance {\\n        address[] memory _tokens = tokensResidual;\\n        withdrawToken(_tokens, to);\\n    }\\n\\n    function withdrawToken(address[] memory tokens, address to) public onlyGovernance {\\n        require(to != address(0), \\\"Zap: Invalid Receiver Address\\\");\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _withdraw(tokens[i], to);\\n        }\\n    }\\n\\n    function withdrawTokenAmount(address token, address to, uint256 amount) external onlyGovernance {\\n        require(to != address(0), \\\"Zap: Invalid Receiver Address\\\");\\n        IERC20(token).safeTransfer(to, amount);\\n        emit Withdraw(token, amount, to);\\n    }\\n\\n    function _withdraw(address _token, address _to) internal {\\n        if (_token == BNB_ADDRESS) {\\n            TransferHelper.safeTransferETH(_to, address(this).balance);\\n            emit Withdraw(_token, address(this).balance, _to);\\n            return;\\n        }\\n\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(_to, _balance);\\n        emit Withdraw(_token, _balance, _to);\\n    }\\n\\n    function setTokensResidual(address[] memory _tokensResidual) external onlyGovernance {\\n        tokensResidual = _tokensResidual;\\n    }\\n\\n    function addTokensResidual(address _token) external onlyGovernance {\\n        tokensResidual.push(_token);\\n    }\\n\\n    function setGovernance(address _governance) external onlyGovernance {\\n        governance = _governance;\\n        emit LogGovernance(governance);\\n    }\\n\\n    function setFireBirdPairs(address _input, address _output, address [] memory _pair) external onlyGovernance {\\n        fireBirdPairs[_input][_output] = _pair;\\n    }\\n\\n    function setMaxResidual(uint _maxResidual) external onlyGovernance {\\n        maxResidual = _maxResidual;\\n    }\\n}\\n\",\"keccak256\":\"0x20fcb280ecfbad5033b2e4e75a49f4dee627453994302de8850c8b840d190dd0\"},\"contracts/interfaces/IFireBirdFactory.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IFireBirdFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0xf877564655d8d582ea8cb43c2f1adbfa99175b60a0198ded0faffbe22fcd613f\"},\"contracts/interfaces/IFireBirdFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IFireBirdFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0xb25e0b384bada4a58243703a3d38e738dd58ea121c8cdc6b3e3fc6bd56a73b55\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IFireBirdPair.sol\":{\"content\":\"pragma solidity >=0.5.16;\\ninterface IFireBirdPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n    function getSwapFee() external view returns (uint32);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address, uint32, uint32) external;\\n}\\n\",\"keccak256\":\"0x770c213bb2620ee99eb32eb1140304457ca65653f5c4ce3b90d203a22f661015\"},\"contracts/interfaces/IFireBirdRouterLite.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\ninterface IFireBirdRouter {\\n    event Exchange(\\n        address pair,\\n        uint amountOut,\\n        address output\\n    );\\n    function factory() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(address tokenOut, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(address tokenIn, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(address tokenIn, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(address tokenOut, uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function createPair( address tokenA, address tokenB,uint amountA,uint amountB, uint32 tokenWeightA, uint32 swapFee, address to) external returns (uint liquidity);\\n    function createPairETH( address token, uint amountToken, uint32 tokenWeight, uint32 swapFee, address to) external payable returns (uint liquidity);\\n\\n    function removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n}\\n\",\"keccak256\":\"0xf9500d80a909d63c928977f819d1e696cc6f65f6eca2637d6cab91613dcbf980\"},\"contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x58e2fe2a56d9f254edd0980afc14b2430d0456b6dbbc5ef3efc802900d9fd23a\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee68d59a1c385a940a9e4fa1dc1e46fa3dd695168d0035cb8c879329cd13dd4e\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0xc47f6dffdb3d9b81be05c4ec7dec4a590677f255eaf2def29f1ec2c5144a7b44\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x771a09cfe236d26cfbfd1b048a0d68bd37710260efddfc9b175db51d8cd96b4f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1739,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1790,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1792,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "WBNB",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1800,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "uniRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IUniswapV2Router)6236"
      },
      {
        "astId": 1802,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IFireBirdRouter)5519"
      },
      {
        "astId": 1804,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IFireBirdFactory)4590"
      },
      {
        "astId": 1806,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdFormula",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IFireBirdFormula)4831"
      },
      {
        "astId": 1813,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "fireBirdPairs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 1816,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "maxResidual",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1819,
        "contract": "contracts/FireBirdZap.sol:FireBirdZap",
        "label": "tokensResidual",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IFireBirdFactory)4590": {
        "encoding": "inplace",
        "label": "contract IFireBirdFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IFireBirdFormula)4831": {
        "encoding": "inplace",
        "label": "contract IFireBirdFormula",
        "numberOfBytes": "20"
      },
      "t_contract(IFireBirdRouter)5519": {
        "encoding": "inplace",
        "label": "contract IFireBirdRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router)6236": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}