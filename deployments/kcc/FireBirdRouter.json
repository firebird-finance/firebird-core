{
  "address": "0x4BFBf7fCC9776CE8285B059fB77e7Bb2A5c5E365",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "output",
          "type": "address"
        }
      ],
      "name": "Exchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "createPairETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFireBirdRouter.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFireBirdRouter.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETHSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x43cd3bdca420d03ac548923cbd04abc6d00d9459aab2d4d44d80c0acdac4a0ec",
  "receipt": {
    "to": null,
    "from": "0x0FFaD0c8b6acB224999e41e8229D0De90f914832",
    "contractAddress": "0x4BFBf7fCC9776CE8285B059fB77e7Bb2A5c5E365",
    "transactionIndex": 1,
    "gasUsed": "4736613",
    "logsBloom": "0x
    "blockHash": "0xaa9130d6e362e869da0a6ed0c20cfca3b786d4d5885402edc4a9e6381eeba607",
    "transactionHash": "0x43cd3bdca420d03ac548923cbd04abc6d00d9459aab2d4d44d80c0acdac4a0ec",
    "logs": [],
    "blockNumber": 1173206,
    "cumulativeGasUsed": "4881467",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5De74546d3B86C8Df7FEEc30253865e1149818C8",
    "0x4446Fc4eb47f2f6586f9fAAb68B3498F86C07521"
  ],
  "solcInputHash": "d4e9bb2b88bc76f692f0666ab2cb4e6c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createPairETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IFireBirdRouter.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IFireBirdRouter.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FireBirdRouter.sol\":\"FireBirdRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/FireBirdRouter.sol\":{\"content\":\"pragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport './interfaces/IFireBirdFactory.sol';\\nimport './interfaces/IFireBirdFormula.sol';\\nimport './interfaces/IFireBirdPair.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IFireBirdRouter.sol';\\nimport './libraries/SafeMath.sol';\\nimport './interfaces/IWETH.sol';\\ncontract FireBirdRouter is IFireBirdRouter {\\n    using SafeMath for uint;\\n    address public immutable override factory;\\n    address public immutable override formula;\\n    address public immutable override WETH;\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, 'Router: EXPIRED');\\n        _;\\n    }\\n    constructor(address _factory, address _WETH) public {\\n        factory = _factory;\\n        formula = IFireBirdFactory(_factory).formula();\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n        // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** ADD LIQUIDITY ****\\n    function _addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) internal virtual returns (uint amountA, uint amountB) {\\n        (uint reserveA, uint reserveB) = IFireBirdFormula(formula).getReserves(pair, tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint amountBOptimal = IFireBirdFormula(formula).quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, 'Router: INSUFFICIENT_B_AMOUNT');\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = IFireBirdFormula(formula).quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, 'Router: INSUFFICIENT_A_AMOUNT');\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function _addLiquidityToken(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) internal returns (uint amountA, uint amountB) {\\n        (amountA, amountB) = _addLiquidity(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n    }\\n    function createPair( address tokenA, address tokenB,uint amountA,uint amountB, uint32 tokenWeightA, uint32 swapFee, address to) public virtual override returns (uint liquidity) {\\n        address pair = IFireBirdFactory(factory).createPair(tokenA, tokenB, tokenWeightA, swapFee);\\n        _addLiquidityToken(pair, tokenA, tokenB, amountA, amountB, 0, 0);\\n        liquidity = IFireBirdPair(pair).mint(to);\\n    }\\n    function addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n        (amountA,  amountB) = _addLiquidityToken(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        liquidity = IFireBirdPair(pair).mint(to);\\n    }\\n\\n    function _addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to\\n    ) internal returns (uint amountToken, uint amountETH, uint liquidity) {\\n        (amountToken, amountETH) = _addLiquidity(\\n            pair,\\n            token,\\n            WETH,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountETHMin\\n        );\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n        transferETHTo(amountETH, pair);\\n        liquidity = IFireBirdPair(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n    }\\n    function createPairETH( address token, uint amountToken, uint32 tokenWeight, uint32 swapFee, address to) public virtual override payable returns (uint liquidity) {\\n        address pair = IFireBirdFactory(factory).createPair(token, WETH, tokenWeight, swapFee);\\n        (,,liquidity) = _addLiquidityETH(pair, token, amountToken, 0, 0, to);\\n    }\\n    function addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\n        (amountToken, amountETH, liquidity) = _addLiquidityETH(pair, token, amountTokenDesired, amountTokenMin, amountETHMin, to);\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(address tokenIn, uint[] memory amounts, address[] memory path, address _to) internal virtual {\\n        address input = tokenIn;\\n        for (uint i = 0; i < path.length; i++) {\\n            IFireBirdPair pairV2 = IFireBirdPair(path[i]);\\n            address token0 = pairV2.token0();\\n            uint amountOut = amounts[i + 1];\\n            (uint amount0Out, uint amount1Out, address output) = input == token0 ? (uint(0), amountOut, pairV2.token1()) : (amountOut, uint(0), token0);\\n            address to = i < path.length - 1 ? path[i + 1] : _to;\\n            pairV2.swap(\\n                amount0Out, amount1Out, to, new bytes(0)\\n            );\\n            emit Exchange(address(pairV2), amountOut, output);\\n            input = output;\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint deadline\\n    ) public virtual override ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = _validateAmountOut(tokenIn, tokenOut, amountIn, amountOutMin, path);\\n\\n        TransferHelper.safeTransferFrom(\\n            tokenIn, msg.sender, path[0], amounts[0]\\n        );\\n        _swap(tokenIn, amounts, path, to);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = _validateAmountIn(tokenIn, tokenOut, amountOut, amountInMax, path);\\n\\n        TransferHelper.safeTransferFrom(\\n            tokenIn, msg.sender, path[0], amounts[0]\\n        );\\n        _swap(tokenIn, amounts, path, to);\\n    }\\n\\n    function swapExactETHForTokens(address tokenOut, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        payable\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        amounts = _validateAmountOut(WETH, tokenOut, msg.value, amountOutMin, path);\\n\\n        transferETHTo(amounts[0], path[0]);\\n        _swap(WETH, amounts, path, to);\\n    }\\n    function swapTokensForExactETH(address tokenIn, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        amounts = _validateAmountIn(tokenIn, WETH, amountOut, amountInMax, path);\\n\\n        TransferHelper.safeTransferFrom(\\n            tokenIn, msg.sender, path[0], amounts[0]\\n        );\\n        _swap(tokenIn, amounts, path, address(this));\\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    }\\n    function swapExactTokensForETH(address tokenIn, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        amounts = _validateAmountOut(tokenIn, WETH, amountIn, amountOutMin, path);\\n\\n        TransferHelper.safeTransferFrom(\\n            tokenIn, msg.sender, path[0], amounts[0]\\n        );\\n        _swap(tokenIn, amounts, path, address(this));\\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    }\\n    function swapETHForExactTokens(address tokenOut, uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        override\\n        payable\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        amounts = _validateAmountIn(WETH, tokenOut, amountOut, msg.value, path);\\n\\n        transferETHTo(amounts[0], path[0]);\\n        _swap(WETH, amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(address tokenIn, address[] memory path, address _to) internal virtual {\\n        address input = tokenIn;\\n        for (uint i; i < path.length; i++) {\\n            IFireBirdPair pair = IFireBirdPair(path[i]);\\n\\n            uint amountInput;\\n            uint amountOutput;\\n            address currentOutput;\\n            {\\n                (address output, uint reserveInput, uint reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IFireBirdFormula(formula).getFactoryReserveAndWeights(factory, address(pair), input);\\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n                amountOutput = IFireBirdFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n                currentOutput = output;\\n            }\\n            (uint amount0Out, uint amount1Out) = input == pair.token0() ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n            address to = i < path.length - 1 ? path[i + 1] : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n            emit Exchange(address(pair), amountOutput, currentOutput);\\n            input = currentOutput;\\n        }\\n    }\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual override ensure(deadline) {\\n        TransferHelper.safeTransferFrom(\\n            tokenIn, msg.sender, path[0], amountIn\\n        );\\n        uint balanceBefore = IERC20(tokenOut).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, to);\\n        require(\\n            IERC20(tokenOut).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            'Router: INSUFFICIENT_OUTPUT_AMOUNT'\\n        );\\n    }\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        virtual\\n        override\\n        payable\\n        ensure(deadline)\\n    {\\n//            require(path[0] == WETH, 'Router: INVALID_PATH');\\n        uint amountIn = msg.value;\\n        transferETHTo(amountIn, path[0]);\\n        uint balanceBefore = IERC20(tokenOut).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(WETH, path, to);\\n        require(\\n            IERC20(tokenOut).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            'Router: INSUFFICIENT_OUTPUT_AMOUNT'\\n        );\\n    }\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n    {\\n        TransferHelper.safeTransferFrom(\\n            tokenIn, msg.sender, path[0], amountIn\\n        );\\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, address(this));\\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n        transferAll(ETH_ADDRESS, to, amountOut);\\n    }\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint totalAmountIn,\\n        uint minTotalAmountOut,\\n        uint deadline\\n    ) public payable override virtual ensure(deadline) returns (uint totalAmountOut) {\\n        transferFromAll(tokenIn, totalAmountIn);\\n        uint balanceBefore;\\n        if (!isETH(tokenOut)) {\\n            balanceBefore = IERC20(tokenOut).balanceOf(msg.sender);\\n        }\\n\\n        for (uint i = 0; i < swapSequences.length; i++) {\\n            uint tokenAmountOut;\\n            for (uint k = 0; k < swapSequences[i].length; k++) {\\n                Swap memory swap = swapSequences[i][k];\\n                if (k > 0) {\\n                    // Makes sure that on the second swap the output of the first was used\\n                    // so there is not intermediate token leftover\\n                    swap.swapAmount = tokenAmountOut;\\n                }\\n                tokenAmountOut = _swapSingleSupportFeeOnTransferTokens(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount);\\n            }\\n\\n            // This takes the amountOut of the last swap\\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\\n        }\\n\\n        transferAll(tokenOut, msg.sender, totalAmountOut);\\n        transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n\\n        if (isETH(tokenOut)) {\\n            require(totalAmountOut >= minTotalAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        } else {\\n            require(IERC20(tokenOut).balanceOf(msg.sender).sub(balanceBefore) >= minTotalAmountOut, '<minTotalAmountOut');\\n        }\\n    }\\n\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint maxTotalAmountIn,\\n        uint deadline\\n    ) public payable override virtual ensure(deadline) returns (uint totalAmountIn) {\\n        transferFromAll(tokenIn, maxTotalAmountIn);\\n\\n        for (uint i = 0; i < swapSequences.length; i++) {\\n            uint tokenAmountInFirstSwap;\\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\\n            if (swapSequences[i].length == 1) {\\n                Swap memory swap = swapSequences[i][0];\\n                tokenAmountInFirstSwap = _swapSingleMixOut(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount, swap.maxPrice);\\n\\n            } else {\\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\\n                // of token C. But first we need to buy B with A so we can then buy C with B\\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\\n                uint intermediateTokenAmount;\\n                // This would be token B as described above\\n                Swap memory secondSwap = swapSequences[i][1];\\n                {\\n                    address[] memory paths = new address[](1);\\n                    paths[0] = secondSwap.pool;\\n                    uint[] memory amounts = IFireBirdFormula(formula).getFactoryAmountsIn(factory, secondSwap.tokenIn, secondSwap.tokenOut, secondSwap.swapAmount, paths);\\n                    intermediateTokenAmount = amounts[0];\\n                    require(intermediateTokenAmount <= secondSwap.limitReturnAmount, 'Router: EXCESSIVE_INPUT_AMOUNT');\\n                }\\n\\n                //// Buy intermediateTokenAmount of token B with A in the first pool\\n                Swap memory firstSwap = swapSequences[i][0];\\n                tokenAmountInFirstSwap = _swapSingleMixOut(firstSwap.tokenIn, firstSwap.tokenOut, firstSwap.pool, intermediateTokenAmount, firstSwap.limitReturnAmount, firstSwap.maxPrice);\\n\\n                //// Buy the final amount of token C desired\\n                _swapSingle(secondSwap.tokenIn, secondSwap.pool, intermediateTokenAmount, secondSwap.swapAmount);\\n            }\\n\\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\\n        }\\n\\n        require(totalAmountIn <= maxTotalAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        transferAll(tokenOut, msg.sender, getBalance(tokenOut));\\n        transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n    }\\n\\n    function transferFromAll(address token, uint amount) internal returns (bool) {\\n        if (isETH(token)) {\\n            IWETH(WETH).deposit{value : msg.value}();\\n        } else {\\n            TransferHelper.safeTransferFrom(token, msg.sender, address(this), amount);\\n        }\\n        return true;\\n    }\\n\\n    function getBalance(address token) internal view returns (uint) {\\n        if (isETH(token)) {\\n            return IWETH(WETH).balanceOf(address(this));\\n        } else {\\n            return IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapSingleMixOut(address tokenIn, address tokenOut, address pool, uint swapAmount, uint limitReturnAmount, uint maxPrice) internal returns (uint tokenAmountIn) {\\n        address[] memory paths = new address[](1);\\n        paths[0] = pool;\\n        uint[] memory amounts = IFireBirdFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, swapAmount, paths);\\n        tokenAmountIn = amounts[0];\\n        require(tokenAmountIn <= limitReturnAmount, 'Router: EXCESSIVE_INPUT_AMOUNT');\\n        _swapSingle(tokenIn, pool, tokenAmountIn, amounts[1]);\\n    }\\n\\n    function _swapSingle(address tokenIn, address pair, uint targetSwapAmount, uint targetOutAmount) internal {\\n        TransferHelper.safeTransfer(tokenIn, pair, targetSwapAmount);\\n        IFireBirdPair pairV2 = IFireBirdPair(pair);\\n        address token0 = pairV2.token0();\\n\\n        (uint amount0Out, uint amount1Out, address output) = tokenIn == token0 ? (uint(0), targetOutAmount, pairV2.token1()) : (targetOutAmount, uint(0), token0);\\n        pairV2.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\n        emit Exchange(pair, targetOutAmount, output);\\n    }\\n\\n    function _swapSingleSupportFeeOnTransferTokens(address tokenIn, address tokenOut, address pool, uint swapAmount, uint limitReturnAmount) internal returns(uint tokenAmountOut) {\\n        TransferHelper.safeTransfer(tokenIn, pool, swapAmount);\\n\\n        uint amountOutput;\\n        {\\n            (, uint reserveInput, uint reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IFireBirdFormula(formula).getFactoryReserveAndWeights(factory, pool, tokenIn);\\n            uint amountInput = IERC20(tokenIn).balanceOf(pool).sub(reserveInput);\\n            amountOutput = IFireBirdFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n        }\\n        uint balanceBefore = IERC20(tokenOut).balanceOf(address(this));\\n        (uint amount0Out, uint amount1Out) = tokenIn == IFireBirdPair(pool).token0() ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n        IFireBirdPair(pool).swap(amount0Out, amount1Out, address(this), new bytes(0));\\n        emit Exchange(pool, amountOutput, tokenOut);\\n\\n        tokenAmountOut = IERC20(tokenOut).balanceOf(address(this)).sub(balanceBefore);\\n        require(tokenAmountOut >= limitReturnAmount,'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n    }\\n\\n    function _validateAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] memory path\\n    ) internal view returns (uint[] memory amounts) {\\n        amounts = IFireBirdFormula(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n    }\\n\\n    function _validateAmountIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path\\n    ) internal view returns (uint[] memory amounts) {\\n        amounts = IFireBirdFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path);\\n        require(amounts[0] <= amountInMax, 'Router: EXCESSIVE_INPUT_AMOUNT');\\n    }\\n\\n    function transferETHTo(uint amount, address to) internal {\\n        IWETH(WETH).deposit{value: amount}();\\n        assert(IWETH(WETH).transfer(to, amount));\\n    }\\n\\n    function transferAll(address token, address to, uint amount) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            IWETH(WETH).withdraw(amount);\\n            TransferHelper.safeTransferETH(to, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, to, amount);\\n        }\\n        return true;\\n    }\\n\\n    function isETH(address token) internal pure returns (bool) {\\n        return (token == ETH_ADDRESS);\\n    }\\n// **** REMOVE LIQUIDITY ****\\n    function _removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal  returns (uint amountA, uint amountB) {\\n        require(IFireBirdFactory(factory).isPair(pair), \\\"Router: Invalid pair\\\");\\n        IFireBirdPair(pair).transferFrom(msg.sender, pair, liquidity);\\n        // send liquidity to pair\\n        (uint amount0, uint amount1) = IFireBirdPair(pair).burn(to);\\n        (address token0,) = IFireBirdFormula(formula).sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, 'Router: INSUFFICIENT_A_AMOUNT');\\n        require(amountB >= amountBMin, 'Router: INSUFFICIENT_B_AMOUNT');\\n    }\\n    function removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\\n    }\\n\\n    function removeLiquidityETH(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\\n        (amountToken, amountETH) = _removeLiquidity(\\n            pair,\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this)\\n        );\\n        TransferHelper.safeTransfer(token, to, amountToken);\\n        transferAll(ETH_ADDRESS, to, amountETH);\\n    }\\n\\n    function removeLiquidityWithPermit(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\n        {\\n            uint value = approveMax ? uint(- 1) : liquidity;\\n            IFireBirdPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        }\\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\\n    }\\n\\n    function removeLiquidityETHWithPermit(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external virtual override returns (uint amountToken, uint amountETH) {\\n        uint value = approveMax ? uint(- 1) : liquidity;\\n        IFireBirdPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountToken, amountETH) = removeLiquidityETH(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n    }\\n\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\\n        (, amountETH) = removeLiquidity(\\n            pair,\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\\n        transferAll(ETH_ADDRESS, to, amountETH);\\n    }\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external virtual override returns (uint amountETH) {\\n        uint value = approveMax ? uint(- 1) : liquidity;\\n        IFireBirdPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\n            pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x47531acb6282d422749d5ea3c5e0377370a74fe7c0a18cf644b628c7c7bf6bb4\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdc30fa248655dc9936342ff8f8d2c4669143123013acdea9fa04b234540a0763\"},\"contracts/interfaces/IFireBirdFactory.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IFireBirdFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0xf877564655d8d582ea8cb43c2f1adbfa99175b60a0198ded0faffbe22fcd613f\"},\"contracts/interfaces/IFireBirdFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IFireBirdFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0xb25e0b384bada4a58243703a3d38e738dd58ea121c8cdc6b3e3fc6bd56a73b55\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IFireBirdPair.sol\":{\"content\":\"pragma solidity >=0.5.16;\\ninterface IFireBirdPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n    function getSwapFee() external view returns (uint32);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address, uint32, uint32) external;\\n}\\n\",\"keccak256\":\"0x770c213bb2620ee99eb32eb1140304457ca65653f5c4ce3b90d203a22f661015\"},\"contracts/interfaces/IFireBirdRouter.sol\":{\"content\":\"pragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IFireBirdRouter {\\n    event Exchange(\\n        address pair,\\n        uint amountOut,\\n        address output\\n    );\\n    struct Swap {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint swapAmount; // tokenInAmount / tokenOutAmount\\n        uint limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint maxPrice;\\n    }\\n    function factory() external view returns (address);\\n    function formula() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(address tokenOut, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(address tokenIn, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(address tokenIn, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(address tokenOut, uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint totalAmountIn,\\n        uint minTotalAmountOut,\\n        uint deadline\\n    )\\n    external payable returns (uint totalAmountOut);\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint maxTotalAmountIn,\\n        uint deadline\\n    ) external payable returns (uint totalAmountIn);\\n\\n    function createPair( address tokenA, address tokenB,uint amountA,uint amountB, uint32 tokenWeightA, uint32 swapFee, address to) external returns (uint liquidity);\\n    function createPairETH( address token, uint amountToken, uint32 tokenWeight, uint32 swapFee, address to) external payable returns (uint liquidity);\\n\\n    function removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n}\\n\",\"keccak256\":\"0xf94fb1d2a971e6b54d335dca54093421d7cc9391d23eb627b95be79a8b029846\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee68d59a1c385a940a9e4fa1dc1e46fa3dd695168d0035cb8c879329cd13dd4e\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    function div(uint a, uint b) internal pure returns (uint c) {\\n        require(b > 0, 'ds-math-division-by-zero');\\n        c = a / b;\\n    }\\n}\\n\",\"keccak256\":\"0x5b9da9eeab62132e6a4355aa12528d51133fcc542210ff3c08a0aff4999b36fc\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x771a09cfe236d26cfbfd1b048a0d68bd37710260efddfc9b175db51d8cd96b4f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200577a3803806200577a833981016040819052620000349162000128565b816001600160a01b03166080816001600160a01b031660601b81525050816001600160a01b0316634b75f54f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200008b57600080fd5b505afa158015620000a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c6919062000104565b6001600160601b0319606091821b811660a05291901b1660c052506200015f565b80516001600160a01b0381168114620000ff57600080fd5b919050565b60006020828403121562000116578081fd5b6200012182620000e7565b9392505050565b600080604083850312156200013b578081fd5b6200014683620000e7565b91506200015660208401620000e7565b90509250929050565b60805160601c60a05160601c60c05160601c61552262000258600039806101ac52806108145280610a115280610b84528061104752806113fb528061145f52806114b4528061159b5280611bfb5280611d395280611ead5280611f1f5280611f865280612a4a5280612ad85280612b915280612cb152806132015250806105fb5280610dc552806122af528061262352806127775280612dcb5280613324528061372d5280613bb45280613d09528061408c528061419852806142af525080610b475280610e01528061168d52806119455280612094528061265f5280612df85280613351528061375a5280613bf052506155226000f3fe60806040526004361061018f5760003560e01c8063b05f579e116100d6578063d59e44ee1161007f578063fa3219d511610059578063fa3219d514610458578063fbf4513514610478578063fde1adda14610498576101d5565b8063d59e44ee146103f8578063e1f4a78414610418578063ebb5d2e914610438576101d5565b8063c45a0155116100b0578063c45a0155146103b0578063ce819632146103c5578063d0f2c82a146103d8576101d5565b8063b05f579e1461035d578063b56b681d14610370578063bff51d7114610390576101d5565b80636cb4942811610138578063a4aabb0811610112578063a4aabb0814610308578063a67d0e3c14610328578063ad5c464814610348576101d5565b80636cb49428146102b5578063840c34d0146102c85780639c91fcb5146102db576101d5565b80634c17fd7c116101695780634c17fd7c146102545780635cae031014610282578063674ee80b146102a2576101d5565b80630e2f024c146101da5780633990ba54146102105780634b75f54f14610232576101d5565b366101d5573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101d357fe5b005b600080fd5b3480156101e657600080fd5b506101fa6101f5366004614963565b6104ab565b6040516102079190615382565b60405180910390f35b61022361021e3660046148f2565b61058e565b604051610207939291906153d4565b34801561023e57600080fd5b506102476105f9565b6040516102079190614e9a565b34801561026057600080fd5b5061027461026f366004614624565b61061d565b60405161020792919061538b565b34801561028e57600080fd5b506101d361029d366004614b09565b61072d565b6101d36102b0366004614a8f565b610900565b6101fa6102c3366004614c01565b610b42565b6101fa6102d6366004614c68565b610c34565b3480156102e757600080fd5b506102fb6102f6366004614b09565b611004565b6040516102079190615129565b34801561031457600080fd5b50610274610323366004614963565b611167565b34801561033457600080fd5b506101d361034336600461476d565b611250565b34801561035457600080fd5b506102476113f9565b6102fb61036b366004614a8f565b61141d565b34801561037c57600080fd5b5061027461038b3660046148f2565b611556565b34801561039c57600080fd5b506102fb6103ab366004614804565b611600565b3480156103bc57600080fd5b5061024761168b565b6101fa6103d3366004614cda565b6116af565b3480156103e457600080fd5b506101fa6103f3366004614a0c565b611940565b34801561040457600080fd5b506102fb61041336600461476d565b611aac565b34801561042457600080fd5b506102746104333660046145a0565b611b58565b34801561044457600080fd5b506101fa6104533660046148f2565b611bb7565b34801561046457600080fd5b506102fb610473366004614b09565b611cf6565b34801561048457600080fd5b506102236104933660046146df565b611d61565b6102fb6104a6366004614a8f565b611e6b565b600080856104b9578a6104db565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fd505accf00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8e169063d505accf9061053c903390309086908d908c908c908c90600401614ebb565b600060405180830381600087803b15801561055657600080fd5b505af115801561056a573d6000803e3d6000fd5b5050505061057d8d8d8d8d8d8d8d611bb7565b9d9c50505050505050505050505050565b600080600083428110156105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b60405180910390fd5b6105e58b8b8b8b8b8b611f7a565b919d909c50909a5098505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080864281101561065b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b600087610668578c61068a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b90508f73ffffffffffffffffffffffffffffffffffffffff1663d505accf3330848d8c8c8c6040518863ffffffff1660e01b81526004016106d19796959493929190614ebb565b600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b50505050506107138f8f8f8f8f8f8f61208f565b8093508194505050509c509c9a5050505050505050505050565b8042811015610768576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b61079588338787600081811061077a57fe5b905060200201602081019061078f919061452f565b8a61241f565b6107d4888686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506125ee915050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610849903090600401614e9a565b60206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190614df6565b9050868110156108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b6108f473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee85836129f0565b50505050505050505050565b804281101561093b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b3461096581878760008161094b57fe5b9050602002016020810190610960919061452f565b612ad6565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8a16906370a08231906109ba908890600401614e9a565b60206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190614df6565b9050610a6b7f00000000000000000000000000000000000000000000000000000000000000008888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92506125ee915050565b87610aff828b73ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401610aa99190614e9a565b60206040518083038186803b158015610ac157600080fd5b505afa158015610ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af99190614df6565b90612c27565b1015610b37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b505050505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314572adb887f000000000000000000000000000000000000000000000000000000000000000088886040518563ffffffff1660e01b8152600401610bc49493929190615095565b602060405180830381600087803b158015610bde57600080fd5b505af1158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c16919061454b565b9050610c2781888860008088611f7a565b9998505050505050505050565b60008142811015610c71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b610c7b8685612c9f565b5060005b8751811015610f9c576000888281518110610c9657fe5b60200260200101515160011415610d01576000898381518110610cb557fe5b6020026020010151600081518110610cc957fe5b60200260200101519050610cf9816020015182604001518360000151846060015185608001518660a00151612d4a565b915050610f87565b6000808a8481518110610d1057fe5b6020026020010151600181518110610d2457fe5b602002602001015190506000600167ffffffffffffffff81118015610d4857600080fd5b50604051908082528060200260200182016040528015610d72578160200160208202803683370190505b509050816000015181600081518110610d8757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166367f84adc7f0000000000000000000000000000000000000000000000000000000000000000856020015186604001518760600151876040518663ffffffff1660e01b8152600401610e50959493929190615015565b60006040518083038186803b158015610e6857600080fd5b505afa158015610e7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610ec29190810190614d56565b905080600081518110610ed157fe5b602002602001015193508260800151841115610f19576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151a4565b505060008b8581518110610f2957fe5b6020026020010151600081518110610f3d57fe5b60200260200101519050610f698160200151826040015183600001518685608001518660a00151612d4a565b9350610f8382602001518360000151858560600151612f09565b5050505b610f918185613142565b935050600101610c7f565b5083821115610fd7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90615280565b610fea8533610fe5886131b4565b6129f0565b50610ff98633610fe5896131b4565b505095945050505050565b60608142811015611041576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6110a1897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506132e492505050565b91506110e48933888860008181106110b557fe5b90506020020160208101906110ca919061452f565b856000815181106110d757fe5b602002602001015161241f565b611124898388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061344f915050565b61115a73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee858460018651038151811061114d57fe5b60200260200101516129f0565b5050979650505050505050565b600080600086611177578b611199565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fd505accf00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8f169063d505accf906111fa903390309086908e908d908d908d90600401614ebb565b600060405180830381600087803b15801561121457600080fd5b505af1158015611228573d6000803e3d6000fd5b5050505061123b8e8e8e8e8e8e8e611556565b909f909e509c50505050505050505050505050565b804281101561128b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b61129d89338787600081811061077a57fe5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8a16906370a08231906112f2908790600401614e9a565b60206040518083038186803b15801561130a57600080fd5b505afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190614df6565b90506113838a8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506125ee915050565b866113c1828b73ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401610aa99190614e9a565b10156108f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060814281101561145a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6114887f00000000000000000000000000000000000000000000000000000000000000008989348a8a6136ed565b91506114af8260008151811061149a57fe5b60200260200101518787600081811061094b57fe5b61150f7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061344f915050565b8160008151811061151c57fe5b602002602001015134111561154b5761154b338360008151811061153c57fe5b60200260200101513403613858565b509695505050505050565b6000808242811015611594576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6115c38a8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b3061208f565b90935091506115d3898685613995565b6115f273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee86846129f0565b505097509795505050505050565b6060814281101561163d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b61164a89898989896132e4565b915061167389338760008151811061165e57fe5b6020026020010151856000815181106110d757fe5b61167f8983878761344f565b50979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081428110156116ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6116f68786612c9f565b50600061170287613b6a565b6117ab576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906370a0823190611758903390600401614e9a565b60206040518083038186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190614df6565b90505b60005b8951811015611855576000805b8b83815181106117c757fe5b60200260200101515181101561183f5760008c84815181106117e557fe5b602002602001015182815181106117f857fe5b60200260200101519050600082111561181357606081018390525b61183481602001518260400151836000015184606001518560800151613b9c565b9250506001016117bb565b5061184a8186613142565b9450506001016117ae565b506118618733856129f0565b506118708833610fe58b6131b4565b5061187a87613b6a565b156118be57848310156118b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90615249565b611934565b846118fc828973ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610aa99190614e9a565b1015611934576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce9061516d565b50509695505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314572adb8a8a88886040518563ffffffff1660e01b81526004016119a29493929190615095565b602060405180830381600087803b1580156119bc57600080fd5b505af11580156119d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f4919061454b565b9050611a06818a8a8a8a600080614049565b50506040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690636a62784290611a5a908690600401614e9a565b602060405180830381600087803b158015611a7457600080fd5b505af1158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c279190614df6565b60608142811015611ae9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611af78a8a8a8a8a8a6136ed565b9150611b0b8a33888860008181106110b557fe5b611b4b8a838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061344f915050565b5098975050505050505050565b6000808242811015611b96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611ba58b8b8b8b8b8b8b61208f565b909c909b509950505050505050505050565b60008142811015611bf4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611c2489897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611b58565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152909350611cd791508990869073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190611c82903090600401614e9a565b60206040518083038186803b158015611c9a57600080fd5b505afa158015611cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd29190614df6565b613995565b61115a73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee85846129f0565b60608142811015611d33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6110a1897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a6136ed565b60008060008342811015611da1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611db08d8d8d8d8d8d8d614049565b6040517f6a627842000000000000000000000000000000000000000000000000000000008152919550935073ffffffffffffffffffffffffffffffffffffffff8e1690636a62784290611e07908990600401614e9a565b602060405180830381600087803b158015611e2157600080fd5b505af1158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e599190614df6565b91505099509950999650505050505050565b60608142811015611ea8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611f087f000000000000000000000000000000000000000000000000000000000000000089348a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506132e492505050565b9150611f1a8260008151811061149a57fe5b61154b7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061344f915050565b6000806000611fae89897f00000000000000000000000000000000000000000000000000000000000000008a348b8b614084565b9093509150611fbf88338b8661241f565b611fc9828a612ad6565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1690636a6278429061201b908790600401614e9a565b602060405180830381600087803b15801561203557600080fd5b505af1158015612049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206d9190614df6565b9050813411156120835761208333833403613858565b96509650969350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e5e31b138a6040518263ffffffff1660e01b81526004016120eb9190614e9a565b60206040518083038186803b15801561210357600080fd5b505afa158015612117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213b9190614dda565b612171576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce9061534b565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a16906323b872dd906121c79033908d908b90600401614f09565b602060405180830381600087803b1580156121e157600080fd5b505af11580156121f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122199190614dda565b506000808a73ffffffffffffffffffffffffffffffffffffffff166389afcb44866040518263ffffffff1660e01b81526004016122569190614e9a565b6040805180830381600087803b15801561226f57600080fd5b505af1158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a79190614e0e565b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663544caa568c8c6040518363ffffffff1660e01b8152600401612308929190614f3a565b604080518083038186803b15801561231f57600080fd5b505afa158015612333573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123579190614567565b5090508073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614612394578183612397565b82825b9095509350878510156123d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90615212565b86841015612410576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151db565b50505097509795505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106124fc57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016124bf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461255e576040519150601f19603f3d011682016040523d82523d6000602084013e612563565b606091505b5091509150818015612591575080511580612591575080806020019051602081101561258e57600080fd5b50515b6125e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806154c96024913960400191505060405180910390fd5b505050505050565b8260005b83518110156129e957600084828151811061260957fe5b6020026020010151905060008060008060008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b815260040161269e93929190614f61565b60c06040518083038186803b1580156126b657600080fd5b505afa1580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ee9190614b8e565b955095509550955095509550612737858d73ffffffffffffffffffffffffffffffffffffffff166370a082318d6040518263ffffffff1660e01b8152600401610aa99190614e9a565b6040517f671a11b500000000000000000000000000000000000000000000000000000000815290995073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063671a11b5906127b6908c90899089908990899089906004016153ea565b60206040518083038186803b1580156127ce57600080fd5b505afa1580156127e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128069190614df6565b97508596505050505050506000808573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561285a57600080fd5b505afa15801561286e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612892919061454b565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146128cc578360006128d0565b6000845b91509150600060018b510388106128e757896128ff565b8a88600101815181106128f657fe5b60200260200101515b604080516000815260208101918290527f022c0d9f0000000000000000000000000000000000000000000000000000000090915290915073ffffffffffffffffffffffffffffffffffffffff88169063022c0d9f906129679086908690869060248101615399565b600060405180830381600087803b15801561298157600080fd5b505af1158015612995573d6000803e3d6000fd5b505050507fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c488786866040516129cc939291906150f9565b60405180910390a15091965050600190940193506125f292505050565b5050505050565b6000816129ff57506001612acf565b612a0884613b6a565b15612ac0576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90612a7f908590600401615382565b600060405180830381600087803b158015612a9957600080fd5b505af1158015612aad573d6000803e3d6000fd5b50505050612abb8383613858565b612acb565b612acb848484613995565b5060015b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015612b3e57600080fd5b505af1158015612b52573d6000803e3d6000fd5b50506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb9250612bcb9150849086906004016150d3565b602060405180830381600087803b158015612be557600080fd5b505af1158015612bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1d9190614dda565b612c2357fe5b5050565b80820382811115612c9957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b6000612caa83613b6a565b15612d35577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015612d1757600080fd5b505af1158015612d2b573d6000803e3d6000fd5b5050505050612d41565b612d418333308561241f565b50600192915050565b604080516001808252818301909252600091829190602080830190803683370190505090508581600081518110612d7d57fe5b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526040517f67f84adc0000000000000000000000000000000000000000000000000000000081526000917f000000000000000000000000000000000000000000000000000000000000000016906367f84adc90612e28907f0000000000000000000000000000000000000000000000000000000000000000908d908d908c908990600401615015565b60006040518083038186803b158015612e4057600080fd5b505afa158015612e54573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612e9a9190810190614d56565b905080600081518110612ea957fe5b6020026020010151925084831115612eed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151a4565b61193489888584600181518110612f0057fe5b60200260200101515b612f14848484613995565b600083905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612f6157600080fd5b505afa158015612f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f99919061454b565b905060008060008373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614612fdc578560008561305d565b6000868673ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561302557600080fd5b505afa158015613039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305d919061454b565b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152929550909350915073ffffffffffffffffffffffffffffffffffffffff86169063022c0d9f906130ca9086908690309060248101615399565b600060405180830381600087803b1580156130e457600080fd5b505af11580156130f8573d6000803e3d6000fd5b505050507fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c4888878360405161312f939291906150f9565b60405180910390a1505050505050505050565b80820182811015612c9957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b60006131bf82613b6a565b1561328d576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613236903090600401614e9a565b60206040518083038186803b15801561324e57600080fd5b505afa158015613262573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132869190614df6565b90506132df565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190613236903090600401614e9a565b919050565b6040517f119220a500000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063119220a590613381907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a908990600401615015565b60006040518083038186803b15801561339957600080fd5b505afa1580156133ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526133f39190810190614d56565b9050828160018351038151811061340657fe5b60200260200101511015613446576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b95945050505050565b8360005b83518110156125e657600084828151811061346a57fe5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156134bc57600080fd5b505afa1580156134d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f4919061454b565b9050600087846001018151811061350757fe5b6020026020010151905060008060008473ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461355257836000866135d3565b6000848773ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561359b57600080fd5b505afa1580156135af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d3919061454b565b925092509250600060018b510388106135ec5789613604565b8a88600101815181106135fb57fe5b60200260200101515b604080516000815260208101918290527f022c0d9f0000000000000000000000000000000000000000000000000000000090915290915073ffffffffffffffffffffffffffffffffffffffff88169063022c0d9f9061366c9087908790869060248101615399565b600060405180830381600087803b15801561368657600080fd5b505af115801561369a573d6000803e3d6000fd5b505050507fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c488786846040516136d1939291906150f9565b60405180910390a1509650506001909401935061345392505050565b6040517f67f84adc00000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906367f84adc9061378c907f0000000000000000000000000000000000000000000000000000000000000000908b908b908b908a908a90600401614f91565b60006040518083038186803b1580156137a457600080fd5b505afa1580156137b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526137fe9190810190614d56565b9050838160008151811061380e57fe5b6020026020010151111561384e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151a4565b9695505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b602083106138cf57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613892565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613931576040519150601f19603f3d011682016040523d82523d6000602084013e613936565b606091505b5050905080613990576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806154a66023913960400191505060405180910390fd5b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310613a6a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613a2d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613acc576040519150601f19603f3d011682016040523d82523d6000602084013e613ad1565b606091505b5091509150818015613aff575080511580613aff5750808060200190516020811015613afc57600080fd5b50515b6129e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b6000613ba9868585613995565b6000806000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b8152600401613c2f93929190614f61565b60c06040518083038186803b158015613c4757600080fd5b505afa158015613c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c7f9190614b8e565b95509550955095509550506000613cc9868e73ffffffffffffffffffffffffffffffffffffffff166370a082318e6040518263ffffffff1660e01b8152600401610aa99190614e9a565b6040517f671a11b500000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063671a11b590613d489084908a908a908a908a908a906004016153ea565b60206040518083038186803b158015613d6057600080fd5b505afa158015613d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d989190614df6565b965050505050505060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401613ddb9190614e9a565b60206040518083038186803b158015613df357600080fd5b505afa158015613e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2b9190614df6565b90506000808773ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613e7657600080fd5b505afa158015613e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eae919061454b565b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614613ee857836000613eec565b6000845b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152919350915073ffffffffffffffffffffffffffffffffffffffff89169063022c0d9f90613f569085908590309060248101615399565b600060405180830381600087803b158015613f7057600080fd5b505af1158015613f84573d6000803e3d6000fd5b505050507fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c4888858b604051613fbb939291906150f9565b60405180910390a1614000838a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aa99190614e9a565b94508585101561403c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b5050505095945050505050565b60008061405b89898989898989614084565b909250905061406c88338b8561241f565b61407887338b8461241f565b97509795505050505050565b6000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663327494618c8c8c6040518463ffffffff1660e01b81526004016140e793929190614f61565b604080518083038186803b1580156140fe57600080fd5b505afa158015614112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141369190614e0e565b91509150816000148015614148575080155b15614158578793508692506115f2565b6040517fad615dec00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063ad615dec906141d1908c90879087906004016153d4565b60206040518083038186803b1580156141e957600080fd5b505afa1580156141fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142219190614df6565b905087811161426f5785811015614264576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151db565b889450925082612410565b6040517fad615dec00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063ad615dec906142e8908c90879089906004016153d4565b60206040518083038186803b15801561430057600080fd5b505afa158015614314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143389190614df6565b90508981111561434457fe5b8781101561437e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90615212565b9c979b50969950505050505050505050565b80356132df81615460565b60008083601f8401126143ac578182fd5b50813567ffffffffffffffff8111156143c3578182fd5b60208301915083602080830285010111156143dd57600080fd5b9250929050565b600082601f8301126143f4578081fd5b8135602061440961440483615442565b61541e565b82815281810190858301855b85811015614511578135880189603f82011261442f578788fd5b8581013561443f61440482615442565b808282528882019150604084018d604060c086028701011115614460578b8cfd5b8b94505b838510156144fb5760c0818f03121561447b578b8cfd5b60405160c0810181811067ffffffffffffffff8211171561449857fe5b60405281356144a681615460565b81526144b3828c01614390565b8b8201526144c360408301614390565b6040820152606082810135908201526080808301359082015260a080830135908201528352600194909401939189019160c001614464565b5087525050509284019290840190600101614415565b5090979650505050505050565b803560ff811681146132df57600080fd5b600060208284031215614540578081fd5b8135612acf81615460565b60006020828403121561455c578081fd5b8151612acf81615460565b60008060408385031215614579578081fd5b825161458481615460565b602084015190925061459581615460565b809150509250929050565b600080600080600080600080610100898b0312156145bc578384fd5b88356145c781615460565b975060208901356145d781615460565b965060408901356145e781615460565b9550606089013594506080890135935060a0890135925060c089013561460c81615460565b8092505060e089013590509295985092959890939650565b6000806000806000806000806000806000806101808d8f031215614646578586fd5b8c3561465181615460565b9b5060208d013561466181615460565b9a5060408d013561467181615460565b995060608d0135985060808d0135975060a08d0135965060c08d013561469681615460565b955060e08d013594506101008d01356146ae81615485565b93506146bd6101208e0161451e565b92506101408d013591506101608d013590509295989b509295989b509295989b565b60008060008060008060008060006101208a8c0312156146fd578283fd5b893561470881615460565b985060208a013561471881615460565b975060408a013561472881615460565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013561475481615460565b809250506101008a013590509295985092959850929598565b60008060008060008060008060e0898b031215614788578182fd5b883561479381615460565b975060208901356147a381615460565b96506040890135955060608901359450608089013567ffffffffffffffff8111156147cc578283fd5b6147d88b828c0161439b565b90955093505060a08901356147ec81615460565b8092505060c089013590509295985092959890939650565b600080600080600080600060e0888a03121561481e578081fd5b873561482981615460565b965060208881013561483a81615460565b96506040890135955060608901359450608089013567ffffffffffffffff811115614863578283fd5b8901601f81018b13614873578283fd5b803561488161440482615442565b81815283810190838501858402850186018f101561489d578687fd5b8694505b838510156148c85780356148b481615460565b8352600194909401939185019185016148a1565b5080975050505050506148dd60a08901614390565b915060c0880135905092959891949750929550565b600080600080600080600060e0888a03121561490c578081fd5b873561491781615460565b9650602088013561492781615460565b955060408801359450606088013593506080880135925060a088013561494c81615460565b8092505060c0880135905092959891949750929550565b60008060008060008060008060008060006101608c8e031215614984578485fd5b8b3561498f81615460565b9a5060208c013561499f81615460565b995060408c0135985060608c0135975060808c0135965060a08c01356149c481615460565b955060c08c0135945060e08c01356149db81615485565b93506149ea6101008d0161451e565b92506101208c013591506101408c013590509295989b509295989b9093969950565b600080600080600080600060e0888a031215614a26578081fd5b8735614a3181615460565b96506020880135614a4181615460565b955060408801359450606088013593506080880135614a5f81615493565b925060a0880135614a6f81615493565b915060c0880135614a7f81615460565b8091505092959891949750929550565b60008060008060008060a08789031215614aa7578384fd5b8635614ab281615460565b955060208701359450604087013567ffffffffffffffff811115614ad4578485fd5b614ae089828a0161439b565b9095509350506060870135614af481615460565b80925050608087013590509295509295509295565b600080600080600080600060c0888a031215614b23578081fd5b8735614b2e81615460565b96506020880135955060408801359450606088013567ffffffffffffffff811115614b57578182fd5b614b638a828b0161439b565b9095509350506080880135614b7781615460565b8092505060a0880135905092959891949750929550565b60008060008060008060c08789031215614ba6578384fd5b8651614bb181615460565b8096505060208701519450604087015193506060870151614bd181615493565b6080880151909350614be281615493565b60a0880151909250614bf381615493565b809150509295509295509295565b600080600080600060a08688031215614c18578283fd5b8535614c2381615460565b9450602086013593506040860135614c3a81615493565b92506060860135614c4a81615493565b91506080860135614c5a81615460565b809150509295509295909350565b600080600080600060a08688031215614c7f578283fd5b853567ffffffffffffffff811115614c95578384fd5b614ca1888289016143e4565b9550506020860135614cb281615460565b93506040860135614cc281615460565b94979396509394606081013594506080013592915050565b60008060008060008060c08789031215614cf2578384fd5b863567ffffffffffffffff811115614d08578485fd5b614d1489828a016143e4565b9650506020870135614d2581615460565b94506040870135614d3581615460565b959894975094956060810135955060808101359460a0909101359350915050565b60006020808385031215614d68578182fd5b825167ffffffffffffffff811115614d7e578283fd5b8301601f81018513614d8e578283fd5b8051614d9c61440482615442565b8181528381019083850185840285018601891015614db8578687fd5b8694505b8385101561167f578051835260019490940193918501918501614dbc565b600060208284031215614deb578081fd5b8151612acf81615485565b600060208284031215614e07578081fd5b5051919050565b60008060408385031215614e20578182fd5b505080516020909101519092909150565b60008151808452815b81811015614e5657602081850181015186830182015201614e3a565b81811115614e675782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681529183166020830152909116604082015260600190565b600060a0820173ffffffffffffffffffffffffffffffffffffffff808a1684526020818a1681860152818916604086015287606086015260a060808601528286845260c086019050879350845b87811015615005578435614ff181615460565b841682529382019390820190600101614fde565b509b9a5050505050505050505050565b600060a0820173ffffffffffffffffffffffffffffffffffffffff8089168452602081891681860152818816604086015286606086015260a0608086015282865180855260c0870191508288019450855b81811015615084578551851683529483019491830191600101615066565b50909b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015263ffffffff9081166040830152909116606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681526020810192909252909116604082015260600190565b6020808252825182820181905260009190848201906040850190845b8181101561516157835183529284019291840191600101615145565b50909695505050505050565b60208082526012908201527f3c6d696e546f74616c416d6f756e744f75740000000000000000000000000000604082015260600190565b6020808252601e908201527f526f757465723a204558434553534956455f494e5055545f414d4f554e540000604082015260600190565b6020808252601d908201527f526f757465723a20494e53554646494349454e545f425f414d4f554e54000000604082015260600190565b6020808252601d908201527f526f757465723a20494e53554646494349454e545f415f414d4f554e54000000604082015260600190565b6020808252600d908201527f4552525f4c494d49545f4f555400000000000000000000000000000000000000604082015260600190565b6020808252600c908201527f4552525f4c494d49545f494e0000000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f526f757465723a20455850495245440000000000000000000000000000000000604082015260600190565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f5560408201527f4e54000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f526f757465723a20496e76616c69642070616972000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff841660408301526080606083015261384e6080830184614e31565b9283526020830191909152604082015260600190565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b60405181810167ffffffffffffffff8111828210171561543a57fe5b604052919050565b600067ffffffffffffffff82111561545657fe5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461548257600080fd5b50565b801515811461548257600080fd5b63ffffffff8116811461548257600080fdfe5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220c079e0a9198e715ca89f40135a2c6bf6de3b9d76a6755a9860dc4fc3aa952f1c64736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c8063b05f579e116100d6578063d59e44ee1161007f578063fa3219d511610059578063fa3219d514610458578063fbf4513514610478578063fde1adda14610498576101d5565b8063d59e44ee146103f8578063e1f4a78414610418578063ebb5d2e914610438576101d5565b8063c45a0155116100b0578063c45a0155146103b0578063ce819632146103c5578063d0f2c82a146103d8576101d5565b8063b05f579e1461035d578063b56b681d14610370578063bff51d7114610390576101d5565b80636cb4942811610138578063a4aabb0811610112578063a4aabb0814610308578063a67d0e3c14610328578063ad5c464814610348576101d5565b80636cb49428146102b5578063840c34d0146102c85780639c91fcb5146102db576101d5565b80634c17fd7c116101695780634c17fd7c146102545780635cae031014610282578063674ee80b146102a2576101d5565b80630e2f024c146101da5780633990ba54146102105780634b75f54f14610232576101d5565b366101d5573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101d357fe5b005b600080fd5b3480156101e657600080fd5b506101fa6101f5366004614963565b6104ab565b6040516102079190615382565b60405180910390f35b61022361021e3660046148f2565b61058e565b604051610207939291906153d4565b34801561023e57600080fd5b506102476105f9565b6040516102079190614e9a565b34801561026057600080fd5b5061027461026f366004614624565b61061d565b60405161020792919061538b565b34801561028e57600080fd5b506101d361029d366004614b09565b61072d565b6101d36102b0366004614a8f565b610900565b6101fa6102c3366004614c01565b610b42565b6101fa6102d6366004614c68565b610c34565b3480156102e757600080fd5b506102fb6102f6366004614b09565b611004565b6040516102079190615129565b34801561031457600080fd5b50610274610323366004614963565b611167565b34801561033457600080fd5b506101d361034336600461476d565b611250565b34801561035457600080fd5b506102476113f9565b6102fb61036b366004614a8f565b61141d565b34801561037c57600080fd5b5061027461038b3660046148f2565b611556565b34801561039c57600080fd5b506102fb6103ab366004614804565b611600565b3480156103bc57600080fd5b5061024761168b565b6101fa6103d3366004614cda565b6116af565b3480156103e457600080fd5b506101fa6103f3366004614a0c565b611940565b34801561040457600080fd5b506102fb61041336600461476d565b611aac565b34801561042457600080fd5b506102746104333660046145a0565b611b58565b34801561044457600080fd5b506101fa6104533660046148f2565b611bb7565b34801561046457600080fd5b506102fb610473366004614b09565b611cf6565b34801561048457600080fd5b506102236104933660046146df565b611d61565b6102fb6104a6366004614a8f565b611e6b565b600080856104b9578a6104db565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fd505accf00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8e169063d505accf9061053c903390309086908d908c908c908c90600401614ebb565b600060405180830381600087803b15801561055657600080fd5b505af115801561056a573d6000803e3d6000fd5b5050505061057d8d8d8d8d8d8d8d611bb7565b9d9c50505050505050505050505050565b600080600083428110156105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b60405180910390fd5b6105e58b8b8b8b8b8b611f7a565b919d909c50909a5098505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080864281101561065b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b600087610668578c61068a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b90508f73ffffffffffffffffffffffffffffffffffffffff1663d505accf3330848d8c8c8c6040518863ffffffff1660e01b81526004016106d19796959493929190614ebb565b600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b50505050506107138f8f8f8f8f8f8f61208f565b8093508194505050509c509c9a5050505050505050505050565b8042811015610768576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b61079588338787600081811061077a57fe5b905060200201602081019061078f919061452f565b8a61241f565b6107d4888686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506125ee915050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610849903090600401614e9a565b60206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190614df6565b9050868110156108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b6108f473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee85836129f0565b50505050505050505050565b804281101561093b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b3461096581878760008161094b57fe5b9050602002016020810190610960919061452f565b612ad6565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8a16906370a08231906109ba908890600401614e9a565b60206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190614df6565b9050610a6b7f00000000000000000000000000000000000000000000000000000000000000008888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92506125ee915050565b87610aff828b73ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401610aa99190614e9a565b60206040518083038186803b158015610ac157600080fd5b505afa158015610ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af99190614df6565b90612c27565b1015610b37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b505050505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314572adb887f000000000000000000000000000000000000000000000000000000000000000088886040518563ffffffff1660e01b8152600401610bc49493929190615095565b602060405180830381600087803b158015610bde57600080fd5b505af1158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c16919061454b565b9050610c2781888860008088611f7a565b9998505050505050505050565b60008142811015610c71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b610c7b8685612c9f565b5060005b8751811015610f9c576000888281518110610c9657fe5b60200260200101515160011415610d01576000898381518110610cb557fe5b6020026020010151600081518110610cc957fe5b60200260200101519050610cf9816020015182604001518360000151846060015185608001518660a00151612d4a565b915050610f87565b6000808a8481518110610d1057fe5b6020026020010151600181518110610d2457fe5b602002602001015190506000600167ffffffffffffffff81118015610d4857600080fd5b50604051908082528060200260200182016040528015610d72578160200160208202803683370190505b509050816000015181600081518110610d8757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166367f84adc7f0000000000000000000000000000000000000000000000000000000000000000856020015186604001518760600151876040518663ffffffff1660e01b8152600401610e50959493929190615015565b60006040518083038186803b158015610e6857600080fd5b505afa158015610e7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610ec29190810190614d56565b905080600081518110610ed157fe5b602002602001015193508260800151841115610f19576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151a4565b505060008b8581518110610f2957fe5b6020026020010151600081518110610f3d57fe5b60200260200101519050610f698160200151826040015183600001518685608001518660a00151612d4a565b9350610f8382602001518360000151858560600151612f09565b5050505b610f918185613142565b935050600101610c7f565b5083821115610fd7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90615280565b610fea8533610fe5886131b4565b6129f0565b50610ff98633610fe5896131b4565b505095945050505050565b60608142811015611041576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6110a1897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506132e492505050565b91506110e48933888860008181106110b557fe5b90506020020160208101906110ca919061452f565b856000815181106110d757fe5b602002602001015161241f565b611124898388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061344f915050565b61115a73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee858460018651038151811061114d57fe5b60200260200101516129f0565b5050979650505050505050565b600080600086611177578b611199565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fd505accf00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8f169063d505accf906111fa903390309086908e908d908d908d90600401614ebb565b600060405180830381600087803b15801561121457600080fd5b505af1158015611228573d6000803e3d6000fd5b5050505061123b8e8e8e8e8e8e8e611556565b909f909e509c50505050505050505050505050565b804281101561128b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b61129d89338787600081811061077a57fe5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8a16906370a08231906112f2908790600401614e9a565b60206040518083038186803b15801561130a57600080fd5b505afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190614df6565b90506113838a8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506125ee915050565b866113c1828b73ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401610aa99190614e9a565b10156108f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060814281101561145a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6114887f00000000000000000000000000000000000000000000000000000000000000008989348a8a6136ed565b91506114af8260008151811061149a57fe5b60200260200101518787600081811061094b57fe5b61150f7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061344f915050565b8160008151811061151c57fe5b602002602001015134111561154b5761154b338360008151811061153c57fe5b60200260200101513403613858565b509695505050505050565b6000808242811015611594576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6115c38a8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b3061208f565b90935091506115d3898685613995565b6115f273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee86846129f0565b505097509795505050505050565b6060814281101561163d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b61164a89898989896132e4565b915061167389338760008151811061165e57fe5b6020026020010151856000815181106110d757fe5b61167f8983878761344f565b50979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081428110156116ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6116f68786612c9f565b50600061170287613b6a565b6117ab576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906370a0823190611758903390600401614e9a565b60206040518083038186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190614df6565b90505b60005b8951811015611855576000805b8b83815181106117c757fe5b60200260200101515181101561183f5760008c84815181106117e557fe5b602002602001015182815181106117f857fe5b60200260200101519050600082111561181357606081018390525b61183481602001518260400151836000015184606001518560800151613b9c565b9250506001016117bb565b5061184a8186613142565b9450506001016117ae565b506118618733856129f0565b506118708833610fe58b6131b4565b5061187a87613b6a565b156118be57848310156118b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90615249565b611934565b846118fc828973ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610aa99190614e9a565b1015611934576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce9061516d565b50509695505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166314572adb8a8a88886040518563ffffffff1660e01b81526004016119a29493929190615095565b602060405180830381600087803b1580156119bc57600080fd5b505af11580156119d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f4919061454b565b9050611a06818a8a8a8a600080614049565b50506040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821690636a62784290611a5a908690600401614e9a565b602060405180830381600087803b158015611a7457600080fd5b505af1158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c279190614df6565b60608142811015611ae9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611af78a8a8a8a8a8a6136ed565b9150611b0b8a33888860008181106110b557fe5b611b4b8a838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061344f915050565b5098975050505050505050565b6000808242811015611b96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611ba58b8b8b8b8b8b8b61208f565b909c909b509950505050505050505050565b60008142811015611bf4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611c2489897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611b58565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152909350611cd791508990869073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190611c82903090600401614e9a565b60206040518083038186803b158015611c9a57600080fd5b505afa158015611cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd29190614df6565b613995565b61115a73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee85846129f0565b60608142811015611d33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b6110a1897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a6136ed565b60008060008342811015611da1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611db08d8d8d8d8d8d8d614049565b6040517f6a627842000000000000000000000000000000000000000000000000000000008152919550935073ffffffffffffffffffffffffffffffffffffffff8e1690636a62784290611e07908990600401614e9a565b602060405180830381600087803b158015611e2157600080fd5b505af1158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e599190614df6565b91505099509950999650505050505050565b60608142811015611ea8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152b7565b611f087f000000000000000000000000000000000000000000000000000000000000000089348a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506132e492505050565b9150611f1a8260008151811061149a57fe5b61154b7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061344f915050565b6000806000611fae89897f00000000000000000000000000000000000000000000000000000000000000008a348b8b614084565b9093509150611fbf88338b8661241f565b611fc9828a612ad6565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1690636a6278429061201b908790600401614e9a565b602060405180830381600087803b15801561203557600080fd5b505af1158015612049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206d9190614df6565b9050813411156120835761208333833403613858565b96509650969350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e5e31b138a6040518263ffffffff1660e01b81526004016120eb9190614e9a565b60206040518083038186803b15801561210357600080fd5b505afa158015612117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213b9190614dda565b612171576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce9061534b565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a16906323b872dd906121c79033908d908b90600401614f09565b602060405180830381600087803b1580156121e157600080fd5b505af11580156121f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122199190614dda565b506000808a73ffffffffffffffffffffffffffffffffffffffff166389afcb44866040518263ffffffff1660e01b81526004016122569190614e9a565b6040805180830381600087803b15801561226f57600080fd5b505af1158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a79190614e0e565b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663544caa568c8c6040518363ffffffff1660e01b8152600401612308929190614f3a565b604080518083038186803b15801561231f57600080fd5b505afa158015612333573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123579190614567565b5090508073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614612394578183612397565b82825b9095509350878510156123d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90615212565b86841015612410576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151db565b50505097509795505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106124fc57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016124bf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461255e576040519150601f19603f3d011682016040523d82523d6000602084013e612563565b606091505b5091509150818015612591575080511580612591575080806020019051602081101561258e57600080fd5b50515b6125e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806154c96024913960400191505060405180910390fd5b505050505050565b8260005b83518110156129e957600084828151811061260957fe5b6020026020010151905060008060008060008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b815260040161269e93929190614f61565b60c06040518083038186803b1580156126b657600080fd5b505afa1580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ee9190614b8e565b955095509550955095509550612737858d73ffffffffffffffffffffffffffffffffffffffff166370a082318d6040518263ffffffff1660e01b8152600401610aa99190614e9a565b6040517f671a11b500000000000000000000000000000000000000000000000000000000815290995073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063671a11b5906127b6908c90899089908990899089906004016153ea565b60206040518083038186803b1580156127ce57600080fd5b505afa1580156127e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128069190614df6565b97508596505050505050506000808573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561285a57600080fd5b505afa15801561286e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612892919061454b565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146128cc578360006128d0565b6000845b91509150600060018b510388106128e757896128ff565b8a88600101815181106128f657fe5b60200260200101515b604080516000815260208101918290527f022c0d9f0000000000000000000000000000000000000000000000000000000090915290915073ffffffffffffffffffffffffffffffffffffffff88169063022c0d9f906129679086908690869060248101615399565b600060405180830381600087803b15801561298157600080fd5b505af1158015612995573d6000803e3d6000fd5b505050507fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c488786866040516129cc939291906150f9565b60405180910390a15091965050600190940193506125f292505050565b5050505050565b6000816129ff57506001612acf565b612a0884613b6a565b15612ac0576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90612a7f908590600401615382565b600060405180830381600087803b158015612a9957600080fd5b505af1158015612aad573d6000803e3d6000fd5b50505050612abb8383613858565b612acb565b612acb848484613995565b5060015b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015612b3e57600080fd5b505af1158015612b52573d6000803e3d6000fd5b50506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb9250612bcb9150849086906004016150d3565b602060405180830381600087803b158015612be557600080fd5b505af1158015612bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1d9190614dda565b612c2357fe5b5050565b80820382811115612c9957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b6000612caa83613b6a565b15612d35577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015612d1757600080fd5b505af1158015612d2b573d6000803e3d6000fd5b5050505050612d41565b612d418333308561241f565b50600192915050565b604080516001808252818301909252600091829190602080830190803683370190505090508581600081518110612d7d57fe5b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526040517f67f84adc0000000000000000000000000000000000000000000000000000000081526000917f000000000000000000000000000000000000000000000000000000000000000016906367f84adc90612e28907f0000000000000000000000000000000000000000000000000000000000000000908d908d908c908990600401615015565b60006040518083038186803b158015612e4057600080fd5b505afa158015612e54573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612e9a9190810190614d56565b905080600081518110612ea957fe5b6020026020010151925084831115612eed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151a4565b61193489888584600181518110612f0057fe5b60200260200101515b612f14848484613995565b600083905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612f6157600080fd5b505afa158015612f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f99919061454b565b905060008060008373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614612fdc578560008561305d565b6000868673ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561302557600080fd5b505afa158015613039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305d919061454b565b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152929550909350915073ffffffffffffffffffffffffffffffffffffffff86169063022c0d9f906130ca9086908690309060248101615399565b600060405180830381600087803b1580156130e457600080fd5b505af11580156130f8573d6000803e3d6000fd5b505050507fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c4888878360405161312f939291906150f9565b60405180910390a1505050505050505050565b80820182811015612c9957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b60006131bf82613b6a565b1561328d576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613236903090600401614e9a565b60206040518083038186803b15801561324e57600080fd5b505afa158015613262573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132869190614df6565b90506132df565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190613236903090600401614e9a565b919050565b6040517f119220a500000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063119220a590613381907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a908990600401615015565b60006040518083038186803b15801561339957600080fd5b505afa1580156133ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526133f39190810190614d56565b9050828160018351038151811061340657fe5b60200260200101511015613446576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b95945050505050565b8360005b83518110156125e657600084828151811061346a57fe5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156134bc57600080fd5b505afa1580156134d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f4919061454b565b9050600087846001018151811061350757fe5b6020026020010151905060008060008473ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461355257836000866135d3565b6000848773ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561359b57600080fd5b505afa1580156135af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d3919061454b565b925092509250600060018b510388106135ec5789613604565b8a88600101815181106135fb57fe5b60200260200101515b604080516000815260208101918290527f022c0d9f0000000000000000000000000000000000000000000000000000000090915290915073ffffffffffffffffffffffffffffffffffffffff88169063022c0d9f9061366c9087908790869060248101615399565b600060405180830381600087803b15801561368657600080fd5b505af115801561369a573d6000803e3d6000fd5b505050507fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c488786846040516136d1939291906150f9565b60405180910390a1509650506001909401935061345392505050565b6040517f67f84adc00000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906367f84adc9061378c907f0000000000000000000000000000000000000000000000000000000000000000908b908b908b908a908a90600401614f91565b60006040518083038186803b1580156137a457600080fd5b505afa1580156137b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526137fe9190810190614d56565b9050838160008151811061380e57fe5b6020026020010151111561384e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151a4565b9695505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b602083106138cf57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613892565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613931576040519150601f19603f3d011682016040523d82523d6000602084013e613936565b606091505b5050905080613990576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806154a66023913960400191505060405180910390fd5b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310613a6a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613a2d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613acc576040519150601f19603f3d011682016040523d82523d6000602084013e613ad1565b606091505b5091509150818015613aff575080511580613aff5750808060200190516020811015613afc57600080fd5b50515b6129e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14919050565b6000613ba9868585613995565b6000806000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b8152600401613c2f93929190614f61565b60c06040518083038186803b158015613c4757600080fd5b505afa158015613c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c7f9190614b8e565b95509550955095509550506000613cc9868e73ffffffffffffffffffffffffffffffffffffffff166370a082318e6040518263ffffffff1660e01b8152600401610aa99190614e9a565b6040517f671a11b500000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063671a11b590613d489084908a908a908a908a908a906004016153ea565b60206040518083038186803b158015613d6057600080fd5b505afa158015613d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d989190614df6565b965050505050505060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401613ddb9190614e9a565b60206040518083038186803b158015613df357600080fd5b505afa158015613e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2b9190614df6565b90506000808773ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613e7657600080fd5b505afa158015613e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eae919061454b565b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614613ee857836000613eec565b6000845b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152919350915073ffffffffffffffffffffffffffffffffffffffff89169063022c0d9f90613f569085908590309060248101615399565b600060405180830381600087803b158015613f7057600080fd5b505af1158015613f84573d6000803e3d6000fd5b505050507fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c4888858b604051613fbb939291906150f9565b60405180910390a1614000838a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aa99190614e9a565b94508585101561403c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906152ee565b5050505095945050505050565b60008061405b89898989898989614084565b909250905061406c88338b8561241f565b61407887338b8461241f565b97509795505050505050565b6000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663327494618c8c8c6040518463ffffffff1660e01b81526004016140e793929190614f61565b604080518083038186803b1580156140fe57600080fd5b505afa158015614112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141369190614e0e565b91509150816000148015614148575080155b15614158578793508692506115f2565b6040517fad615dec00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063ad615dec906141d1908c90879087906004016153d4565b60206040518083038186803b1580156141e957600080fd5b505afa1580156141fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142219190614df6565b905087811161426f5785811015614264576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce906151db565b889450925082612410565b6040517fad615dec00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063ad615dec906142e8908c90879089906004016153d4565b60206040518083038186803b15801561430057600080fd5b505afa158015614314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143389190614df6565b90508981111561434457fe5b8781101561437e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90615212565b9c979b50969950505050505050505050565b80356132df81615460565b60008083601f8401126143ac578182fd5b50813567ffffffffffffffff8111156143c3578182fd5b60208301915083602080830285010111156143dd57600080fd5b9250929050565b600082601f8301126143f4578081fd5b8135602061440961440483615442565b61541e565b82815281810190858301855b85811015614511578135880189603f82011261442f578788fd5b8581013561443f61440482615442565b808282528882019150604084018d604060c086028701011115614460578b8cfd5b8b94505b838510156144fb5760c0818f03121561447b578b8cfd5b60405160c0810181811067ffffffffffffffff8211171561449857fe5b60405281356144a681615460565b81526144b3828c01614390565b8b8201526144c360408301614390565b6040820152606082810135908201526080808301359082015260a080830135908201528352600194909401939189019160c001614464565b5087525050509284019290840190600101614415565b5090979650505050505050565b803560ff811681146132df57600080fd5b600060208284031215614540578081fd5b8135612acf81615460565b60006020828403121561455c578081fd5b8151612acf81615460565b60008060408385031215614579578081fd5b825161458481615460565b602084015190925061459581615460565b809150509250929050565b600080600080600080600080610100898b0312156145bc578384fd5b88356145c781615460565b975060208901356145d781615460565b965060408901356145e781615460565b9550606089013594506080890135935060a0890135925060c089013561460c81615460565b8092505060e089013590509295985092959890939650565b6000806000806000806000806000806000806101808d8f031215614646578586fd5b8c3561465181615460565b9b5060208d013561466181615460565b9a5060408d013561467181615460565b995060608d0135985060808d0135975060a08d0135965060c08d013561469681615460565b955060e08d013594506101008d01356146ae81615485565b93506146bd6101208e0161451e565b92506101408d013591506101608d013590509295989b509295989b509295989b565b60008060008060008060008060006101208a8c0312156146fd578283fd5b893561470881615460565b985060208a013561471881615460565b975060408a013561472881615460565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013561475481615460565b809250506101008a013590509295985092959850929598565b60008060008060008060008060e0898b031215614788578182fd5b883561479381615460565b975060208901356147a381615460565b96506040890135955060608901359450608089013567ffffffffffffffff8111156147cc578283fd5b6147d88b828c0161439b565b90955093505060a08901356147ec81615460565b8092505060c089013590509295985092959890939650565b600080600080600080600060e0888a03121561481e578081fd5b873561482981615460565b965060208881013561483a81615460565b96506040890135955060608901359450608089013567ffffffffffffffff811115614863578283fd5b8901601f81018b13614873578283fd5b803561488161440482615442565b81815283810190838501858402850186018f101561489d578687fd5b8694505b838510156148c85780356148b481615460565b8352600194909401939185019185016148a1565b5080975050505050506148dd60a08901614390565b915060c0880135905092959891949750929550565b600080600080600080600060e0888a03121561490c578081fd5b873561491781615460565b9650602088013561492781615460565b955060408801359450606088013593506080880135925060a088013561494c81615460565b8092505060c0880135905092959891949750929550565b60008060008060008060008060008060006101608c8e031215614984578485fd5b8b3561498f81615460565b9a5060208c013561499f81615460565b995060408c0135985060608c0135975060808c0135965060a08c01356149c481615460565b955060c08c0135945060e08c01356149db81615485565b93506149ea6101008d0161451e565b92506101208c013591506101408c013590509295989b509295989b9093969950565b600080600080600080600060e0888a031215614a26578081fd5b8735614a3181615460565b96506020880135614a4181615460565b955060408801359450606088013593506080880135614a5f81615493565b925060a0880135614a6f81615493565b915060c0880135614a7f81615460565b8091505092959891949750929550565b60008060008060008060a08789031215614aa7578384fd5b8635614ab281615460565b955060208701359450604087013567ffffffffffffffff811115614ad4578485fd5b614ae089828a0161439b565b9095509350506060870135614af481615460565b80925050608087013590509295509295509295565b600080600080600080600060c0888a031215614b23578081fd5b8735614b2e81615460565b96506020880135955060408801359450606088013567ffffffffffffffff811115614b57578182fd5b614b638a828b0161439b565b9095509350506080880135614b7781615460565b8092505060a0880135905092959891949750929550565b60008060008060008060c08789031215614ba6578384fd5b8651614bb181615460565b8096505060208701519450604087015193506060870151614bd181615493565b6080880151909350614be281615493565b60a0880151909250614bf381615493565b809150509295509295509295565b600080600080600060a08688031215614c18578283fd5b8535614c2381615460565b9450602086013593506040860135614c3a81615493565b92506060860135614c4a81615493565b91506080860135614c5a81615460565b809150509295509295909350565b600080600080600060a08688031215614c7f578283fd5b853567ffffffffffffffff811115614c95578384fd5b614ca1888289016143e4565b9550506020860135614cb281615460565b93506040860135614cc281615460565b94979396509394606081013594506080013592915050565b60008060008060008060c08789031215614cf2578384fd5b863567ffffffffffffffff811115614d08578485fd5b614d1489828a016143e4565b9650506020870135614d2581615460565b94506040870135614d3581615460565b959894975094956060810135955060808101359460a0909101359350915050565b60006020808385031215614d68578182fd5b825167ffffffffffffffff811115614d7e578283fd5b8301601f81018513614d8e578283fd5b8051614d9c61440482615442565b8181528381019083850185840285018601891015614db8578687fd5b8694505b8385101561167f578051835260019490940193918501918501614dbc565b600060208284031215614deb578081fd5b8151612acf81615485565b600060208284031215614e07578081fd5b5051919050565b60008060408385031215614e20578182fd5b505080516020909101519092909150565b60008151808452815b81811015614e5657602081850181015186830182015201614e3a565b81811115614e675782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681529183166020830152909116604082015260600190565b600060a0820173ffffffffffffffffffffffffffffffffffffffff808a1684526020818a1681860152818916604086015287606086015260a060808601528286845260c086019050879350845b87811015615005578435614ff181615460565b841682529382019390820190600101614fde565b509b9a5050505050505050505050565b600060a0820173ffffffffffffffffffffffffffffffffffffffff8089168452602081891681860152818816604086015286606086015260a0608086015282865180855260c0870191508288019450855b81811015615084578551851683529483019491830191600101615066565b50909b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015263ffffffff9081166040830152909116606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681526020810192909252909116604082015260600190565b6020808252825182820181905260009190848201906040850190845b8181101561516157835183529284019291840191600101615145565b50909695505050505050565b60208082526012908201527f3c6d696e546f74616c416d6f756e744f75740000000000000000000000000000604082015260600190565b6020808252601e908201527f526f757465723a204558434553534956455f494e5055545f414d4f554e540000604082015260600190565b6020808252601d908201527f526f757465723a20494e53554646494349454e545f425f414d4f554e54000000604082015260600190565b6020808252601d908201527f526f757465723a20494e53554646494349454e545f415f414d4f554e54000000604082015260600190565b6020808252600d908201527f4552525f4c494d49545f4f555400000000000000000000000000000000000000604082015260600190565b6020808252600c908201527f4552525f4c494d49545f494e0000000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f526f757465723a20455850495245440000000000000000000000000000000000604082015260600190565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f5560408201527f4e54000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f526f757465723a20496e76616c69642070616972000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff841660408301526080606083015261384e6080830184614e31565b9283526020830191909152604082015260600190565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b60405181810167ffffffffffffffff8111828210171561543a57fe5b604052919050565b600067ffffffffffffffff82111561545657fe5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461548257600080fd5b50565b801515811461548257600080fd5b63ffffffff8116811461548257600080fdfe5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220c079e0a9198e715ca89f40135a2c6bf6de3b9d76a6755a9860dc4fc3aa952f1c64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}