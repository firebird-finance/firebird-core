{
  "address": "0x259cAc19fBd749bcAB76012f220d4ee95A3631DA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SetFeeAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        }
      ],
      "name": "SetFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SetFeeToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "pooledTokens",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "swap",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "SwapCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_pooledTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decimals",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lpTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delayTimeLock",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_pooledTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decimals",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lpTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "timeLock",
          "type": "address"
        }
      ],
      "name": "createPoolInternal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "contract ISwapCreator",
          "name": "_swapCreator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isTimelock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "setFeeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapCreator",
          "name": "_swapCreator",
          "type": "address"
        }
      ],
      "name": "setSwapCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapCreator",
      "outputs": [
        {
          "internalType": "contract ISwapCreator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ecc8055c1a38b6f5e66d24d6a6305fd9ccfa08c6c2625c789b6edf933eb40c7",
  "receipt": {
    "to": null,
    "from": "0x0FFaD0c8b6acB224999e41e8229D0De90f914832",
    "contractAddress": "0x259cAc19fBd749bcAB76012f220d4ee95A3631DA",
    "transactionIndex": 1,
    "gasUsed": "4216477",
    "logsBloom": "0x
    "blockHash": "0x27a569f7429d9481ddc8ab19319ea444bc75adc9604ca9bdc76481fe56cd8815",
    "transactionHash": "0x9ecc8055c1a38b6f5e66d24d6a6305fd9ccfa08c6c2625c789b6edf933eb40c7",
    "logs": [],
    "blockNumber": 14208612,
    "cumulativeGasUsed": "4216477",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "de4b5c98aaefeaf0642d1549f17f4799",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetFeeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetFeeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"pooledTokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"SwapCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_pooledTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayTimeLock\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_pooledTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"timeLock\",\"type\":\"address\"}],\"name\":\"createPoolInternal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"contract ISwapCreator\",\"name\":\"_swapCreator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isTimelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapCreator\",\"name\":\"_swapCreator\",\"type\":\"address\"}],\"name\":\"setSwapCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapCreator\",\"outputs\":[{\"internalType\":\"contract ISwapCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableSwap/StableSwapFactory.sol\":\"StableSwapFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/TimeLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract TimeLock {\\n    using SafeMath for uint256;\\n    event NewAdmin(address indexed newAdmin);\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\n    event NewDelay(uint indexed newDelay);\\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n\\n    uint public constant GRACE_PERIOD = 14 days;\\n    uint public constant MINIMUM_DELAY = 1 days;\\n    uint public constant MAXIMUM_DELAY = 30 days;\\n    bool private _initialized;\\n    address public admin;\\n    address public pendingAdmin;\\n    uint public delay;\\n    bool public admin_initialized;\\n    mapping(bytes32 => bool) public queuedTransactions;\\n\\n    constructor() public {\\n        admin_initialized = false;\\n        _initialized = false;\\n    }\\n\\n    function initialize(address _admin, uint _delay) public {\\n        require(_initialized == false, \\\"Timelock::constructor: Initialized must be false.\\\");\\n        require(_delay >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(_delay <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n        delay = _delay;\\n        admin = _admin;\\n        _initialized = true;\\n        emit NewAdmin(admin);\\n        emit NewDelay(delay);\\n    }\\n\\n    receive() external payable {}\\n\\n    function setDelay(uint _delay) public {\\n        require(msg.sender == address(this), \\\"Timelock::setDelay: Call must come from Timelock.\\\");\\n        require(_delay >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(_delay <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n        delay = _delay;\\n        emit NewDelay(delay);\\n    }\\n\\n    function acceptAdmin() public {\\n        require(msg.sender == pendingAdmin, \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\");\\n        admin = msg.sender;\\n        pendingAdmin = address(0);\\n        emit NewAdmin(admin);\\n    }\\n\\n    function setPendingAdmin(address _pendingAdmin) public {\\n        // allows one time setting of admin for deployment purposes\\n        if (admin_initialized) {\\n            require(msg.sender == address(this), \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\");\\n        } else {\\n            require(msg.sender == admin, \\\"Timelock::setPendingAdmin: First call must come from admin.\\\");\\n            admin_initialized = true;\\n        }\\n        pendingAdmin = _pendingAdmin;\\n\\n        emit NewPendingAdmin(pendingAdmin);\\n    }\\n\\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\\n        require(msg.sender == admin, \\\"Timelock::queueTransaction: Call must come from admin.\\\");\\n        require(eta >= getBlockTimestamp().add(delay), \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = true;\\n\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = false;\\n\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\n    }\\n\\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\\n        require(msg.sender == admin, \\\"Timelock::executeTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        require(queuedTransactions[txHash], \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\");\\n        require(getBlockTimestamp() >= eta, \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\");\\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \\\"Timelock::executeTransaction: Transaction is stale.\\\");\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call{value : value}(callData);\\n        require(success, \\\"Timelock::executeTransaction: Transaction execution reverted.\\\");\\n\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\n\\n        return returnData;\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xd96d2ee9b62c0dde565a53d45bef1859a2a501d9b193769684079b28e85b1d4f\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapFactory.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStableSwapFactory {\\n    event SwapCreated(IERC20[] pooledTokens, address indexed swap, uint length);\\n    event SetFeeTo(address indexed feeTo);\\n    event SetFeeToken(address indexed token);\\n    event SetFeeAmount(uint indexed amount);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function allPools(uint) external view returns (address pool);\\n    function isPool(address) external view returns (bool);\\n    function allPoolsLength() external view returns (uint);\\n\\n    function isTimelock(address) external view returns (bool);\\n\\n    function createPool(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        uint256 _withdrawFee,\\n        uint delayTimeLock\\n    ) external returns (address pool);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setFeeToken(address _token) external;\\n    function setFeeAmount(uint _token) external;\\n}\\n\",\"keccak256\":\"0x2f4aeac402451c76bfb174d943bf429b1c0ca43240043bf9bed2ccc8d39a2dfc\"},\"contracts/interfaces/ISwapCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISwapCreator {\\n\\n    function create(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        uint256 _withdrawFee,\\n        address timeLock\\n    ) external returns (address);\\n}\",\"keccak256\":\"0x40ccb9e870bb43d228d0d20de0569cf552b74bd965bf8e0dfd7a55771fc28296\",\"license\":\"MIT\"},\"contracts/stableSwap/StableSwapFactory.sol\":{\"content\":\"pragma solidity =0.6.12;\\n\\nimport '../interfaces/IStableSwapFactory.sol';\\nimport '../interfaces/ISwapCreator.sol';\\nimport '../TimeLock.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract StableSwapFactory is IStableSwapFactory {\\n    using SafeERC20 for IERC20;\\n\\n    address public override feeTo;\\n    address public override feeToSetter;\\n    address public feeToken;\\n    uint public feeAmount;\\n\\n    address[] public override allPools;\\n    mapping(address => bool) private _pools;\\n    mapping(address => bool) private _timelocks;\\n    ISwapCreator public swapCreator;\\n    bool private _initialized = false;\\n\\n    function initialize(address _feeToSetter, ISwapCreator _swapCreator) public {\\n        require(_initialized == false, \\\"StableSwapFactory: initialized\\\");\\n        feeToSetter = _feeToSetter;\\n        swapCreator = _swapCreator;\\n        _initialized = true;\\n    }\\n\\n    function isPool(address b) external override view returns (bool) {\\n        return _pools[b];\\n    }\\n\\n    function isTimelock(address b) external override view returns (bool) {\\n        return _timelocks[b];\\n    }\\n\\n    function allPoolsLength() external override view returns (uint) {\\n        return allPools.length;\\n    }\\n\\n    function createPool(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        uint256 _withdrawFee,\\n        uint delayTimeLock\\n    ) external override returns (address) {\\n        TimeLock timelock = new TimeLock();\\n        address swap = createPoolInternal(\\n            _pooledTokens,\\n            decimals,\\n            lpTokenName,\\n            lpTokenSymbol,\\n            _a,\\n            _fee,\\n            _adminFee,\\n            _withdrawFee,\\n            address(timelock)\\n        );\\n\\n        timelock.initialize(msg.sender, delayTimeLock);\\n        _timelocks[address(timelock)] = true;\\n        return swap;\\n    }\\n\\n    function createPoolInternal(\\n        IERC20[] memory _pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        uint256 _withdrawFee,\\n        address timeLock\\n    ) public returns (address) {\\n        if (feeTo != address(0) && feeToken != address(0) && feeAmount > 0) {\\n            IERC20(feeToken).safeTransferFrom(msg.sender, feeTo, feeAmount);\\n        }\\n\\n        address swap = ISwapCreator(swapCreator).create(\\n            _pooledTokens,\\n            decimals,\\n            lpTokenName,\\n            lpTokenSymbol,\\n            _a,\\n            _fee,\\n            _adminFee,\\n            _withdrawFee,\\n            timeLock\\n        );\\n\\n        allPools.push(swap);\\n        _pools[swap] = true;\\n        emit SwapCreated(_pooledTokens, swap, allPools.length);\\n        return swap;\\n    }\\n\\n    function setSwapCreator(ISwapCreator _swapCreator) external {\\n        require(msg.sender == feeToSetter, 'FLP: FORBIDDEN');\\n        swapCreator = _swapCreator;\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, 'FLP: FORBIDDEN');\\n        feeTo = _feeTo;\\n        emit SetFeeTo(_feeTo);\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, 'FLP: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setFeeToken(address _token) external override {\\n        require(msg.sender == feeToSetter, 'FLP: FORBIDDEN');\\n        feeToken = _token;\\n        emit SetFeeToken(_token);\\n    }\\n\\n    function setFeeAmount(uint _feeAmount) external override {\\n        require(msg.sender == feeToSetter, 'FLP: FORBIDDEN');\\n        feeAmount = _feeAmount;\\n        emit SetFeeAmount(_feeAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x709f92365471bb73419ba03dca820f7ccdda87744d361c9adf408e8fb1f2ef28\"}},\"version\":1}",
  "bytecode": "0x60806040526007805460ff60a01b1916905534801561001d57600080fd5b506136a78061002d6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063647846a5116100b2578063a2e74af611610081578063d7d3ba3411610066578063d7d3ba341461078a578063efde4e64146107bd578063f46901ed146107c55761011b565b8063a2e74af61461074f578063bb08e673146107825761011b565b8063647846a5146106dd57806369e15404146106e55780636b392680146106ff5780639e93963c1461071c5761011b565b806341d1de97116100ee57806341d1de97146103f1578063485cc9551461040e578063541b3983146104495780635b16ebb7146106965761011b565b8063017e7e581461012057806304b723cd14610151578063094b7415146103b457806315cce224146103bc575b600080fd5b6101286107f8565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610128600480360361012081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460208302840111640100000000831117156101b757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561020757600080fd5b82018360208201111561021957600080fd5b8035906020019184602083028401116401000000008311171561023b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561028b57600080fd5b82018360208201111561029d57600080fd5b803590602001918460018302840111640100000000831117156102bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561031257600080fd5b82018360208201111561032457600080fd5b8035906020019184600183028401116401000000008311171561034657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040810135906060810135906080013573ffffffffffffffffffffffffffffffffffffffff16610814565b610128610c40565b6103ef600480360360208110156103d257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c5c565b005b6101286004803603602081101561040757600080fd5b5035610d51565b6103ef6004803603604081101561042457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610d85565b610128600480360361012081101561046057600080fd5b81019060208101813564010000000081111561047b57600080fd5b82018360208201111561048d57600080fd5b803590602001918460208302840111640100000000831117156104af57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104ff57600080fd5b82018360208201111561051157600080fd5b8035906020019184602083028401116401000000008311171561053357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561058357600080fd5b82018360208201111561059557600080fd5b803590602001918460018302840111640100000000831117156105b757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561060a57600080fd5b82018360208201111561061c57600080fd5b8035906020019184600183028401116401000000008311171561063e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060800135610e9e565b6106c9600480360360208110156106ac57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610fc8565b604080519115158252519081900360200190f35b610128610ff3565b6106ed61100f565b60408051918252519081900360200190f35b6103ef6004803603602081101561071557600080fd5b5035611015565b6106c96004803603602081101561073257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110ce565b6103ef6004803603602081101561076557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110f9565b6101286111c6565b6103ef600480360360208110156107a057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166111e2565b6106ed6112af565b6103ef600480360360208110156107db57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112b5565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000805473ffffffffffffffffffffffffffffffffffffffff1615801590610853575060025473ffffffffffffffffffffffffffffffffffffffff1615155b801561086157506000600354115b15610897576000546003546002546108979273ffffffffffffffffffffffffffffffffffffffff918216923392909116906113a8565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dd3d9fd8c8c8c8c8c8c8c8c8c6040518a63ffffffff1660e01b815260040180806020018060200180602001806020018a81526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185810385528e818151815260200191508051906020019060200280838360005b8381101561096f578181015183820152602001610957565b5050505090500185810384528d818151815260200191508051906020019060200280838360005b838110156109ae578181015183820152602001610996565b5050505090500185810383528c818151815260200191508051906020019080838360005b838110156109ea5781810151838201526020016109d2565b50505050905090810190601f168015610a175780820380516001836020036101000a031916815260200191505b5085810382528b5181528b516020918201918d019080838360005b83811015610a4a578181015183820152602001610a32565b50505050905090810190601f168015610a775780820380516001836020036101000a031916815260200191505b509d5050505050505050505050505050602060405180830381600087803b158015610aa157600080fd5b505af1158015610ab5573d6000803e3d6000fd5b505050506040513d6020811015610acb57600080fd5b810190808051906020019092919050505090506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f8fda8d9c5bfffaab5916d8100abc6eafd9b7d4dae8328a5e6a8e05d21a93fa888c6004805490506040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c1e578181015183820152602001610c06565b50505050905001935050505060405180910390a29a9950505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314610ce257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f0842bcbb92ca6d47ae89816778a843992dff9b876fad009865e1c5df73d46d1f90600090a250565b60048181548110610d5e57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60075474010000000000000000000000000000000000000000900460ff1615610e0f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f537461626c6553776170466163746f72793a20696e697469616c697a65640000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff948516179091556007805474010000000000000000000000000000000000000000921692909316919091177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16179055565b600080604051610ead906117b8565b604051809103906000f080158015610ec9573d6000803e3d6000fd5b5090506000610edf8c8c8c8c8c8c8c8c8a610814565b90508173ffffffffffffffffffffffffffffffffffffffff1663cd6dc68733866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff909216600090815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559150509998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205460ff1690565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60015473ffffffffffffffffffffffffffffffffffffffff16331461109b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600381905560405181907fd854f702b4e23ab27557a75b5b4e72066f8ab6929930f813720339c72eaa8b6390600090a250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205460ff1690565b60015473ffffffffffffffffffffffffffffffffffffffff16331461117f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461126857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045490565b60015473ffffffffffffffffffffffffffffffffffffffff16331461133b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e91a250565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261143d908590611443565b50505050565b60606114a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115209092919063ffffffff16565b80519091501561151b578080602001905160208110156114c457600080fd5b505161151b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613648602a913960400191505060405180910390fd5b505050565b606061152f8484600085611539565b90505b9392505050565b606082471015611594576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806136226026913960400191505060405180910390fd5b61159d856116f4565b61160857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061167257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611635565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146116d4576040519150601f19603f3d011682016040523d82523d6000602084013e6116d9565b606091505b50915091506116e98282866116fa565b979650505050505050565b3b151590565b60608315611709575081611532565b8251156117195782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561177d578181015183820152602001611765565b50505050905090810190601f1680156117aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b611e5c806117c68339019056fe608060405234801561001057600080fd5b506003805460ff19908116909155600080549091169055611e26806100366000396000f3fe6080604052600436106100ec5760003560e01c80636fc1f57e1161008a578063cd6dc68711610059578063cd6dc6871461069e578063e177246e146106e4578063f2b065371461070e578063f851a44014610738576100f3565b80636fc1f57e146106365780637d645fab1461065f578063b1b43ae514610674578063c1a287e214610689576100f3565b80633a66f901116100c65780633a66f901146103135780634dd18bf514610483578063591fcdfe146104c35780636a42b8f814610621576100f3565b80630825f38f146100f85780630e18b681146102be57806326782247146102d5576100f3565b366100f357005b600080fd5b610249600480360360a081101561010e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561014b57600080fd5b82018360208201111561015d57600080fd5b8035906020019184600183028401116401000000008311171561017f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101d257600080fd5b8201836020820111156101e457600080fd5b8035906020019184600183028401116401000000008311171561020657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925061074d915050565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028357818101518382015260200161026b565b50505050905090810190601f1680156102b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ca57600080fd5b506102d3610d95565b005b3480156102e157600080fd5b506102ea610ea4565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561031f57600080fd5b50610471600480360360a081101561033657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561037357600080fd5b82018360208201111561038557600080fd5b803590602001918460018302840111640100000000831117156103a757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156103fa57600080fd5b82018360208201111561040c57600080fd5b8035906020019184600183028401116401000000008311171561042e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610ec0915050565b60408051918252519081900360200190f35b34801561048f57600080fd5b506102d3600480360360208110156104a657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611222565b3480156104cf57600080fd5b506102d3600480360360a08110156104e657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561052357600080fd5b82018360208201111561053557600080fd5b8035906020019184600183028401116401000000008311171561055757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156105aa57600080fd5b8201836020820111156105bc57600080fd5b803590602001918460018302840111640100000000831117156105de57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506113a0915050565b34801561062d57600080fd5b50610471611693565b34801561064257600080fd5b5061064b611699565b604080519115158252519081900360200190f35b34801561066b57600080fd5b506104716116a2565b34801561068057600080fd5b506104716116a9565b34801561069557600080fd5b506104716116b0565b3480156106aa57600080fd5b506102d3600480360360408110156106c157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356116b7565b3480156106f057600080fd5b506102d36004803603602081101561070757600080fd5b503561189f565b34801561071a57600080fd5b5061064b6004803603602081101561073157600080fd5b50356119e2565b34801561074457600080fd5b506102ea6119f7565b600054606090610100900473ffffffffffffffffffffffffffffffffffffffff1633146107c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611a986038913960400191505060405180910390fd5b60008686868686604051602001808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015610838578181015183820152602001610820565b50505050905090810190601f1680156108655780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610898578181015183820152602001610880565b50505050905090810190601f1680156108c55780820380516001836020036101000a031916815260200191505b50604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600490935291205490995060ff16975061096e9650505050505050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180611c57603d913960400191505060405180910390fd5b82610977611a18565b10156109ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526045815260200180611b6b6045913960600191505060405180910390fd5b6109db8362127500611a1c565b6109e3611a18565b1115610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180611b386033913960400191505060405180910390fd5b600081815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558451606090610a7e575083610b34565b85805190602001208560405160200180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182805190602001908083835b60208310610afc57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610abf565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405290505b600060608973ffffffffffffffffffffffffffffffffffffffff1689846040518082805190602001908083835b60208310610b9e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610b61565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610c00576040519150601f19603f3d011682016040523d82523d6000602084013e610c05565b606091505b509150915081610c60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180611d3a603d913960400191505060405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff16847fa560e3198060a2f10670c1ec5b403077ea6ae93ca8de1c32b451dc1a943cd6e78b8b8b8b604051808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015610cea578181015183820152602001610cd2565b50505050905090810190601f168015610d175780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610d4a578181015183820152602001610d32565b50505050905090810190601f168015610d775780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a39998505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611c946038913960400191505060405180910390fd5b600080546101003381027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117808355600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560405191900473ffffffffffffffffffffffffffffffffffffffff16917f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c91a2565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60008054610100900473ffffffffffffffffffffffffffffffffffffffff163314610f36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180611d046036913960400191505060405180910390fd5b610f4a600254610f44611a18565b90611a1c565b821015610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526049815260200180611d776049913960600191505060405180910390fd5b60008686868686604051602001808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015611015578181015183820152602001610ffd565b50505050905090810190601f1680156110425780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561107557818101518382015260200161105d565b50505050905090810190601f1680156110a25780820380516001836020036101000a031916815260200191505b5097505050505050505060405160208183030381529060405280519060200120905060016004600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508673ffffffffffffffffffffffffffffffffffffffff16817f76e2796dc3a81d57b0e8504b647febcbeeb5f4af818e164f11eef8131a6a763f88888888604051808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561117a578181015183820152602001611162565b50505050905090810190601f1680156111a75780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156111da5781810151838201526020016111c2565b50505050905090810190601f1680156112075780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a39695505050505050565b60035460ff161561128a57333014611285576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611ccc6038913960400191505060405180910390fd5b61132b565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1633146112ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b815260200180611be4603b913960400191505060405180910390fd5b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040519116907f69d78e38a01985fbb1462961809b4b2d65531bc93b2b94037f3334b82ca4a75690600090a250565b600054610100900473ffffffffffffffffffffffffffffffffffffffff163314611415576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526037815260200180611ad06037913960400191505060405180910390fd5b60008585858585604051602001808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015611488578181015183820152602001611470565b50505050905090810190601f1680156114b55780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156114e85781810151838201526020016114d0565b50505050905090810190601f1680156115155780820380516001836020036101000a031916815260200191505b5097505050505050505060405160208183030381529060405280519060200120905060006004600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508573ffffffffffffffffffffffffffffffffffffffff16817f2fffc091a501fd91bfbff27141450d3acb40fb8e6d8382b243ec7a812a3aaf8787878787604051808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156115ed5781810151838201526020016115d5565b50505050905090810190601f16801561161a5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561164d578181015183820152602001611635565b50505050905090810190601f16801561167a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a3505050505050565b60025481565b60035460ff1681565b62278d0081565b6201518081565b6212750081565b60005460ff1615611713576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180611b076031913960400191505060405180910390fd5b6201518081101561176f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180611bb06034913960400191505060405180910390fd5b62278d008111156117cb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611c1f6038913960400191505060405180910390fd5b60028190556000805460017fffffffffffffffffffffff0000000000000000000000000000000000000000ff90911661010073ffffffffffffffffffffffffffffffffffffffff8681168202929092177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169290921780845560405192900416917f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c91a26002546040517f948b1f6a42ee138b7e34058ba85a37f716d55ff25ff05a763f15bed6a04c8d2c90600090a25050565b3330146118f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180611dc06031913960400191505060405180910390fd5b62015180811015611953576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180611bb06034913960400191505060405180910390fd5b62278d008111156119af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611c1f6038913960400191505060405180910390fd5b600281905560405181907f948b1f6a42ee138b7e34058ba85a37f716d55ff25ff05a763f15bed6a04c8d2c90600090a250565b60046020526000908152604090205460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b4290565b600082820183811015611a9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a2043616c6c206d75737420636f6d652066726f6d2061646d696e2e54696d656c6f636b3a3a63616e63656c5472616e73616374696f6e3a2043616c6c206d75737420636f6d652066726f6d2061646d696e2e54696d656c6f636b3a3a636f6e7374727563746f723a20496e697469616c697a6564206d7573742062652066616c73652e54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e206973207374616c652e54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e206861736e2774207375727061737365642074696d65206c6f636b2e54696d656c6f636b3a3a73657444656c61793a2044656c6179206d75737420657863656564206d696e696d756d2064656c61792e54696d656c6f636b3a3a73657450656e64696e6741646d696e3a2046697273742063616c6c206d75737420636f6d652066726f6d2061646d696e2e54696d656c6f636b3a3a73657444656c61793a2044656c6179206d757374206e6f7420657863656564206d6178696d756d2064656c61792e54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e206861736e2774206265656e207175657565642e54696d656c6f636b3a3a61636365707441646d696e3a2043616c6c206d75737420636f6d652066726f6d2070656e64696e6741646d696e2e54696d656c6f636b3a3a73657450656e64696e6741646d696e3a2043616c6c206d75737420636f6d652066726f6d2054696d656c6f636b2e54696d656c6f636b3a3a71756575655472616e73616374696f6e3a2043616c6c206d75737420636f6d652066726f6d2061646d696e2e54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e20657865637574696f6e2072657665727465642e54696d656c6f636b3a3a71756575655472616e73616374696f6e3a20457374696d6174656420657865637574696f6e20626c6f636b206d75737420736174697366792064656c61792e54696d656c6f636b3a3a73657444656c61793a2043616c6c206d75737420636f6d652066726f6d2054696d656c6f636b2ea2646970667358221220cfaf683ead4f258434d45bf5eaf0e2ba0af7a3198155307607476b12e9da68fa64736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220db771a40806167d1ef4b9ada219de8ad1d99d685d63b0ee846c0f1aea8d86d5964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c8063647846a5116100b2578063a2e74af611610081578063d7d3ba3411610066578063d7d3ba341461078a578063efde4e64146107bd578063f46901ed146107c55761011b565b8063a2e74af61461074f578063bb08e673146107825761011b565b8063647846a5146106dd57806369e15404146106e55780636b392680146106ff5780639e93963c1461071c5761011b565b806341d1de97116100ee57806341d1de97146103f1578063485cc9551461040e578063541b3983146104495780635b16ebb7146106965761011b565b8063017e7e581461012057806304b723cd14610151578063094b7415146103b457806315cce224146103bc575b600080fd5b6101286107f8565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610128600480360361012081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460208302840111640100000000831117156101b757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561020757600080fd5b82018360208201111561021957600080fd5b8035906020019184602083028401116401000000008311171561023b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561028b57600080fd5b82018360208201111561029d57600080fd5b803590602001918460018302840111640100000000831117156102bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561031257600080fd5b82018360208201111561032457600080fd5b8035906020019184600183028401116401000000008311171561034657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040810135906060810135906080013573ffffffffffffffffffffffffffffffffffffffff16610814565b610128610c40565b6103ef600480360360208110156103d257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c5c565b005b6101286004803603602081101561040757600080fd5b5035610d51565b6103ef6004803603604081101561042457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610d85565b610128600480360361012081101561046057600080fd5b81019060208101813564010000000081111561047b57600080fd5b82018360208201111561048d57600080fd5b803590602001918460208302840111640100000000831117156104af57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104ff57600080fd5b82018360208201111561051157600080fd5b8035906020019184602083028401116401000000008311171561053357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561058357600080fd5b82018360208201111561059557600080fd5b803590602001918460018302840111640100000000831117156105b757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561060a57600080fd5b82018360208201111561061c57600080fd5b8035906020019184600183028401116401000000008311171561063e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060408101359060608101359060800135610e9e565b6106c9600480360360208110156106ac57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610fc8565b604080519115158252519081900360200190f35b610128610ff3565b6106ed61100f565b60408051918252519081900360200190f35b6103ef6004803603602081101561071557600080fd5b5035611015565b6106c96004803603602081101561073257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110ce565b6103ef6004803603602081101561076557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110f9565b6101286111c6565b6103ef600480360360208110156107a057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166111e2565b6106ed6112af565b6103ef600480360360208110156107db57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112b5565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000805473ffffffffffffffffffffffffffffffffffffffff1615801590610853575060025473ffffffffffffffffffffffffffffffffffffffff1615155b801561086157506000600354115b15610897576000546003546002546108979273ffffffffffffffffffffffffffffffffffffffff918216923392909116906113a8565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dd3d9fd8c8c8c8c8c8c8c8c8c6040518a63ffffffff1660e01b815260040180806020018060200180602001806020018a81526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185810385528e818151815260200191508051906020019060200280838360005b8381101561096f578181015183820152602001610957565b5050505090500185810384528d818151815260200191508051906020019060200280838360005b838110156109ae578181015183820152602001610996565b5050505090500185810383528c818151815260200191508051906020019080838360005b838110156109ea5781810151838201526020016109d2565b50505050905090810190601f168015610a175780820380516001836020036101000a031916815260200191505b5085810382528b5181528b516020918201918d019080838360005b83811015610a4a578181015183820152602001610a32565b50505050905090810190601f168015610a775780820380516001836020036101000a031916815260200191505b509d5050505050505050505050505050602060405180830381600087803b158015610aa157600080fd5b505af1158015610ab5573d6000803e3d6000fd5b505050506040513d6020811015610acb57600080fd5b810190808051906020019092919050505090506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f8fda8d9c5bfffaab5916d8100abc6eafd9b7d4dae8328a5e6a8e05d21a93fa888c6004805490506040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c1e578181015183820152602001610c06565b50505050905001935050505060405180910390a29a9950505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314610ce257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f0842bcbb92ca6d47ae89816778a843992dff9b876fad009865e1c5df73d46d1f90600090a250565b60048181548110610d5e57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60075474010000000000000000000000000000000000000000900460ff1615610e0f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f537461626c6553776170466163746f72793a20696e697469616c697a65640000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff948516179091556007805474010000000000000000000000000000000000000000921692909316919091177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16179055565b600080604051610ead906117b8565b604051809103906000f080158015610ec9573d6000803e3d6000fd5b5090506000610edf8c8c8c8c8c8c8c8c8a610814565b90508173ffffffffffffffffffffffffffffffffffffffff1663cd6dc68733866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff909216600090815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559150509998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205460ff1690565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60015473ffffffffffffffffffffffffffffffffffffffff16331461109b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600381905560405181907fd854f702b4e23ab27557a75b5b4e72066f8ab6929930f813720339c72eaa8b6390600090a250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205460ff1690565b60015473ffffffffffffffffffffffffffffffffffffffff16331461117f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461126857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045490565b60015473ffffffffffffffffffffffffffffffffffffffff16331461133b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f464c503a20464f5242494444454e000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e91a250565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261143d908590611443565b50505050565b60606114a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115209092919063ffffffff16565b80519091501561151b578080602001905160208110156114c457600080fd5b505161151b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613648602a913960400191505060405180910390fd5b505050565b606061152f8484600085611539565b90505b9392505050565b606082471015611594576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806136226026913960400191505060405180910390fd5b61159d856116f4565b61160857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061167257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611635565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146116d4576040519150601f19603f3d011682016040523d82523d6000602084013e6116d9565b606091505b50915091506116e98282866116fa565b979650505050505050565b3b151590565b60608315611709575081611532565b8251156117195782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561177d578181015183820152602001611765565b50505050905090810190601f1680156117aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b611e5c806117c68339019056fe608060405234801561001057600080fd5b506003805460ff19908116909155600080549091169055611e26806100366000396000f3fe6080604052600436106100ec5760003560e01c80636fc1f57e1161008a578063cd6dc68711610059578063cd6dc6871461069e578063e177246e146106e4578063f2b065371461070e578063f851a44014610738576100f3565b80636fc1f57e146106365780637d645fab1461065f578063b1b43ae514610674578063c1a287e214610689576100f3565b80633a66f901116100c65780633a66f901146103135780634dd18bf514610483578063591fcdfe146104c35780636a42b8f814610621576100f3565b80630825f38f146100f85780630e18b681146102be57806326782247146102d5576100f3565b366100f357005b600080fd5b610249600480360360a081101561010e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561014b57600080fd5b82018360208201111561015d57600080fd5b8035906020019184600183028401116401000000008311171561017f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101d257600080fd5b8201836020820111156101e457600080fd5b8035906020019184600183028401116401000000008311171561020657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925061074d915050565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028357818101518382015260200161026b565b50505050905090810190601f1680156102b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ca57600080fd5b506102d3610d95565b005b3480156102e157600080fd5b506102ea610ea4565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561031f57600080fd5b50610471600480360360a081101561033657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561037357600080fd5b82018360208201111561038557600080fd5b803590602001918460018302840111640100000000831117156103a757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156103fa57600080fd5b82018360208201111561040c57600080fd5b8035906020019184600183028401116401000000008311171561042e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610ec0915050565b60408051918252519081900360200190f35b34801561048f57600080fd5b506102d3600480360360208110156104a657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611222565b3480156104cf57600080fd5b506102d3600480360360a08110156104e657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561052357600080fd5b82018360208201111561053557600080fd5b8035906020019184600183028401116401000000008311171561055757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156105aa57600080fd5b8201836020820111156105bc57600080fd5b803590602001918460018302840111640100000000831117156105de57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506113a0915050565b34801561062d57600080fd5b50610471611693565b34801561064257600080fd5b5061064b611699565b604080519115158252519081900360200190f35b34801561066b57600080fd5b506104716116a2565b34801561068057600080fd5b506104716116a9565b34801561069557600080fd5b506104716116b0565b3480156106aa57600080fd5b506102d3600480360360408110156106c157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356116b7565b3480156106f057600080fd5b506102d36004803603602081101561070757600080fd5b503561189f565b34801561071a57600080fd5b5061064b6004803603602081101561073157600080fd5b50356119e2565b34801561074457600080fd5b506102ea6119f7565b600054606090610100900473ffffffffffffffffffffffffffffffffffffffff1633146107c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611a986038913960400191505060405180910390fd5b60008686868686604051602001808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015610838578181015183820152602001610820565b50505050905090810190601f1680156108655780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610898578181015183820152602001610880565b50505050905090810190601f1680156108c55780820380516001836020036101000a031916815260200191505b50604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600490935291205490995060ff16975061096e9650505050505050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180611c57603d913960400191505060405180910390fd5b82610977611a18565b10156109ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526045815260200180611b6b6045913960600191505060405180910390fd5b6109db8362127500611a1c565b6109e3611a18565b1115610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180611b386033913960400191505060405180910390fd5b600081815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558451606090610a7e575083610b34565b85805190602001208560405160200180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182805190602001908083835b60208310610afc57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610abf565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405290505b600060608973ffffffffffffffffffffffffffffffffffffffff1689846040518082805190602001908083835b60208310610b9e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610b61565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610c00576040519150601f19603f3d011682016040523d82523d6000602084013e610c05565b606091505b509150915081610c60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180611d3a603d913960400191505060405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff16847fa560e3198060a2f10670c1ec5b403077ea6ae93ca8de1c32b451dc1a943cd6e78b8b8b8b604051808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015610cea578181015183820152602001610cd2565b50505050905090810190601f168015610d175780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610d4a578181015183820152602001610d32565b50505050905090810190601f168015610d775780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a39998505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611c946038913960400191505060405180910390fd5b600080546101003381027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117808355600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560405191900473ffffffffffffffffffffffffffffffffffffffff16917f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c91a2565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60008054610100900473ffffffffffffffffffffffffffffffffffffffff163314610f36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180611d046036913960400191505060405180910390fd5b610f4a600254610f44611a18565b90611a1c565b821015610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526049815260200180611d776049913960600191505060405180910390fd5b60008686868686604051602001808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015611015578181015183820152602001610ffd565b50505050905090810190601f1680156110425780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561107557818101518382015260200161105d565b50505050905090810190601f1680156110a25780820380516001836020036101000a031916815260200191505b5097505050505050505060405160208183030381529060405280519060200120905060016004600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508673ffffffffffffffffffffffffffffffffffffffff16817f76e2796dc3a81d57b0e8504b647febcbeeb5f4af818e164f11eef8131a6a763f88888888604051808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561117a578181015183820152602001611162565b50505050905090810190601f1680156111a75780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156111da5781810151838201526020016111c2565b50505050905090810190601f1680156112075780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a39695505050505050565b60035460ff161561128a57333014611285576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611ccc6038913960400191505060405180910390fd5b61132b565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1633146112ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b815260200180611be4603b913960400191505060405180910390fd5b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040519116907f69d78e38a01985fbb1462961809b4b2d65531bc93b2b94037f3334b82ca4a75690600090a250565b600054610100900473ffffffffffffffffffffffffffffffffffffffff163314611415576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526037815260200180611ad06037913960400191505060405180910390fd5b60008585858585604051602001808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015611488578181015183820152602001611470565b50505050905090810190601f1680156114b55780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156114e85781810151838201526020016114d0565b50505050905090810190601f1680156115155780820380516001836020036101000a031916815260200191505b5097505050505050505060405160208183030381529060405280519060200120905060006004600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508573ffffffffffffffffffffffffffffffffffffffff16817f2fffc091a501fd91bfbff27141450d3acb40fb8e6d8382b243ec7a812a3aaf8787878787604051808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156115ed5781810151838201526020016115d5565b50505050905090810190601f16801561161a5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561164d578181015183820152602001611635565b50505050905090810190601f16801561167a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a3505050505050565b60025481565b60035460ff1681565b62278d0081565b6201518081565b6212750081565b60005460ff1615611713576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180611b076031913960400191505060405180910390fd5b6201518081101561176f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180611bb06034913960400191505060405180910390fd5b62278d008111156117cb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611c1f6038913960400191505060405180910390fd5b60028190556000805460017fffffffffffffffffffffff0000000000000000000000000000000000000000ff90911661010073ffffffffffffffffffffffffffffffffffffffff8681168202929092177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169290921780845560405192900416917f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c91a26002546040517f948b1f6a42ee138b7e34058ba85a37f716d55ff25ff05a763f15bed6a04c8d2c90600090a25050565b3330146118f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180611dc06031913960400191505060405180910390fd5b62015180811015611953576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180611bb06034913960400191505060405180910390fd5b62278d008111156119af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180611c1f6038913960400191505060405180910390fd5b600281905560405181907f948b1f6a42ee138b7e34058ba85a37f716d55ff25ff05a763f15bed6a04c8d2c90600090a250565b60046020526000908152604090205460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b4290565b600082820183811015611a9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a2043616c6c206d75737420636f6d652066726f6d2061646d696e2e54696d656c6f636b3a3a63616e63656c5472616e73616374696f6e3a2043616c6c206d75737420636f6d652066726f6d2061646d696e2e54696d656c6f636b3a3a636f6e7374727563746f723a20496e697469616c697a6564206d7573742062652066616c73652e54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e206973207374616c652e54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e206861736e2774207375727061737365642074696d65206c6f636b2e54696d656c6f636b3a3a73657444656c61793a2044656c6179206d75737420657863656564206d696e696d756d2064656c61792e54696d656c6f636b3a3a73657450656e64696e6741646d696e3a2046697273742063616c6c206d75737420636f6d652066726f6d2061646d696e2e54696d656c6f636b3a3a73657444656c61793a2044656c6179206d757374206e6f7420657863656564206d6178696d756d2064656c61792e54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e206861736e2774206265656e207175657565642e54696d656c6f636b3a3a61636365707441646d696e3a2043616c6c206d75737420636f6d652066726f6d2070656e64696e6741646d696e2e54696d656c6f636b3a3a73657450656e64696e6741646d696e3a2043616c6c206d75737420636f6d652066726f6d2054696d656c6f636b2e54696d656c6f636b3a3a71756575655472616e73616374696f6e3a2043616c6c206d75737420636f6d652066726f6d2061646d696e2e54696d656c6f636b3a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e20657865637574696f6e2072657665727465642e54696d656c6f636b3a3a71756575655472616e73616374696f6e3a20457374696d6174656420657865637574696f6e20626c6f636b206d75737420736174697366792064656c61792e54696d656c6f636b3a3a73657444656c61793a2043616c6c206d75737420636f6d652066726f6d2054696d656c6f636b2ea2646970667358221220cfaf683ead4f258434d45bf5eaf0e2ba0af7a3198155307607476b12e9da68fa64736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220db771a40806167d1ef4b9ada219de8ad1d99d685d63b0ee846c0f1aea8d86d5964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7011,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7014,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7016,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "feeToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7018,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "feeAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7022,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7026,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "_pools",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7030,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "_timelocks",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7032,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "swapCreator",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ISwapCreator)6073"
      },
      {
        "astId": 7035,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "_initialized",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISwapCreator)6073": {
        "encoding": "inplace",
        "label": "contract ISwapCreator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}